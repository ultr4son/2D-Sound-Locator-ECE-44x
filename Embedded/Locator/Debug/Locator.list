
Locator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000157c0  08006580  08006580  00016580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd40  0801bd40  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd40  0801bd40  0002bd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd48  0801bd48  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bd48  0801bd48  0002bd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bd4c  0801bd4c  0002bd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801bd50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c090  2000007c  0801bdcc  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c10c  0801bdcc  0003c10c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142fa  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028c1  00000000  00000000  000443a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  00046c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  000474a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228ca  00000000  00000000  00047c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009815  00000000  00000000  0006a52a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cccf3  00000000  00000000  00073d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f4  00000000  00000000  00140a32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a74  00000000  00000000  00140b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002d92  00000000  00000000  0014359c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006564 	.word	0x08006564

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006564 	.word	0x08006564

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b972 	b.w	8000f88 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9e08      	ldr	r6, [sp, #32]
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	4688      	mov	r8, r1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d14b      	bne.n	8000d62 <__udivmoddi4+0xa6>
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	4615      	mov	r5, r2
 8000cce:	d967      	bls.n	8000da0 <__udivmoddi4+0xe4>
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	b14a      	cbz	r2, 8000cea <__udivmoddi4+0x2e>
 8000cd6:	f1c2 0720 	rsb	r7, r2, #32
 8000cda:	fa01 f302 	lsl.w	r3, r1, r2
 8000cde:	fa20 f707 	lsr.w	r7, r0, r7
 8000ce2:	4095      	lsls	r5, r2
 8000ce4:	ea47 0803 	orr.w	r8, r7, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf4:	fa1f fc85 	uxth.w	ip, r5
 8000cf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d00:	fb07 f10c 	mul.w	r1, r7, ip
 8000d04:	4299      	cmp	r1, r3
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x60>
 8000d08:	18eb      	adds	r3, r5, r3
 8000d0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0e:	f080 811b 	bcs.w	8000f48 <__udivmoddi4+0x28c>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 8118 	bls.w	8000f48 <__udivmoddi4+0x28c>
 8000d18:	3f02      	subs	r7, #2
 8000d1a:	442b      	add	r3, r5
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d30:	45a4      	cmp	ip, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x8c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x290>
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x290>
 8000d44:	3802      	subs	r0, #2
 8000d46:	442c      	add	r4, r5
 8000d48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d4c:	eba4 040c 	sub.w	r4, r4, ip
 8000d50:	2700      	movs	r7, #0
 8000d52:	b11e      	cbz	r6, 8000d5c <__udivmoddi4+0xa0>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xbe>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	f000 80eb 	beq.w	8000f42 <__udivmoddi4+0x286>
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d72:	4638      	mov	r0, r7
 8000d74:	4639      	mov	r1, r7
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f783 	clz	r7, r3
 8000d7e:	2f00      	cmp	r7, #0
 8000d80:	d147      	bne.n	8000e12 <__udivmoddi4+0x156>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd0>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2c4>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	4698      	mov	r8, r3
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa0>
 8000d9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa0>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xe8>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 808f 	bne.w	8000ecc <__udivmoddi4+0x210>
 8000dae:	1b49      	subs	r1, r1, r5
 8000db0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db4:	fa1f f885 	uxth.w	r8, r5
 8000db8:	2701      	movs	r7, #1
 8000dba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dbe:	0c23      	lsrs	r3, r4, #16
 8000dc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x124>
 8000dd0:	18eb      	adds	r3, r5, r3
 8000dd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x122>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	f200 80cd 	bhi.w	8000f78 <__udivmoddi4+0x2bc>
 8000dde:	4684      	mov	ip, r0
 8000de0:	1a59      	subs	r1, r3, r1
 8000de2:	b2a3      	uxth	r3, r4
 8000de4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000df0:	fb08 f800 	mul.w	r8, r8, r0
 8000df4:	45a0      	cmp	r8, r4
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0x14c>
 8000df8:	192c      	adds	r4, r5, r4
 8000dfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x14a>
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	f200 80b6 	bhi.w	8000f72 <__udivmoddi4+0x2b6>
 8000e06:	4618      	mov	r0, r3
 8000e08:	eba4 0408 	sub.w	r4, r4, r8
 8000e0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e10:	e79f      	b.n	8000d52 <__udivmoddi4+0x96>
 8000e12:	f1c7 0c20 	rsb	ip, r7, #32
 8000e16:	40bb      	lsls	r3, r7
 8000e18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e20:	fa01 f407 	lsl.w	r4, r1, r7
 8000e24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e30:	4325      	orrs	r5, r4
 8000e32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e36:	0c2c      	lsrs	r4, r5, #16
 8000e38:	fb08 3319 	mls	r3, r8, r9, r3
 8000e3c:	fa1f fa8e 	uxth.w	sl, lr
 8000e40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e44:	fb09 f40a 	mul.w	r4, r9, sl
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b0>
 8000e54:	eb1e 0303 	adds.w	r3, lr, r3
 8000e58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e5c:	f080 8087 	bcs.w	8000f6e <__udivmoddi4+0x2b2>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f240 8084 	bls.w	8000f6e <__udivmoddi4+0x2b2>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4473      	add	r3, lr
 8000e6c:	1b1b      	subs	r3, r3, r4
 8000e6e:	b2ad      	uxth	r5, r5
 8000e70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e74:	fb08 3310 	mls	r3, r8, r0, r3
 8000e78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e80:	45a2      	cmp	sl, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1da>
 8000e84:	eb1e 0404 	adds.w	r4, lr, r4
 8000e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e8c:	d26b      	bcs.n	8000f66 <__udivmoddi4+0x2aa>
 8000e8e:	45a2      	cmp	sl, r4
 8000e90:	d969      	bls.n	8000f66 <__udivmoddi4+0x2aa>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4474      	add	r4, lr
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ea2:	454c      	cmp	r4, r9
 8000ea4:	46c2      	mov	sl, r8
 8000ea6:	464b      	mov	r3, r9
 8000ea8:	d354      	bcc.n	8000f54 <__udivmoddi4+0x298>
 8000eaa:	d051      	beq.n	8000f50 <__udivmoddi4+0x294>
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d069      	beq.n	8000f84 <__udivmoddi4+0x2c8>
 8000eb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ebc:	40fd      	lsrs	r5, r7
 8000ebe:	40fc      	lsrs	r4, r7
 8000ec0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec8:	2700      	movs	r7, #0
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0xa0>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed4:	4095      	lsls	r5, r2
 8000ed6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eda:	fa21 f303 	lsr.w	r3, r1, r3
 8000ede:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ee2:	4338      	orrs	r0, r7
 8000ee4:	0c01      	lsrs	r1, r0, #16
 8000ee6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eea:	fa1f f885 	uxth.w	r8, r5
 8000eee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ef2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef6:	fb07 f308 	mul.w	r3, r7, r8
 8000efa:	428b      	cmp	r3, r1
 8000efc:	fa04 f402 	lsl.w	r4, r4, r2
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x256>
 8000f02:	1869      	adds	r1, r5, r1
 8000f04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f08:	d22f      	bcs.n	8000f6a <__udivmoddi4+0x2ae>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d92d      	bls.n	8000f6a <__udivmoddi4+0x2ae>
 8000f0e:	3f02      	subs	r7, #2
 8000f10:	4429      	add	r1, r5
 8000f12:	1acb      	subs	r3, r1, r3
 8000f14:	b281      	uxth	r1, r0
 8000f16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb00 f308 	mul.w	r3, r0, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x27e>
 8000f2a:	1869      	adds	r1, r5, r1
 8000f2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f30:	d217      	bcs.n	8000f62 <__udivmoddi4+0x2a6>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d915      	bls.n	8000f62 <__udivmoddi4+0x2a6>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4429      	add	r1, r5
 8000f3a:	1ac9      	subs	r1, r1, r3
 8000f3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f40:	e73b      	b.n	8000dba <__udivmoddi4+0xfe>
 8000f42:	4637      	mov	r7, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e709      	b.n	8000d5c <__udivmoddi4+0xa0>
 8000f48:	4607      	mov	r7, r0
 8000f4a:	e6e7      	b.n	8000d1c <__udivmoddi4+0x60>
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x8c>
 8000f50:	4541      	cmp	r1, r8
 8000f52:	d2ab      	bcs.n	8000eac <__udivmoddi4+0x1f0>
 8000f54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f58:	eb69 020e 	sbc.w	r2, r9, lr
 8000f5c:	3801      	subs	r0, #1
 8000f5e:	4613      	mov	r3, r2
 8000f60:	e7a4      	b.n	8000eac <__udivmoddi4+0x1f0>
 8000f62:	4660      	mov	r0, ip
 8000f64:	e7e9      	b.n	8000f3a <__udivmoddi4+0x27e>
 8000f66:	4618      	mov	r0, r3
 8000f68:	e795      	b.n	8000e96 <__udivmoddi4+0x1da>
 8000f6a:	4667      	mov	r7, ip
 8000f6c:	e7d1      	b.n	8000f12 <__udivmoddi4+0x256>
 8000f6e:	4681      	mov	r9, r0
 8000f70:	e77c      	b.n	8000e6c <__udivmoddi4+0x1b0>
 8000f72:	3802      	subs	r0, #2
 8000f74:	442c      	add	r4, r5
 8000f76:	e747      	b.n	8000e08 <__udivmoddi4+0x14c>
 8000f78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f7c:	442b      	add	r3, r5
 8000f7e:	e72f      	b.n	8000de0 <__udivmoddi4+0x124>
 8000f80:	4638      	mov	r0, r7
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xda>
 8000f84:	4637      	mov	r7, r6
 8000f86:	e6e9      	b.n	8000d5c <__udivmoddi4+0xa0>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 fca3 	bl	80018e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_cfft_init_f32(&fft_instance, SAMPLES);
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	488a      	ldr	r0, [pc, #552]	; (80011c8 <main+0x238>)
 8000fa0:	f002 f9b8 	bl	8003314 <arm_cfft_init_f32>
//  int idx = (int)(1.0 / (SIN_SAMPLES / SAMPLES));

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f9cc 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f000 fa62 	bl	8001470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fac:	f000 fa36 	bl	800141c <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  for(int i = 0; i < SAMPLES; i++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb4:	e087      	b.n	80010c6 <main+0x136>
		  ADC_top[i] = ADC_right[i] = (uint32_t) ((sin(2 * M_PI * SIN_FREQUENCY * ((double)i / SIN_SAMPLING_RATE)) + 1) * (double) ((0xFFF + 1) / 2));
 8000fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fb8:	f7ff facc 	bl	8000554 <__aeabi_i2d>
 8000fbc:	a37c      	add	r3, pc, #496	; (adr r3, 80011b0 <main+0x220>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fc5b 	bl	800087c <__aeabi_ddiv>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	4621      	mov	r1, r4
 8000fce:	a37a      	add	r3, pc, #488	; (adr r3, 80011b8 <main+0x228>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff fb28 	bl	8000628 <__aeabi_dmul>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	460c      	mov	r4, r1
 8000fdc:	ec44 3b17 	vmov	d7, r3, r4
 8000fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe4:	eef0 0a67 	vmov.f32	s1, s15
 8000fe8:	f004 fa5a 	bl	80054a0 <sin>
 8000fec:	ec51 0b10 	vmov	r0, r1, d0
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b75      	ldr	r3, [pc, #468]	; (80011cc <main+0x23c>)
 8000ff6:	f7ff f961 	bl	80002bc <__adddf3>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	4618      	mov	r0, r3
 8001000:	4621      	mov	r1, r4
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b72      	ldr	r3, [pc, #456]	; (80011d0 <main+0x240>)
 8001008:	f7ff fb0e 	bl	8000628 <__aeabi_dmul>
 800100c:	4603      	mov	r3, r0
 800100e:	460c      	mov	r4, r1
 8001010:	4618      	mov	r0, r3
 8001012:	4621      	mov	r1, r4
 8001014:	f7ff fdca 	bl	8000bac <__aeabi_d2uiz>
 8001018:	4601      	mov	r1, r0
 800101a:	4a6e      	ldr	r2, [pc, #440]	; (80011d4 <main+0x244>)
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001022:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <main+0x244>)
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800102a:	496b      	ldr	r1, [pc, #428]	; (80011d8 <main+0x248>)
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  ADC_bottom[i] = ADC_left[i] = (uint32_t) ((sin(2 * M_PI * SIN_FREQUENCY * ((double)i / SIN_SAMPLING_RATE) + M_PI / 32) + 1) * (double) ((0xFFF + 1) / 2));
 8001032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001034:	f7ff fa8e 	bl	8000554 <__aeabi_i2d>
 8001038:	a35d      	add	r3, pc, #372	; (adr r3, 80011b0 <main+0x220>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff fc1d 	bl	800087c <__aeabi_ddiv>
 8001042:	4603      	mov	r3, r0
 8001044:	460c      	mov	r4, r1
 8001046:	4618      	mov	r0, r3
 8001048:	4621      	mov	r1, r4
 800104a:	a35b      	add	r3, pc, #364	; (adr r3, 80011b8 <main+0x228>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff faea 	bl	8000628 <__aeabi_dmul>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	a358      	add	r3, pc, #352	; (adr r3, 80011c0 <main+0x230>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff f92b 	bl	80002bc <__adddf3>
 8001066:	4603      	mov	r3, r0
 8001068:	460c      	mov	r4, r1
 800106a:	ec44 3b17 	vmov	d7, r3, r4
 800106e:	eeb0 0a47 	vmov.f32	s0, s14
 8001072:	eef0 0a67 	vmov.f32	s1, s15
 8001076:	f004 fa13 	bl	80054a0 <sin>
 800107a:	ec51 0b10 	vmov	r0, r1, d0
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b52      	ldr	r3, [pc, #328]	; (80011cc <main+0x23c>)
 8001084:	f7ff f91a 	bl	80002bc <__adddf3>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b4e      	ldr	r3, [pc, #312]	; (80011d0 <main+0x240>)
 8001096:	f7ff fac7 	bl	8000628 <__aeabi_dmul>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	4618      	mov	r0, r3
 80010a0:	4621      	mov	r1, r4
 80010a2:	f7ff fd83 	bl	8000bac <__aeabi_d2uiz>
 80010a6:	4601      	mov	r1, r0
 80010a8:	4a4c      	ldr	r2, [pc, #304]	; (80011dc <main+0x24c>)
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80010b0:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <main+0x24c>)
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010b8:	4949      	ldr	r1, [pc, #292]	; (80011e0 <main+0x250>)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 0; i < SAMPLES; i++) {
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	3301      	adds	r3, #1
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010cc:	f6ff af73 	blt.w	8000fb6 <main+0x26>

	  }

		to_float(ADC_top, top_float, SAMPLES);
 80010d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d4:	4943      	ldr	r1, [pc, #268]	; (80011e4 <main+0x254>)
 80010d6:	4840      	ldr	r0, [pc, #256]	; (80011d8 <main+0x248>)
 80010d8:	f000 fa5c 	bl	8001594 <to_float>
		to_float(ADC_bottom, bottom_float, SAMPLES);
 80010dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e0:	4941      	ldr	r1, [pc, #260]	; (80011e8 <main+0x258>)
 80010e2:	483f      	ldr	r0, [pc, #252]	; (80011e0 <main+0x250>)
 80010e4:	f000 fa56 	bl	8001594 <to_float>
		to_float(ADC_right, right_float, SAMPLES);
 80010e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ec:	493f      	ldr	r1, [pc, #252]	; (80011ec <main+0x25c>)
 80010ee:	4839      	ldr	r0, [pc, #228]	; (80011d4 <main+0x244>)
 80010f0:	f000 fa50 	bl	8001594 <to_float>
		to_float(ADC_left, left_float, SAMPLES);
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	493d      	ldr	r1, [pc, #244]	; (80011f0 <main+0x260>)
 80010fa:	4838      	ldr	r0, [pc, #224]	; (80011dc <main+0x24c>)
 80010fc:	f000 fa4a 	bl	8001594 <to_float>

		arm_cfft_init_f32(&fft_instance, SAMPLES);
 8001100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001104:	4830      	ldr	r0, [pc, #192]	; (80011c8 <main+0x238>)
 8001106:	f002 f905 	bl	8003314 <arm_cfft_init_f32>
		arm_cfft_f32(&fft_instance, top_float, 0, 1);
 800110a:	2301      	movs	r3, #1
 800110c:	2200      	movs	r2, #0
 800110e:	4935      	ldr	r1, [pc, #212]	; (80011e4 <main+0x254>)
 8001110:	482d      	ldr	r0, [pc, #180]	; (80011c8 <main+0x238>)
 8001112:	f002 fc79 	bl	8003a08 <arm_cfft_f32>
		arm_cmplx_mag_f32(top_float, top_mag, SAMPLES);
 8001116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111a:	4936      	ldr	r1, [pc, #216]	; (80011f4 <main+0x264>)
 800111c:	4831      	ldr	r0, [pc, #196]	; (80011e4 <main+0x254>)
 800111e:	f002 fd0b 	bl	8003b38 <arm_cmplx_mag_f32>

		//calculate phase for each bin
		for(int i = 0; i < SAMPLES; i+=2) {
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	e029      	b.n	800117c <main+0x1ec>
			top_phase[i/2] = atan(top_float[i + 1] / top_float[i]);
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	3301      	adds	r3, #1
 800112c:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <main+0x254>)
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <main+0x254>)
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001146:	ee16 0a90 	vmov	r0, s13
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	4603      	mov	r3, r0
 8001150:	460c      	mov	r4, r1
 8001152:	ec44 3b10 	vmov	d0, r3, r4
 8001156:	f003 fff7 	bl	8005148 <atan>
 800115a:	ec51 0b10 	vmov	r0, r1, d0
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	0fda      	lsrs	r2, r3, #31
 8001162:	4413      	add	r3, r2
 8001164:	105b      	asrs	r3, r3, #1
 8001166:	461c      	mov	r4, r3
 8001168:	f7ff fd40 	bl	8000bec <__aeabi_d2f>
 800116c:	4601      	mov	r1, r0
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <main+0x268>)
 8001170:	00a3      	lsls	r3, r4, #2
 8001172:	4413      	add	r3, r2
 8001174:	6019      	str	r1, [r3, #0]
		for(int i = 0; i < SAMPLES; i+=2) {
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	3302      	adds	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001182:	dbd1      	blt.n	8001128 <main+0x198>
		}

		arm_cfft_init_f32(&fft_instance, SAMPLES);
 8001184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <main+0x238>)
 800118a:	f002 f8c3 	bl	8003314 <arm_cfft_init_f32>
		arm_cfft_f32(&fft_instance, bottom_float, 0, 1);
 800118e:	2301      	movs	r3, #1
 8001190:	2200      	movs	r2, #0
 8001192:	4915      	ldr	r1, [pc, #84]	; (80011e8 <main+0x258>)
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <main+0x238>)
 8001196:	f002 fc37 	bl	8003a08 <arm_cfft_f32>
		arm_cmplx_mag_f32(bottom_float, bottom_mag, SAMPLES);
 800119a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119e:	4917      	ldr	r1, [pc, #92]	; (80011fc <main+0x26c>)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <main+0x258>)
 80011a2:	f002 fcc9 	bl	8003b38 <arm_cmplx_mag_f32>

		//calculate phase for each bin
		for(int i = 0; i < SAMPLES; i+=2) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e053      	b.n	8001254 <main+0x2c4>
 80011ac:	f3af 8000 	nop.w
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40c38800 	.word	0x40c38800
 80011b8:	86bfe4d8 	.word	0x86bfe4d8
 80011bc:	409d73d2 	.word	0x409d73d2
 80011c0:	54442d18 	.word	0x54442d18
 80011c4:	3fb921fb 	.word	0x3fb921fb
 80011c8:	200098f0 	.word	0x200098f0
 80011cc:	3ff00000 	.word	0x3ff00000
 80011d0:	40a00000 	.word	0x40a00000
 80011d4:	200020a4 	.word	0x200020a4
 80011d8:	200038a4 	.word	0x200038a4
 80011dc:	200008a4 	.word	0x200008a4
 80011e0:	2000b100 	.word	0x2000b100
 80011e4:	200068a8 	.word	0x200068a8
 80011e8:	200048a4 	.word	0x200048a4
 80011ec:	2000a100 	.word	0x2000a100
 80011f0:	200088b0 	.word	0x200088b0
 80011f4:	200018a4 	.word	0x200018a4
 80011f8:	200030a4 	.word	0x200030a4
 80011fc:	200058a8 	.word	0x200058a8
			bottom_phase[i/2] = atan(bottom_float[i + 1] / bottom_float[i]);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	3301      	adds	r3, #1
 8001204:	4a46      	ldr	r2, [pc, #280]	; (8001320 <main+0x390>)
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4a44      	ldr	r2, [pc, #272]	; (8001320 <main+0x390>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800121e:	ee16 0a90 	vmov	r0, s13
 8001222:	f7ff f9a9 	bl	8000578 <__aeabi_f2d>
 8001226:	4603      	mov	r3, r0
 8001228:	460c      	mov	r4, r1
 800122a:	ec44 3b10 	vmov	d0, r3, r4
 800122e:	f003 ff8b 	bl	8005148 <atan>
 8001232:	ec51 0b10 	vmov	r0, r1, d0
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	0fda      	lsrs	r2, r3, #31
 800123a:	4413      	add	r3, r2
 800123c:	105b      	asrs	r3, r3, #1
 800123e:	461c      	mov	r4, r3
 8001240:	f7ff fcd4 	bl	8000bec <__aeabi_d2f>
 8001244:	4601      	mov	r1, r0
 8001246:	4a37      	ldr	r2, [pc, #220]	; (8001324 <main+0x394>)
 8001248:	00a3      	lsls	r3, r4, #2
 800124a:	4413      	add	r3, r2
 800124c:	6019      	str	r1, [r3, #0]
		for(int i = 0; i < SAMPLES; i+=2) {
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3302      	adds	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125a:	dbd1      	blt.n	8001200 <main+0x270>
//		for(int i = 0; i < SAMPLES; i+=2) {
//			left_phase[i/2] = atan(left_float[i + 1] / left_float[i]);
//		}
		float32_t max;
		uint32_t index;
		arm_max_f32(top_mag, SAMPLES / 2, &max, &index);
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	f107 0208 	add.w	r2, r7, #8
 8001262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001266:	4830      	ldr	r0, [pc, #192]	; (8001328 <main+0x398>)
 8001268:	f001 ffe4 	bl	8003234 <arm_max_f32>

		int frequency = (index * SIN_SAMPLING_RATE) / SAMPLES / 2;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	0adb      	lsrs	r3, r3, #11
 8001278:	61bb      	str	r3, [r7, #24]
		if(frequency >= fL && frequency <= fH) {
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <main+0x39c>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	db3d      	blt.n	8001310 <main+0x380>
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <main+0x3a0>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	d830      	bhi.n	8001310 <main+0x380>
			float32_t t_phase = top_phase[index];
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a20      	ldr	r2, [pc, #128]	; (8001334 <main+0x3a4>)
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	617b      	str	r3, [r7, #20]
			float32_t b_phase = bottom_phase[index];
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <main+0x394>)
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	613b      	str	r3, [r7, #16]
			float32_t tb_t_diff = ((t_phase - b_phase) * SAMPLES)/(2 * M_PI);
 80012c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001338 <main+0x3a8>
 80012d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012da:	ee17 0a90 	vmov	r0, s15
 80012de:	f7ff f94b 	bl	8000578 <__aeabi_f2d>
 80012e2:	a30d      	add	r3, pc, #52	; (adr r3, 8001318 <main+0x388>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fac8 	bl	800087c <__aeabi_ddiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	4618      	mov	r0, r3
 80012f2:	4621      	mov	r1, r4
 80012f4:	f7ff fc7a 	bl	8000bec <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]
			printf("%f\n\r", tb_t_diff);
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff f93b 	bl	8000578 <__aeabi_f2d>
 8001302:	4603      	mov	r3, r0
 8001304:	460c      	mov	r4, r1
 8001306:	461a      	mov	r2, r3
 8001308:	4623      	mov	r3, r4
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <main+0x3ac>)
 800130c:	f003 f836 	bl	800437c <iprintf>
  {
 8001310:	e64e      	b.n	8000fb0 <main+0x20>
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	54442d18 	.word	0x54442d18
 800131c:	401921fb 	.word	0x401921fb
 8001320:	200048a4 	.word	0x200048a4
 8001324:	200078a8 	.word	0x200078a8
 8001328:	200018a4 	.word	0x200018a4
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004
 8001334:	200030a4 	.word	0x200030a4
 8001338:	44800000 	.word	0x44800000
 800133c:	08006580 	.word	0x08006580

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	; 0x50
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2234      	movs	r2, #52	; 0x34
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f003 f80c 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <SystemClock_Config+0xd4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <SystemClock_Config+0xd4>)
 800136e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <SystemClock_Config+0xd4>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <SystemClock_Config+0xd8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800138c:	4a22      	ldr	r2, [pc, #136]	; (8001418 <SystemClock_Config+0xd8>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <SystemClock_Config+0xd8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a8:	2310      	movs	r3, #16
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80013b8:	2354      	movs	r3, #84	; 0x54
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 f82b 	bl	8002428 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013d8:	f000 f91c 	bl	8001614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	2102      	movs	r1, #2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fd5a 	bl	8001eb4 <HAL_RCC_ClockConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001406:	f000 f905 	bl	8001614 <Error_Handler>
  }
}
 800140a:	bf00      	nop
 800140c:	3750      	adds	r7, #80	; 0x50
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000

0800141c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <MX_USART2_UART_Init+0x50>)
 8001424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001454:	f001 fa42 	bl	80028dc <HAL_UART_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800145e:	f000 f8d9 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200098b0 	.word	0x200098b0
 800146c:	40004400 	.word	0x40004400

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <MX_GPIO_Init+0xc0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a28      	ldr	r2, [pc, #160]	; (8001530 <MX_GPIO_Init+0xc0>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_GPIO_Init+0xc0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_GPIO_Init+0xc0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_GPIO_Init+0xc4>)
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <MX_GPIO_Init+0xc8>)
 800150c:	f000 fb40 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001510:	2320      	movs	r3, #32
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_GPIO_Init+0xcc>)
 8001524:	f000 fb34 	bl	8001b90 <HAL_GPIO_Init>

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	10210000 	.word	0x10210000
 8001538:	40020800 	.word	0x40020800
 800153c:	40020000 	.word	0x40020000

08001540 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *data, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d00a      	beq.n	8001568 <_write+0x28>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d007      	beq.n	8001568 <_write+0x28>
   {
      errno = EBADF;
 8001558:	f002 fede 	bl	8004318 <__errno>
 800155c:	4602      	mov	r2, r0
 800155e:	2309      	movs	r3, #9
 8001560:	6013      	str	r3, [r2, #0]
      return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e00f      	b.n	8001588 <_write+0x48>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	b29a      	uxth	r2, r3
   HAL_StatusTypeDef status =
 800156c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <_write+0x50>)
 8001574:	f001 f9ff 	bl	8002976 <HAL_UART_Transmit>
 8001578:	4603      	mov	r3, r0
 800157a:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <_write+0x46>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	e000      	b.n	8001588 <_write+0x48>
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200098b0 	.word	0x200098b0

08001594 <to_float>:
	for(int i = 0; i < length; i+=2) {
		angle_bins[i/2] = atan(signal[i + 1] / signal[i]);
	}
}

void to_float(uint32_t* int_array, float32_t* float_array, uint32_t length) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]

	for(int i = 0; i < length; i++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e029      	b.n	80015fa <to_float+0x66>
		float_array[i] = ((float32_t)int_array[i] / (4096.0 / 2)) - 1;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4413      	add	r3, r2
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b8:	ee17 0a90 	vmov	r0, s15
 80015bc:	f7fe ffdc 	bl	8000578 <__aeabi_f2d>
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <to_float+0x78>)
 80015c6:	f7ff f959 	bl	800087c <__aeabi_ddiv>
 80015ca:	4603      	mov	r3, r0
 80015cc:	460c      	mov	r4, r1
 80015ce:	4618      	mov	r0, r3
 80015d0:	4621      	mov	r1, r4
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <to_float+0x7c>)
 80015d8:	f7fe fe6e 	bl	80002b8 <__aeabi_dsub>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	4618      	mov	r0, r3
 80015e2:	4621      	mov	r1, r4
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	18d4      	adds	r4, r2, r3
 80015ec:	f7ff fafe 	bl	8000bec <__aeabi_d2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < length; i++) {
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d8d1      	bhi.n	80015a6 <to_float+0x12>
	}
}
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	40a00000 	.word	0x40a00000
 8001610:	3ff00000 	.word	0x3ff00000

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161a:	e7fe      	b.n	800161a <Error_Handler+0x6>

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_MspInit+0x4c>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x4c>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800165a:	2007      	movs	r0, #7
 800165c:	f000 fa64 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_UART_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12b      	bne.n	80016e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_UART_MspInit+0x88>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_UART_MspInit+0x88>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c6:	230c      	movs	r3, #12
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d6:	2307      	movs	r3, #7
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_UART_MspInit+0x8c>)
 80016e2:	f000 fa55 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40004400 	.word	0x40004400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 f91c 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e00a      	b.n	8001778 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001762:	f3af 8000 	nop.w
 8001766:	4601      	mov	r1, r0
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <_read+0x12>
	}

return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:
	}
	return len;
}

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
	return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f002 fd78 	bl	8004318 <__errno>
 8001828:	4602      	mov	r2, r0
 800182a:	230c      	movs	r3, #12
 800182c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20020000 	.word	0x20020000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000098 	.word	0x20000098
 800185c:	2000c110 	.word	0x2000c110

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <SystemInit+0x28>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <SystemInit+0x28>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SystemInit+0x28>)
 8001876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800187a:	609a      	str	r2, [r3, #8]
#endif
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001892:	e003      	b.n	800189c <LoopCopyDataInit>

08001894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800189a:	3104      	adds	r1, #4

0800189c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018a4:	d3f6      	bcc.n	8001894 <CopyDataInit>
  ldr  r2, =_sbss
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018a8:	e002      	b.n	80018b0 <LoopFillZerobss>

080018aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018ac:	f842 3b04 	str.w	r3, [r2], #4

080018b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018b4:	d3f9      	bcc.n	80018aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018b6:	f7ff ffd3 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f002 fd33 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7ff fb67 	bl	8000f90 <main>
  bx  lr    
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018c8:	0801bd50 	.word	0x0801bd50
  ldr  r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018d0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80018d4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80018d8:	2000c10c 	.word	0x2000c10c

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>
	...

080018e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <HAL_Init+0x40>)
 80018ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_Init+0x40>)
 80018f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_Init+0x40>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 f90d 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001914:	f7ff fe82 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f917 	bl	8001b76 <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 f8ed 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000008 	.word	0x20000008
 800197c:	20000010 	.word	0x20000010
 8001980:	2000000c 	.word	0x2000000c

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000010 	.word	0x20000010
 80019a8:	2000c104 	.word	0x2000c104

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000c104 	.word	0x2000c104

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff47 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff5c 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffb0 	bl	8001ae4 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	e165      	b.n	8001e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f040 8154 	bne.w	8001e72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d00b      	beq.n	8001bea <HAL_GPIO_Init+0x5a>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bde:	2b11      	cmp	r3, #17
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d130      	bne.n	8001c4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0xfc>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d123      	bne.n	8001cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	08da      	lsrs	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3208      	adds	r2, #8
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0203 	and.w	r2, r3, #3
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80ae 	beq.w	8001e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a5b      	ldr	r2, [pc, #364]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_GPIO_Init+0x2fc>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d32:	4a57      	ldr	r2, [pc, #348]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_GPIO_Init+0x304>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d025      	beq.n	8001daa <HAL_GPIO_Init+0x21a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x308>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d01f      	beq.n	8001da6 <HAL_GPIO_Init+0x216>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_GPIO_Init+0x30c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x212>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x310>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x20e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x314>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x20a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <HAL_GPIO_Init+0x318>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x206>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_GPIO_Init+0x31c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x202>
 8001d8e:	2306      	movs	r3, #6
 8001d90:	e00c      	b.n	8001dac <HAL_GPIO_Init+0x21c>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e00a      	b.n	8001dac <HAL_GPIO_Init+0x21c>
 8001d96:	2305      	movs	r3, #5
 8001d98:	e008      	b.n	8001dac <HAL_GPIO_Init+0x21c>
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x21c>
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e004      	b.n	8001dac <HAL_GPIO_Init+0x21c>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_Init+0x21c>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_GPIO_Init+0x21c>
 8001daa:	2300      	movs	r3, #0
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	f002 0203 	and.w	r2, r2, #3
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	4093      	lsls	r3, r2
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dbc:	4934      	ldr	r1, [pc, #208]	; (8001e90 <HAL_GPIO_Init+0x300>)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dee:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e18:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e42:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e6c:	4a10      	ldr	r2, [pc, #64]	; (8001eb0 <HAL_GPIO_Init+0x320>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	f67f ae96 	bls.w	8001bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e80:	bf00      	nop
 8001e82:	3724      	adds	r7, #36	; 0x24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40021400 	.word	0x40021400
 8001eac:	40021800 	.word	0x40021800
 8001eb0:	40013c00 	.word	0x40013c00

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0cc      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d90c      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b65      	ldr	r3, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d044      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d119      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f72:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e067      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4934      	ldr	r1, [pc, #208]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff fd02 	bl	80019ac <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7ff fcfe 	bl	80019ac <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e04f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 020c 	and.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1eb      	bne.n	8001fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d20c      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f855 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800203e:	4601      	mov	r1, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	fa21 f303 	lsr.w	r3, r1, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fc62 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00
 8002070:	40023800 	.word	0x40023800
 8002074:	08006588 	.word	0x08006588
 8002078:	20000008 	.word	0x20000008
 800207c:	2000000c 	.word	0x2000000c

08002080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_GetHCLKFreq+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800209c:	f7ff fff0 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020a0:	4601      	mov	r1, r0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a9b      	lsrs	r3, r3, #10
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08006598 	.word	0x08006598

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020c4:	f7ff ffdc 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020c8:	4601      	mov	r1, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	08006598 	.word	0x08006598

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002102:	4bc6      	ldr	r3, [pc, #792]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b0c      	cmp	r3, #12
 800210c:	f200 817e 	bhi.w	800240c <HAL_RCC_GetSysClockFreq+0x324>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_RCC_GetSysClockFreq+0x30>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	0800214d 	.word	0x0800214d
 800211c:	0800240d 	.word	0x0800240d
 8002120:	0800240d 	.word	0x0800240d
 8002124:	0800240d 	.word	0x0800240d
 8002128:	08002153 	.word	0x08002153
 800212c:	0800240d 	.word	0x0800240d
 8002130:	0800240d 	.word	0x0800240d
 8002134:	0800240d 	.word	0x0800240d
 8002138:	08002159 	.word	0x08002159
 800213c:	0800240d 	.word	0x0800240d
 8002140:	0800240d 	.word	0x0800240d
 8002144:	0800240d 	.word	0x0800240d
 8002148:	080022b5 	.word	0x080022b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800214c:	4bb4      	ldr	r3, [pc, #720]	; (8002420 <HAL_RCC_GetSysClockFreq+0x338>)
 800214e:	613b      	str	r3, [r7, #16]
       break;
 8002150:	e15f      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002152:	4bb4      	ldr	r3, [pc, #720]	; (8002424 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002154:	613b      	str	r3, [r7, #16]
      break;
 8002156:	e15c      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002158:	4bb0      	ldr	r3, [pc, #704]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002160:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002162:	4bae      	ldr	r3, [pc, #696]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04a      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4bab      	ldr	r3, [pc, #684]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	f04f 0400 	mov.w	r4, #0
 8002178:	f240 11ff 	movw	r1, #511	; 0x1ff
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	ea03 0501 	and.w	r5, r3, r1
 8002184:	ea04 0602 	and.w	r6, r4, r2
 8002188:	4629      	mov	r1, r5
 800218a:	4632      	mov	r2, r6
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	f04f 0400 	mov.w	r4, #0
 8002194:	0154      	lsls	r4, r2, #5
 8002196:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800219a:	014b      	lsls	r3, r1, #5
 800219c:	4619      	mov	r1, r3
 800219e:	4622      	mov	r2, r4
 80021a0:	1b49      	subs	r1, r1, r5
 80021a2:	eb62 0206 	sbc.w	r2, r2, r6
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	f04f 0400 	mov.w	r4, #0
 80021ae:	0194      	lsls	r4, r2, #6
 80021b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021b4:	018b      	lsls	r3, r1, #6
 80021b6:	1a5b      	subs	r3, r3, r1
 80021b8:	eb64 0402 	sbc.w	r4, r4, r2
 80021bc:	f04f 0100 	mov.w	r1, #0
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	00e2      	lsls	r2, r4, #3
 80021c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021ca:	00d9      	lsls	r1, r3, #3
 80021cc:	460b      	mov	r3, r1
 80021ce:	4614      	mov	r4, r2
 80021d0:	195b      	adds	r3, r3, r5
 80021d2:	eb44 0406 	adc.w	r4, r4, r6
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	0262      	lsls	r2, r4, #9
 80021e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021e4:	0259      	lsls	r1, r3, #9
 80021e6:	460b      	mov	r3, r1
 80021e8:	4614      	mov	r4, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	4621      	mov	r1, r4
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	461a      	mov	r2, r3
 80021f6:	4623      	mov	r3, r4
 80021f8:	f7fe fd48 	bl	8000c8c <__aeabi_uldivmod>
 80021fc:	4603      	mov	r3, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e049      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002204:	4b85      	ldr	r3, [pc, #532]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	099b      	lsrs	r3, r3, #6
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	ea03 0501 	and.w	r5, r3, r1
 800221a:	ea04 0602 	and.w	r6, r4, r2
 800221e:	4629      	mov	r1, r5
 8002220:	4632      	mov	r2, r6
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	f04f 0400 	mov.w	r4, #0
 800222a:	0154      	lsls	r4, r2, #5
 800222c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002230:	014b      	lsls	r3, r1, #5
 8002232:	4619      	mov	r1, r3
 8002234:	4622      	mov	r2, r4
 8002236:	1b49      	subs	r1, r1, r5
 8002238:	eb62 0206 	sbc.w	r2, r2, r6
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	f04f 0400 	mov.w	r4, #0
 8002244:	0194      	lsls	r4, r2, #6
 8002246:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800224a:	018b      	lsls	r3, r1, #6
 800224c:	1a5b      	subs	r3, r3, r1
 800224e:	eb64 0402 	sbc.w	r4, r4, r2
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	00e2      	lsls	r2, r4, #3
 800225c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002260:	00d9      	lsls	r1, r3, #3
 8002262:	460b      	mov	r3, r1
 8002264:	4614      	mov	r4, r2
 8002266:	195b      	adds	r3, r3, r5
 8002268:	eb44 0406 	adc.w	r4, r4, r6
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	02a2      	lsls	r2, r4, #10
 8002276:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800227a:	0299      	lsls	r1, r3, #10
 800227c:	460b      	mov	r3, r1
 800227e:	4614      	mov	r4, r2
 8002280:	4618      	mov	r0, r3
 8002282:	4621      	mov	r1, r4
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f04f 0400 	mov.w	r4, #0
 800228a:	461a      	mov	r2, r3
 800228c:	4623      	mov	r3, r4
 800228e:	f7fe fcfd 	bl	8000c8c <__aeabi_uldivmod>
 8002292:	4603      	mov	r3, r0
 8002294:	460c      	mov	r4, r1
 8002296:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002298:	4b60      	ldr	r3, [pc, #384]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	3301      	adds	r3, #1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	613b      	str	r3, [r7, #16]
      break;
 80022b2:	e0ae      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022bc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022be:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d04a      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	099b      	lsrs	r3, r3, #6
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	ea03 0501 	and.w	r5, r3, r1
 80022e0:	ea04 0602 	and.w	r6, r4, r2
 80022e4:	4629      	mov	r1, r5
 80022e6:	4632      	mov	r2, r6
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	f04f 0400 	mov.w	r4, #0
 80022f0:	0154      	lsls	r4, r2, #5
 80022f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022f6:	014b      	lsls	r3, r1, #5
 80022f8:	4619      	mov	r1, r3
 80022fa:	4622      	mov	r2, r4
 80022fc:	1b49      	subs	r1, r1, r5
 80022fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	f04f 0400 	mov.w	r4, #0
 800230a:	0194      	lsls	r4, r2, #6
 800230c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002310:	018b      	lsls	r3, r1, #6
 8002312:	1a5b      	subs	r3, r3, r1
 8002314:	eb64 0402 	sbc.w	r4, r4, r2
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	00e2      	lsls	r2, r4, #3
 8002322:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002326:	00d9      	lsls	r1, r3, #3
 8002328:	460b      	mov	r3, r1
 800232a:	4614      	mov	r4, r2
 800232c:	195b      	adds	r3, r3, r5
 800232e:	eb44 0406 	adc.w	r4, r4, r6
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	0262      	lsls	r2, r4, #9
 800233c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002340:	0259      	lsls	r1, r3, #9
 8002342:	460b      	mov	r3, r1
 8002344:	4614      	mov	r4, r2
 8002346:	4618      	mov	r0, r3
 8002348:	4621      	mov	r1, r4
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f04f 0400 	mov.w	r4, #0
 8002350:	461a      	mov	r2, r3
 8002352:	4623      	mov	r3, r4
 8002354:	f7fe fc9a 	bl	8000c8c <__aeabi_uldivmod>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e049      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	f04f 0400 	mov.w	r4, #0
 800236a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	ea03 0501 	and.w	r5, r3, r1
 8002376:	ea04 0602 	and.w	r6, r4, r2
 800237a:	4629      	mov	r1, r5
 800237c:	4632      	mov	r2, r6
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	f04f 0400 	mov.w	r4, #0
 8002386:	0154      	lsls	r4, r2, #5
 8002388:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800238c:	014b      	lsls	r3, r1, #5
 800238e:	4619      	mov	r1, r3
 8002390:	4622      	mov	r2, r4
 8002392:	1b49      	subs	r1, r1, r5
 8002394:	eb62 0206 	sbc.w	r2, r2, r6
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	f04f 0400 	mov.w	r4, #0
 80023a0:	0194      	lsls	r4, r2, #6
 80023a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023a6:	018b      	lsls	r3, r1, #6
 80023a8:	1a5b      	subs	r3, r3, r1
 80023aa:	eb64 0402 	sbc.w	r4, r4, r2
 80023ae:	f04f 0100 	mov.w	r1, #0
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	00e2      	lsls	r2, r4, #3
 80023b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023bc:	00d9      	lsls	r1, r3, #3
 80023be:	460b      	mov	r3, r1
 80023c0:	4614      	mov	r4, r2
 80023c2:	195b      	adds	r3, r3, r5
 80023c4:	eb44 0406 	adc.w	r4, r4, r6
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	02a2      	lsls	r2, r4, #10
 80023d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023d6:	0299      	lsls	r1, r3, #10
 80023d8:	460b      	mov	r3, r1
 80023da:	4614      	mov	r4, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	4621      	mov	r1, r4
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f04f 0400 	mov.w	r4, #0
 80023e6:	461a      	mov	r2, r3
 80023e8:	4623      	mov	r3, r4
 80023ea:	f7fe fc4f 	bl	8000c8c <__aeabi_uldivmod>
 80023ee:	4603      	mov	r3, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_GetSysClockFreq+0x334>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0f1b      	lsrs	r3, r3, #28
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	613b      	str	r3, [r7, #16]
      break;
 800240a:	e002      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <HAL_RCC_GetSysClockFreq+0x338>)
 800240e:	613b      	str	r3, [r7, #16]
      break;
 8002410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002412:	693b      	ldr	r3, [r7, #16]
}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	00f42400 	.word	0x00f42400
 8002424:	007a1200 	.word	0x007a1200

08002428 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8083 	beq.w	8002548 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002442:	4b95      	ldr	r3, [pc, #596]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b04      	cmp	r3, #4
 800244c:	d019      	beq.n	8002482 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800244e:	4b92      	ldr	r3, [pc, #584]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002456:	2b08      	cmp	r3, #8
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800245a:	4b8f      	ldr	r3, [pc, #572]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002466:	d00c      	beq.n	8002482 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002468:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d112      	bne.n	800249a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002474:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002480:	d10b      	bne.n	800249a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4b85      	ldr	r3, [pc, #532]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d05b      	beq.n	8002546 <HAL_RCC_OscConfig+0x11e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d157      	bne.n	8002546 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e216      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x8a>
 80024a4:	4b7c      	ldr	r3, [pc, #496]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a7b      	ldr	r2, [pc, #492]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e01d      	b.n	80024ee <HAL_RCC_OscConfig+0xc6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ba:	d10c      	bne.n	80024d6 <HAL_RCC_OscConfig+0xae>
 80024bc:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a75      	ldr	r2, [pc, #468]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b73      	ldr	r3, [pc, #460]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a72      	ldr	r2, [pc, #456]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0xc6>
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6f      	ldr	r2, [pc, #444]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6c      	ldr	r2, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80024e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d013      	beq.n	800251e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7ff fa59 	bl	80019ac <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fe:	f7ff fa55 	bl	80019ac <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b64      	cmp	r3, #100	; 0x64
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e1db      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002510:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0xd6>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7ff fa45 	bl	80019ac <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002526:	f7ff fa41 	bl	80019ac <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1c7      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002538:	4b57      	ldr	r3, [pc, #348]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0xfe>
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002546:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d06f      	beq.n	8002634 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b00      	cmp	r3, #0
 800255e:	d017      	beq.n	8002590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002568:	2b08      	cmp	r3, #8
 800256a:	d105      	bne.n	8002578 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800256c:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00b      	beq.n	8002590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d11c      	bne.n	80025be <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002584:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002590:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x180>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e18f      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4938      	ldr	r1, [pc, #224]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025bc:	e03a      	b.n	8002634 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d020      	beq.n	8002608 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c6:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_RCC_OscConfig+0x274>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7ff f9ee 	bl	80019ac <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d4:	f7ff f9ea 	bl	80019ac <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e170      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4925      	ldr	r1, [pc, #148]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
 8002606:	e015      	b.n	8002634 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002608:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_OscConfig+0x274>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7ff f9cd 	bl	80019ac <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff f9c9 	bl	80019ac <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e14f      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d037      	beq.n	80026b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCC_OscConfig+0x278>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff f9ad 	bl	80019ac <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff f9a9 	bl	80019ac <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e12f      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_OscConfig+0x270>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x22e>
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_RCC_OscConfig+0x278>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff f996 	bl	80019ac <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002682:	e00f      	b.n	80026a4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff f992 	bl	80019ac <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d908      	bls.n	80026a4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e118      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	42470000 	.word	0x42470000
 80026a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	4b8a      	ldr	r3, [pc, #552]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80026a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e9      	bne.n	8002684 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8097 	beq.w	80027ec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b83      	ldr	r3, [pc, #524]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10f      	bne.n	80026ee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a7e      	ldr	r2, [pc, #504]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a75      	ldr	r2, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7ff f951 	bl	80019ac <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7ff f94d 	bl	80019ac <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0d3      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x31a>
 8002734:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	e01c      	b.n	800277c <HAL_RCC_OscConfig+0x354>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x33c>
 800274a:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a60      	ldr	r2, [pc, #384]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
 8002756:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a5d      	ldr	r2, [pc, #372]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0x354>
 8002764:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	4a59      	ldr	r2, [pc, #356]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6713      	str	r3, [r2, #112]	; 0x70
 8002770:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a56      	ldr	r2, [pc, #344]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7ff f912 	bl	80019ac <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7ff f90e 	bl	80019ac <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e092      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0ee      	beq.n	800278c <HAL_RCC_OscConfig+0x364>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7ff f8fc 	bl	80019ac <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7ff f8f8 	bl	80019ac <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e07c      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ee      	bne.n	80027b8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d068      	beq.n	80028c6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d060      	beq.n	80028c2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d145      	bne.n	8002894 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002808:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7ff f8cd 	bl	80019ac <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002816:	f7ff f8c9 	bl	80019ac <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e04f      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	019b      	lsls	r3, r3, #6
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	061b      	lsls	r3, r3, #24
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	071b      	lsls	r3, r3, #28
 8002860:	491b      	ldr	r1, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff f89e 	bl	80019ac <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7ff f89a 	bl	80019ac <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e020      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x44c>
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff f887 	bl	80019ac <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7ff f883 	bl	80019ac <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e009      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_OscConfig+0x4a8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x47a>
 80028c0:	e001      	b.n	80028c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42470060 	.word	0x42470060

080028dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e03f      	b.n	800296e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe feb2 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f90b 	bl	8002b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b088      	sub	sp, #32
 800297a:	af02      	add	r7, sp, #8
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b20      	cmp	r3, #32
 8002994:	f040 8083 	bne.w	8002a9e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_UART_Transmit+0x2e>
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e07b      	b.n	8002aa0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_UART_Transmit+0x40>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e074      	b.n	8002aa0 <HAL_UART_Transmit+0x12a>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2221      	movs	r2, #33	; 0x21
 80029c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029cc:	f7fe ffee 	bl	80019ac <HAL_GetTick>
 80029d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80029e6:	e042      	b.n	8002a6e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fe:	d122      	bne.n	8002a46 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2200      	movs	r2, #0
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f84c 	bl	8002aa8 <UART_WaitOnFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e042      	b.n	8002aa0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a2c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3302      	adds	r3, #2
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	e017      	b.n	8002a6e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3301      	adds	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	e013      	b.n	8002a6e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f829 	bl	8002aa8 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e01f      	b.n	8002aa0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1b7      	bne.n	80029e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2140      	movs	r1, #64	; 0x40
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f810 	bl	8002aa8 <UART_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e006      	b.n	8002aa0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab8:	e02c      	b.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d028      	beq.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac8:	f7fe ff70 	bl	80019ac <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d21d      	bcs.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ae6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e00f      	b.n	8002b34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d0c3      	beq.n	8002aba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b7e:	f023 030c 	bic.w	r3, r3, #12
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002baa:	f040 818b 	bne.w	8002ec4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4ac1      	ldr	r2, [pc, #772]	; (8002eb8 <UART_SetConfig+0x37c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d005      	beq.n	8002bc4 <UART_SetConfig+0x88>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4abf      	ldr	r2, [pc, #764]	; (8002ebc <UART_SetConfig+0x380>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	f040 80bd 	bne.w	8002d3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bc4:	f7ff fa7c 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8002bc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	461d      	mov	r5, r3
 8002bce:	f04f 0600 	mov.w	r6, #0
 8002bd2:	46a8      	mov	r8, r5
 8002bd4:	46b1      	mov	r9, r6
 8002bd6:	eb18 0308 	adds.w	r3, r8, r8
 8002bda:	eb49 0409 	adc.w	r4, r9, r9
 8002bde:	4698      	mov	r8, r3
 8002be0:	46a1      	mov	r9, r4
 8002be2:	eb18 0805 	adds.w	r8, r8, r5
 8002be6:	eb49 0906 	adc.w	r9, r9, r6
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bfe:	4688      	mov	r8, r1
 8002c00:	4691      	mov	r9, r2
 8002c02:	eb18 0005 	adds.w	r0, r8, r5
 8002c06:	eb49 0106 	adc.w	r1, r9, r6
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	461d      	mov	r5, r3
 8002c10:	f04f 0600 	mov.w	r6, #0
 8002c14:	196b      	adds	r3, r5, r5
 8002c16:	eb46 0406 	adc.w	r4, r6, r6
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	f7fe f835 	bl	8000c8c <__aeabi_uldivmod>
 8002c22:	4603      	mov	r3, r0
 8002c24:	460c      	mov	r4, r1
 8002c26:	461a      	mov	r2, r3
 8002c28:	4ba5      	ldr	r3, [pc, #660]	; (8002ec0 <UART_SetConfig+0x384>)
 8002c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	461d      	mov	r5, r3
 8002c38:	f04f 0600 	mov.w	r6, #0
 8002c3c:	46a9      	mov	r9, r5
 8002c3e:	46b2      	mov	sl, r6
 8002c40:	eb19 0309 	adds.w	r3, r9, r9
 8002c44:	eb4a 040a 	adc.w	r4, sl, sl
 8002c48:	4699      	mov	r9, r3
 8002c4a:	46a2      	mov	sl, r4
 8002c4c:	eb19 0905 	adds.w	r9, r9, r5
 8002c50:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c68:	4689      	mov	r9, r1
 8002c6a:	4692      	mov	sl, r2
 8002c6c:	eb19 0005 	adds.w	r0, r9, r5
 8002c70:	eb4a 0106 	adc.w	r1, sl, r6
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	461d      	mov	r5, r3
 8002c7a:	f04f 0600 	mov.w	r6, #0
 8002c7e:	196b      	adds	r3, r5, r5
 8002c80:	eb46 0406 	adc.w	r4, r6, r6
 8002c84:	461a      	mov	r2, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	f7fe f800 	bl	8000c8c <__aeabi_uldivmod>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b8b      	ldr	r3, [pc, #556]	; (8002ec0 <UART_SetConfig+0x384>)
 8002c94:	fba3 1302 	umull	r1, r3, r3, r2
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	3332      	adds	r3, #50	; 0x32
 8002ca6:	4a86      	ldr	r2, [pc, #536]	; (8002ec0 <UART_SetConfig+0x384>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cb4:	4498      	add	r8, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	461d      	mov	r5, r3
 8002cba:	f04f 0600 	mov.w	r6, #0
 8002cbe:	46a9      	mov	r9, r5
 8002cc0:	46b2      	mov	sl, r6
 8002cc2:	eb19 0309 	adds.w	r3, r9, r9
 8002cc6:	eb4a 040a 	adc.w	r4, sl, sl
 8002cca:	4699      	mov	r9, r3
 8002ccc:	46a2      	mov	sl, r4
 8002cce:	eb19 0905 	adds.w	r9, r9, r5
 8002cd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cd6:	f04f 0100 	mov.w	r1, #0
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cea:	4689      	mov	r9, r1
 8002cec:	4692      	mov	sl, r2
 8002cee:	eb19 0005 	adds.w	r0, r9, r5
 8002cf2:	eb4a 0106 	adc.w	r1, sl, r6
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	f04f 0600 	mov.w	r6, #0
 8002d00:	196b      	adds	r3, r5, r5
 8002d02:	eb46 0406 	adc.w	r4, r6, r6
 8002d06:	461a      	mov	r2, r3
 8002d08:	4623      	mov	r3, r4
 8002d0a:	f7fd ffbf 	bl	8000c8c <__aeabi_uldivmod>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	460c      	mov	r4, r1
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <UART_SetConfig+0x384>)
 8002d16:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2164      	movs	r1, #100	; 0x64
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <UART_SetConfig+0x384>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 0207 	and.w	r2, r3, #7
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4442      	add	r2, r8
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	e26f      	b.n	800321e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3e:	f7ff f9ab 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8002d42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	461d      	mov	r5, r3
 8002d48:	f04f 0600 	mov.w	r6, #0
 8002d4c:	46a8      	mov	r8, r5
 8002d4e:	46b1      	mov	r9, r6
 8002d50:	eb18 0308 	adds.w	r3, r8, r8
 8002d54:	eb49 0409 	adc.w	r4, r9, r9
 8002d58:	4698      	mov	r8, r3
 8002d5a:	46a1      	mov	r9, r4
 8002d5c:	eb18 0805 	adds.w	r8, r8, r5
 8002d60:	eb49 0906 	adc.w	r9, r9, r6
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d78:	4688      	mov	r8, r1
 8002d7a:	4691      	mov	r9, r2
 8002d7c:	eb18 0005 	adds.w	r0, r8, r5
 8002d80:	eb49 0106 	adc.w	r1, r9, r6
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	461d      	mov	r5, r3
 8002d8a:	f04f 0600 	mov.w	r6, #0
 8002d8e:	196b      	adds	r3, r5, r5
 8002d90:	eb46 0406 	adc.w	r4, r6, r6
 8002d94:	461a      	mov	r2, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	f7fd ff78 	bl	8000c8c <__aeabi_uldivmod>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	460c      	mov	r4, r1
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <UART_SetConfig+0x384>)
 8002da4:	fba3 2302 	umull	r2, r3, r3, r2
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	461d      	mov	r5, r3
 8002db2:	f04f 0600 	mov.w	r6, #0
 8002db6:	46a9      	mov	r9, r5
 8002db8:	46b2      	mov	sl, r6
 8002dba:	eb19 0309 	adds.w	r3, r9, r9
 8002dbe:	eb4a 040a 	adc.w	r4, sl, sl
 8002dc2:	4699      	mov	r9, r3
 8002dc4:	46a2      	mov	sl, r4
 8002dc6:	eb19 0905 	adds.w	r9, r9, r5
 8002dca:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dce:	f04f 0100 	mov.w	r1, #0
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002de2:	4689      	mov	r9, r1
 8002de4:	4692      	mov	sl, r2
 8002de6:	eb19 0005 	adds.w	r0, r9, r5
 8002dea:	eb4a 0106 	adc.w	r1, sl, r6
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	461d      	mov	r5, r3
 8002df4:	f04f 0600 	mov.w	r6, #0
 8002df8:	196b      	adds	r3, r5, r5
 8002dfa:	eb46 0406 	adc.w	r4, r6, r6
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4623      	mov	r3, r4
 8002e02:	f7fd ff43 	bl	8000c8c <__aeabi_uldivmod>
 8002e06:	4603      	mov	r3, r0
 8002e08:	460c      	mov	r4, r1
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <UART_SetConfig+0x384>)
 8002e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2164      	movs	r1, #100	; 0x64
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	3332      	adds	r3, #50	; 0x32
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <UART_SetConfig+0x384>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e2e:	4498      	add	r8, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	461d      	mov	r5, r3
 8002e34:	f04f 0600 	mov.w	r6, #0
 8002e38:	46a9      	mov	r9, r5
 8002e3a:	46b2      	mov	sl, r6
 8002e3c:	eb19 0309 	adds.w	r3, r9, r9
 8002e40:	eb4a 040a 	adc.w	r4, sl, sl
 8002e44:	4699      	mov	r9, r3
 8002e46:	46a2      	mov	sl, r4
 8002e48:	eb19 0905 	adds.w	r9, r9, r5
 8002e4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e64:	4689      	mov	r9, r1
 8002e66:	4692      	mov	sl, r2
 8002e68:	eb19 0005 	adds.w	r0, r9, r5
 8002e6c:	eb4a 0106 	adc.w	r1, sl, r6
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	461d      	mov	r5, r3
 8002e76:	f04f 0600 	mov.w	r6, #0
 8002e7a:	196b      	adds	r3, r5, r5
 8002e7c:	eb46 0406 	adc.w	r4, r6, r6
 8002e80:	461a      	mov	r2, r3
 8002e82:	4623      	mov	r3, r4
 8002e84:	f7fd ff02 	bl	8000c8c <__aeabi_uldivmod>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <UART_SetConfig+0x384>)
 8002e90:	fba3 1302 	umull	r1, r3, r3, r2
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	2164      	movs	r1, #100	; 0x64
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	3332      	adds	r3, #50	; 0x32
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <UART_SetConfig+0x384>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	f003 0207 	and.w	r2, r3, #7
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4442      	add	r2, r8
 8002eb4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002eb6:	e1b2      	b.n	800321e <UART_SetConfig+0x6e2>
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4ad7      	ldr	r2, [pc, #860]	; (8003228 <UART_SetConfig+0x6ec>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d005      	beq.n	8002eda <UART_SetConfig+0x39e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4ad6      	ldr	r2, [pc, #856]	; (800322c <UART_SetConfig+0x6f0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f040 80d1 	bne.w	800307c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eda:	f7ff f8f1 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8002ede:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	469a      	mov	sl, r3
 8002ee4:	f04f 0b00 	mov.w	fp, #0
 8002ee8:	46d0      	mov	r8, sl
 8002eea:	46d9      	mov	r9, fp
 8002eec:	eb18 0308 	adds.w	r3, r8, r8
 8002ef0:	eb49 0409 	adc.w	r4, r9, r9
 8002ef4:	4698      	mov	r8, r3
 8002ef6:	46a1      	mov	r9, r4
 8002ef8:	eb18 080a 	adds.w	r8, r8, sl
 8002efc:	eb49 090b 	adc.w	r9, r9, fp
 8002f00:	f04f 0100 	mov.w	r1, #0
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f14:	4688      	mov	r8, r1
 8002f16:	4691      	mov	r9, r2
 8002f18:	eb1a 0508 	adds.w	r5, sl, r8
 8002f1c:	eb4b 0609 	adc.w	r6, fp, r9
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	f04f 0400 	mov.w	r4, #0
 8002f32:	0094      	lsls	r4, r2, #2
 8002f34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f38:	008b      	lsls	r3, r1, #2
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	4628      	mov	r0, r5
 8002f40:	4631      	mov	r1, r6
 8002f42:	f7fd fea3 	bl	8000c8c <__aeabi_uldivmod>
 8002f46:	4603      	mov	r3, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4bb8      	ldr	r3, [pc, #736]	; (8003230 <UART_SetConfig+0x6f4>)
 8002f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	469b      	mov	fp, r3
 8002f5c:	f04f 0c00 	mov.w	ip, #0
 8002f60:	46d9      	mov	r9, fp
 8002f62:	46e2      	mov	sl, ip
 8002f64:	eb19 0309 	adds.w	r3, r9, r9
 8002f68:	eb4a 040a 	adc.w	r4, sl, sl
 8002f6c:	4699      	mov	r9, r3
 8002f6e:	46a2      	mov	sl, r4
 8002f70:	eb19 090b 	adds.w	r9, r9, fp
 8002f74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f8c:	4689      	mov	r9, r1
 8002f8e:	4692      	mov	sl, r2
 8002f90:	eb1b 0509 	adds.w	r5, fp, r9
 8002f94:	eb4c 060a 	adc.w	r6, ip, sl
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	f04f 0400 	mov.w	r4, #0
 8002faa:	0094      	lsls	r4, r2, #2
 8002fac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fb0:	008b      	lsls	r3, r1, #2
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	4631      	mov	r1, r6
 8002fba:	f7fd fe67 	bl	8000c8c <__aeabi_uldivmod>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b9a      	ldr	r3, [pc, #616]	; (8003230 <UART_SetConfig+0x6f4>)
 8002fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2164      	movs	r1, #100	; 0x64
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	3332      	adds	r3, #50	; 0x32
 8002fd8:	4a95      	ldr	r2, [pc, #596]	; (8003230 <UART_SetConfig+0x6f4>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe4:	4498      	add	r8, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	469b      	mov	fp, r3
 8002fea:	f04f 0c00 	mov.w	ip, #0
 8002fee:	46d9      	mov	r9, fp
 8002ff0:	46e2      	mov	sl, ip
 8002ff2:	eb19 0309 	adds.w	r3, r9, r9
 8002ff6:	eb4a 040a 	adc.w	r4, sl, sl
 8002ffa:	4699      	mov	r9, r3
 8002ffc:	46a2      	mov	sl, r4
 8002ffe:	eb19 090b 	adds.w	r9, r9, fp
 8003002:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003012:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003016:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800301a:	4689      	mov	r9, r1
 800301c:	4692      	mov	sl, r2
 800301e:	eb1b 0509 	adds.w	r5, fp, r9
 8003022:	eb4c 060a 	adc.w	r6, ip, sl
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4619      	mov	r1, r3
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	f04f 0400 	mov.w	r4, #0
 8003038:	0094      	lsls	r4, r2, #2
 800303a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800303e:	008b      	lsls	r3, r1, #2
 8003040:	461a      	mov	r2, r3
 8003042:	4623      	mov	r3, r4
 8003044:	4628      	mov	r0, r5
 8003046:	4631      	mov	r1, r6
 8003048:	f7fd fe20 	bl	8000c8c <__aeabi_uldivmod>
 800304c:	4603      	mov	r3, r0
 800304e:	460c      	mov	r4, r1
 8003050:	461a      	mov	r2, r3
 8003052:	4b77      	ldr	r3, [pc, #476]	; (8003230 <UART_SetConfig+0x6f4>)
 8003054:	fba3 1302 	umull	r1, r3, r3, r2
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	2164      	movs	r1, #100	; 0x64
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	3332      	adds	r3, #50	; 0x32
 8003066:	4a72      	ldr	r2, [pc, #456]	; (8003230 <UART_SetConfig+0x6f4>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4442      	add	r2, r8
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	e0d0      	b.n	800321e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800307c:	f7ff f80c 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8003080:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	469a      	mov	sl, r3
 8003086:	f04f 0b00 	mov.w	fp, #0
 800308a:	46d0      	mov	r8, sl
 800308c:	46d9      	mov	r9, fp
 800308e:	eb18 0308 	adds.w	r3, r8, r8
 8003092:	eb49 0409 	adc.w	r4, r9, r9
 8003096:	4698      	mov	r8, r3
 8003098:	46a1      	mov	r9, r4
 800309a:	eb18 080a 	adds.w	r8, r8, sl
 800309e:	eb49 090b 	adc.w	r9, r9, fp
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030b6:	4688      	mov	r8, r1
 80030b8:	4691      	mov	r9, r2
 80030ba:	eb1a 0508 	adds.w	r5, sl, r8
 80030be:	eb4b 0609 	adc.w	r6, fp, r9
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4619      	mov	r1, r3
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	0094      	lsls	r4, r2, #2
 80030d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030da:	008b      	lsls	r3, r1, #2
 80030dc:	461a      	mov	r2, r3
 80030de:	4623      	mov	r3, r4
 80030e0:	4628      	mov	r0, r5
 80030e2:	4631      	mov	r1, r6
 80030e4:	f7fd fdd2 	bl	8000c8c <__aeabi_uldivmod>
 80030e8:	4603      	mov	r3, r0
 80030ea:	460c      	mov	r4, r1
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b50      	ldr	r3, [pc, #320]	; (8003230 <UART_SetConfig+0x6f4>)
 80030f0:	fba3 2302 	umull	r2, r3, r3, r2
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	469b      	mov	fp, r3
 80030fe:	f04f 0c00 	mov.w	ip, #0
 8003102:	46d9      	mov	r9, fp
 8003104:	46e2      	mov	sl, ip
 8003106:	eb19 0309 	adds.w	r3, r9, r9
 800310a:	eb4a 040a 	adc.w	r4, sl, sl
 800310e:	4699      	mov	r9, r3
 8003110:	46a2      	mov	sl, r4
 8003112:	eb19 090b 	adds.w	r9, r9, fp
 8003116:	eb4a 0a0c 	adc.w	sl, sl, ip
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800312a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800312e:	4689      	mov	r9, r1
 8003130:	4692      	mov	sl, r2
 8003132:	eb1b 0509 	adds.w	r5, fp, r9
 8003136:	eb4c 060a 	adc.w	r6, ip, sl
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4619      	mov	r1, r3
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	0094      	lsls	r4, r2, #2
 800314e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003152:	008b      	lsls	r3, r1, #2
 8003154:	461a      	mov	r2, r3
 8003156:	4623      	mov	r3, r4
 8003158:	4628      	mov	r0, r5
 800315a:	4631      	mov	r1, r6
 800315c:	f7fd fd96 	bl	8000c8c <__aeabi_uldivmod>
 8003160:	4603      	mov	r3, r0
 8003162:	460c      	mov	r4, r1
 8003164:	461a      	mov	r2, r3
 8003166:	4b32      	ldr	r3, [pc, #200]	; (8003230 <UART_SetConfig+0x6f4>)
 8003168:	fba3 1302 	umull	r1, r3, r3, r2
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	2164      	movs	r1, #100	; 0x64
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	3332      	adds	r3, #50	; 0x32
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <UART_SetConfig+0x6f4>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003186:	4498      	add	r8, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	469b      	mov	fp, r3
 800318c:	f04f 0c00 	mov.w	ip, #0
 8003190:	46d9      	mov	r9, fp
 8003192:	46e2      	mov	sl, ip
 8003194:	eb19 0309 	adds.w	r3, r9, r9
 8003198:	eb4a 040a 	adc.w	r4, sl, sl
 800319c:	4699      	mov	r9, r3
 800319e:	46a2      	mov	sl, r4
 80031a0:	eb19 090b 	adds.w	r9, r9, fp
 80031a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031bc:	4689      	mov	r9, r1
 80031be:	4692      	mov	sl, r2
 80031c0:	eb1b 0509 	adds.w	r5, fp, r9
 80031c4:	eb4c 060a 	adc.w	r6, ip, sl
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4619      	mov	r1, r3
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f04f 0400 	mov.w	r4, #0
 80031da:	0094      	lsls	r4, r2, #2
 80031dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031e0:	008b      	lsls	r3, r1, #2
 80031e2:	461a      	mov	r2, r3
 80031e4:	4623      	mov	r3, r4
 80031e6:	4628      	mov	r0, r5
 80031e8:	4631      	mov	r1, r6
 80031ea:	f7fd fd4f 	bl	8000c8c <__aeabi_uldivmod>
 80031ee:	4603      	mov	r3, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <UART_SetConfig+0x6f4>)
 80031f6:	fba3 1302 	umull	r1, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2164      	movs	r1, #100	; 0x64
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	3332      	adds	r3, #50	; 0x32
 8003208:	4a09      	ldr	r2, [pc, #36]	; (8003230 <UART_SetConfig+0x6f4>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4442      	add	r2, r8
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	e7ff      	b.n	800321e <UART_SetConfig+0x6e2>
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003228:	40011000 	.word	0x40011000
 800322c:	40011400 	.word	0x40011400
 8003230:	51eb851f 	.word	0x51eb851f

08003234 <arm_max_f32>:
 8003234:	f101 3cff 	add.w	ip, r1, #4294967295
 8003238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323a:	4607      	mov	r7, r0
 800323c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8003240:	ecf7 7a01 	vldmia	r7!, {s15}
 8003244:	d063      	beq.n	800330e <arm_max_f32+0xda>
 8003246:	f10e 0601 	add.w	r6, lr, #1
 800324a:	3014      	adds	r0, #20
 800324c:	00b6      	lsls	r6, r6, #2
 800324e:	2404      	movs	r4, #4
 8003250:	2500      	movs	r5, #0
 8003252:	ed10 7a04 	vldr	s14, [r0, #-16]
 8003256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	bf48      	it	mi
 8003260:	eef0 7a47 	vmovmi.f32	s15, s14
 8003264:	ed10 7a03 	vldr	s14, [r0, #-12]
 8003268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326c:	bf48      	it	mi
 800326e:	1ee5      	submi	r5, r4, #3
 8003270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003274:	bf48      	it	mi
 8003276:	eef0 7a47 	vmovmi.f32	s15, s14
 800327a:	ed10 7a02 	vldr	s14, [r0, #-8]
 800327e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003282:	bf48      	it	mi
 8003284:	1ea5      	submi	r5, r4, #2
 8003286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328a:	bf48      	it	mi
 800328c:	eef0 7a47 	vmovmi.f32	s15, s14
 8003290:	ed10 7a01 	vldr	s14, [r0, #-4]
 8003294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003298:	bf48      	it	mi
 800329a:	f104 35ff 	addmi.w	r5, r4, #4294967295
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a2:	bf48      	it	mi
 80032a4:	4625      	movmi	r5, r4
 80032a6:	f104 0404 	add.w	r4, r4, #4
 80032aa:	bf48      	it	mi
 80032ac:	eef0 7a47 	vmovmi.f32	s15, s14
 80032b0:	42b4      	cmp	r4, r6
 80032b2:	f100 0010 	add.w	r0, r0, #16
 80032b6:	d1cc      	bne.n	8003252 <arm_max_f32+0x1e>
 80032b8:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80032bc:	f01c 0003 	ands.w	r0, ip, #3
 80032c0:	d021      	beq.n	8003306 <arm_max_f32+0xd2>
 80032c2:	ed97 7a00 	vldr	s14, [r7]
 80032c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	bfc4      	itt	gt
 80032d0:	eef0 7a47 	vmovgt.f32	s15, s14
 80032d4:	1a0d      	subgt	r5, r1, r0
 80032d6:	3801      	subs	r0, #1
 80032d8:	d015      	beq.n	8003306 <arm_max_f32+0xd2>
 80032da:	ed97 7a01 	vldr	s14, [r7, #4]
 80032de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	bf44      	itt	mi
 80032e8:	eef0 7a47 	vmovmi.f32	s15, s14
 80032ec:	1a0d      	submi	r5, r1, r0
 80032ee:	2801      	cmp	r0, #1
 80032f0:	d009      	beq.n	8003306 <arm_max_f32+0xd2>
 80032f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80032f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	bf44      	itt	mi
 8003300:	eef0 7a47 	vmovmi.f32	s15, s14
 8003304:	4665      	movmi	r5, ip
 8003306:	edc2 7a00 	vstr	s15, [r2]
 800330a:	601d      	str	r5, [r3, #0]
 800330c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330e:	4675      	mov	r5, lr
 8003310:	e7d4      	b.n	80032bc <arm_max_f32+0x88>
 8003312:	bf00      	nop

08003314 <arm_cfft_init_f32>:
 8003314:	4603      	mov	r3, r0
 8003316:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800331a:	f04f 0000 	mov.w	r0, #0
 800331e:	b410      	push	{r4}
 8003320:	8019      	strh	r1, [r3, #0]
 8003322:	6058      	str	r0, [r3, #4]
 8003324:	d033      	beq.n	800338e <arm_cfft_init_f32+0x7a>
 8003326:	d918      	bls.n	800335a <arm_cfft_init_f32+0x46>
 8003328:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800332c:	d027      	beq.n	800337e <arm_cfft_init_f32+0x6a>
 800332e:	d90c      	bls.n	800334a <arm_cfft_init_f32+0x36>
 8003330:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003334:	d11e      	bne.n	8003374 <arm_cfft_init_f32+0x60>
 8003336:	4a17      	ldr	r2, [pc, #92]	; (8003394 <arm_cfft_init_f32+0x80>)
 8003338:	8994      	ldrh	r4, [r2, #12]
 800333a:	819c      	strh	r4, [r3, #12]
 800333c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8003340:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8003344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800334e:	d018      	beq.n	8003382 <arm_cfft_init_f32+0x6e>
 8003350:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003354:	d10e      	bne.n	8003374 <arm_cfft_init_f32+0x60>
 8003356:	4a10      	ldr	r2, [pc, #64]	; (8003398 <arm_cfft_init_f32+0x84>)
 8003358:	e7ee      	b.n	8003338 <arm_cfft_init_f32+0x24>
 800335a:	2940      	cmp	r1, #64	; 0x40
 800335c:	d013      	beq.n	8003386 <arm_cfft_init_f32+0x72>
 800335e:	d903      	bls.n	8003368 <arm_cfft_init_f32+0x54>
 8003360:	2980      	cmp	r1, #128	; 0x80
 8003362:	d107      	bne.n	8003374 <arm_cfft_init_f32+0x60>
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <arm_cfft_init_f32+0x88>)
 8003366:	e7e7      	b.n	8003338 <arm_cfft_init_f32+0x24>
 8003368:	2910      	cmp	r1, #16
 800336a:	d00e      	beq.n	800338a <arm_cfft_init_f32+0x76>
 800336c:	2920      	cmp	r1, #32
 800336e:	d101      	bne.n	8003374 <arm_cfft_init_f32+0x60>
 8003370:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <arm_cfft_init_f32+0x8c>)
 8003372:	e7e1      	b.n	8003338 <arm_cfft_init_f32+0x24>
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <arm_cfft_init_f32+0x90>)
 8003380:	e7da      	b.n	8003338 <arm_cfft_init_f32+0x24>
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <arm_cfft_init_f32+0x94>)
 8003384:	e7d8      	b.n	8003338 <arm_cfft_init_f32+0x24>
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <arm_cfft_init_f32+0x98>)
 8003388:	e7d6      	b.n	8003338 <arm_cfft_init_f32+0x24>
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <arm_cfft_init_f32+0x9c>)
 800338c:	e7d4      	b.n	8003338 <arm_cfft_init_f32+0x24>
 800338e:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <arm_cfft_init_f32+0xa0>)
 8003390:	e7d2      	b.n	8003338 <arm_cfft_init_f32+0x24>
 8003392:	bf00      	nop
 8003394:	08006600 	.word	0x08006600
 8003398:	080065a0 	.word	0x080065a0
 800339c:	080065b0 	.word	0x080065b0
 80033a0:	080065f0 	.word	0x080065f0
 80033a4:	080065d0 	.word	0x080065d0
 80033a8:	08006610 	.word	0x08006610
 80033ac:	08006620 	.word	0x08006620
 80033b0:	080065c0 	.word	0x080065c0
 80033b4:	080065e0 	.word	0x080065e0

080033b8 <arm_cfft_radix8by2_f32>:
 80033b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033bc:	ed2d 8b08 	vpush	{d8-d11}
 80033c0:	f8b0 c000 	ldrh.w	ip, [r0]
 80033c4:	6842      	ldr	r2, [r0, #4]
 80033c6:	4607      	mov	r7, r0
 80033c8:	4608      	mov	r0, r1
 80033ca:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80033ce:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80033d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80033d6:	b082      	sub	sp, #8
 80033d8:	f000 80b0 	beq.w	800353c <arm_cfft_radix8by2_f32+0x184>
 80033dc:	008c      	lsls	r4, r1, #2
 80033de:	3410      	adds	r4, #16
 80033e0:	f100 0310 	add.w	r3, r0, #16
 80033e4:	1906      	adds	r6, r0, r4
 80033e6:	3210      	adds	r2, #16
 80033e8:	4444      	add	r4, r8
 80033ea:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80033ee:	f108 0510 	add.w	r5, r8, #16
 80033f2:	ed15 2a04 	vldr	s4, [r5, #-16]
 80033f6:	ed55 2a03 	vldr	s5, [r5, #-12]
 80033fa:	ed54 4a04 	vldr	s9, [r4, #-16]
 80033fe:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003402:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003406:	ed54 5a01 	vldr	s11, [r4, #-4]
 800340a:	ed53 3a04 	vldr	s7, [r3, #-16]
 800340e:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003412:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003416:	ed56 6a04 	vldr	s13, [r6, #-16]
 800341a:	ed16 3a03 	vldr	s6, [r6, #-12]
 800341e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003422:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003426:	ed53 7a01 	vldr	s15, [r3, #-4]
 800342a:	ed16 1a02 	vldr	s2, [r6, #-8]
 800342e:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003432:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003436:	ee37 ba22 	vadd.f32	s22, s14, s5
 800343a:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800343e:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003442:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003446:	ee75 aa00 	vadd.f32	s21, s10, s0
 800344a:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800344e:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003452:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003456:	ed03 ba03 	vstr	s22, [r3, #-12]
 800345a:	ed43 aa02 	vstr	s21, [r3, #-8]
 800345e:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003462:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003466:	ed46 9a04 	vstr	s19, [r6, #-16]
 800346a:	ed06 9a03 	vstr	s18, [r6, #-12]
 800346e:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003472:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003476:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800347a:	ee34 4a43 	vsub.f32	s8, s8, s6
 800347e:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003482:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003486:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800348a:	ee27 8a26 	vmul.f32	s16, s14, s13
 800348e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8003492:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003496:	ee64 4a83 	vmul.f32	s9, s9, s6
 800349a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800349e:	ee27 7a03 	vmul.f32	s14, s14, s6
 80034a2:	ee64 6a26 	vmul.f32	s13, s8, s13
 80034a6:	ee24 4a03 	vmul.f32	s8, s8, s6
 80034aa:	ee37 7a63 	vsub.f32	s14, s14, s7
 80034ae:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80034b2:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80034b6:	ee32 3a08 	vadd.f32	s6, s4, s16
 80034ba:	ed05 7a03 	vstr	s14, [r5, #-12]
 80034be:	ed05 3a04 	vstr	s6, [r5, #-16]
 80034c2:	ed04 4a04 	vstr	s8, [r4, #-16]
 80034c6:	ed44 6a03 	vstr	s13, [r4, #-12]
 80034ca:	ed12 7a01 	vldr	s14, [r2, #-4]
 80034ce:	ee76 6a41 	vsub.f32	s13, s12, s2
 80034d2:	ee35 5a40 	vsub.f32	s10, s10, s0
 80034d6:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80034da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80034de:	ed52 5a02 	vldr	s11, [r2, #-8]
 80034e2:	ee67 3a87 	vmul.f32	s7, s15, s14
 80034e6:	ee66 4a87 	vmul.f32	s9, s13, s14
 80034ea:	ee25 4a25 	vmul.f32	s8, s10, s11
 80034ee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80034f2:	ee25 5a07 	vmul.f32	s10, s10, s14
 80034f6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80034fa:	ee26 7a07 	vmul.f32	s14, s12, s14
 80034fe:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003502:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003506:	ee74 5a23 	vadd.f32	s11, s8, s7
 800350a:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800350e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003512:	3310      	adds	r3, #16
 8003514:	4563      	cmp	r3, ip
 8003516:	ed45 5a02 	vstr	s11, [r5, #-8]
 800351a:	f106 0610 	add.w	r6, r6, #16
 800351e:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003522:	f102 0210 	add.w	r2, r2, #16
 8003526:	ed04 6a02 	vstr	s12, [r4, #-8]
 800352a:	ed04 7a01 	vstr	s14, [r4, #-4]
 800352e:	f105 0510 	add.w	r5, r5, #16
 8003532:	f104 0410 	add.w	r4, r4, #16
 8003536:	f47f af5c 	bne.w	80033f2 <arm_cfft_radix8by2_f32+0x3a>
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	b289      	uxth	r1, r1
 800353e:	2302      	movs	r3, #2
 8003540:	9101      	str	r1, [sp, #4]
 8003542:	f000 fc1d 	bl	8003d80 <arm_radix8_butterfly_f32>
 8003546:	9901      	ldr	r1, [sp, #4]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4640      	mov	r0, r8
 800354c:	2302      	movs	r3, #2
 800354e:	b002      	add	sp, #8
 8003550:	ecbd 8b08 	vpop	{d8-d11}
 8003554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003558:	f000 bc12 	b.w	8003d80 <arm_radix8_butterfly_f32>

0800355c <arm_cfft_radix8by4_f32>:
 800355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003560:	ed2d 8b0a 	vpush	{d8-d12}
 8003564:	8803      	ldrh	r3, [r0, #0]
 8003566:	6842      	ldr	r2, [r0, #4]
 8003568:	b08d      	sub	sp, #52	; 0x34
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	900a      	str	r0, [sp, #40]	; 0x28
 800356e:	4608      	mov	r0, r1
 8003570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003574:	edd1 5a00 	vldr	s11, [r1]
 8003578:	edd0 7a00 	vldr	s15, [r0]
 800357c:	edd1 3a01 	vldr	s7, [r1, #4]
 8003580:	ed90 5a01 	vldr	s10, [r0, #4]
 8003584:	9108      	str	r1, [sp, #32]
 8003586:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800358a:	ed96 7a00 	vldr	s14, [r6]
 800358e:	ed96 4a01 	vldr	s8, [r6, #4]
 8003592:	9607      	str	r6, [sp, #28]
 8003594:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003598:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800359c:	edd8 4a00 	vldr	s9, [r8]
 80035a0:	ed98 3a01 	vldr	s6, [r8, #4]
 80035a4:	ee77 6a06 	vadd.f32	s13, s14, s12
 80035a8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80035ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80035b0:	4604      	mov	r4, r0
 80035b2:	edc0 6a00 	vstr	s13, [r0]
 80035b6:	edd6 5a01 	vldr	s11, [r6, #4]
 80035ba:	edd8 2a01 	vldr	s5, [r8, #4]
 80035be:	ee75 6a23 	vadd.f32	s13, s10, s7
 80035c2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80035c6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80035ca:	ee74 3a27 	vadd.f32	s7, s8, s15
 80035ce:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80035d2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80035d6:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80035da:	3408      	adds	r4, #8
 80035dc:	ee35 4a47 	vsub.f32	s8, s10, s14
 80035e0:	460d      	mov	r5, r1
 80035e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80035e6:	4637      	mov	r7, r6
 80035e8:	9402      	str	r4, [sp, #8]
 80035ea:	3708      	adds	r7, #8
 80035ec:	460c      	mov	r4, r1
 80035ee:	3508      	adds	r5, #8
 80035f0:	0859      	lsrs	r1, r3, #1
 80035f2:	9109      	str	r1, [sp, #36]	; 0x24
 80035f4:	9706      	str	r7, [sp, #24]
 80035f6:	9505      	str	r5, [sp, #20]
 80035f8:	f102 0708 	add.w	r7, r2, #8
 80035fc:	ee36 6a64 	vsub.f32	s12, s12, s9
 8003600:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003604:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8003608:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800360c:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003610:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003614:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003618:	3902      	subs	r1, #2
 800361a:	4645      	mov	r5, r8
 800361c:	9701      	str	r7, [sp, #4]
 800361e:	f102 0c18 	add.w	ip, r2, #24
 8003622:	f102 0710 	add.w	r7, r2, #16
 8003626:	3508      	adds	r5, #8
 8003628:	0849      	lsrs	r1, r1, #1
 800362a:	edc0 5a01 	vstr	s11, [r0, #4]
 800362e:	9703      	str	r7, [sp, #12]
 8003630:	edc6 3a00 	vstr	s7, [r6]
 8003634:	ed86 5a01 	vstr	s10, [r6, #4]
 8003638:	f8cd c000 	str.w	ip, [sp]
 800363c:	ed84 6a00 	vstr	s12, [r4]
 8003640:	edc4 6a01 	vstr	s13, [r4, #4]
 8003644:	9504      	str	r5, [sp, #16]
 8003646:	edc8 7a00 	vstr	s15, [r8]
 800364a:	ed88 7a01 	vstr	s14, [r8, #4]
 800364e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003650:	f000 8138 	beq.w	80038c4 <arm_cfft_radix8by4_f32+0x368>
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3b0c      	subs	r3, #12
 8003658:	f1a6 0c0c 	sub.w	ip, r6, #12
 800365c:	f106 0510 	add.w	r5, r6, #16
 8003660:	4626      	mov	r6, r4
 8003662:	46bb      	mov	fp, r7
 8003664:	f102 0a20 	add.w	sl, r2, #32
 8003668:	f102 0930 	add.w	r9, r2, #48	; 0x30
 800366c:	f106 0710 	add.w	r7, r6, #16
 8003670:	4443      	add	r3, r8
 8003672:	f100 0e10 	add.w	lr, r0, #16
 8003676:	3c0c      	subs	r4, #12
 8003678:	f1a8 060c 	sub.w	r6, r8, #12
 800367c:	f108 0210 	add.w	r2, r8, #16
 8003680:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003684:	ed57 5a02 	vldr	s11, [r7, #-8]
 8003688:	ed55 7a02 	vldr	s15, [r5, #-8]
 800368c:	ed52 1a02 	vldr	s3, [r2, #-8]
 8003690:	ed57 6a01 	vldr	s13, [r7, #-4]
 8003694:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8003698:	ed12 1a01 	vldr	s2, [r2, #-4]
 800369c:	ed15 8a01 	vldr	s16, [r5, #-4]
 80036a0:	ee35 4a25 	vadd.f32	s8, s10, s11
 80036a4:	ee30 6a26 	vadd.f32	s12, s0, s13
 80036a8:	ee37 7a84 	vadd.f32	s14, s15, s8
 80036ac:	ee30 0a66 	vsub.f32	s0, s0, s13
 80036b0:	ee37 7a21 	vadd.f32	s14, s14, s3
 80036b4:	ee75 5a65 	vsub.f32	s11, s10, s11
 80036b8:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80036bc:	ed15 7a01 	vldr	s14, [r5, #-4]
 80036c0:	ed52 6a01 	vldr	s13, [r2, #-4]
 80036c4:	ee36 7a07 	vadd.f32	s14, s12, s14
 80036c8:	ee78 aa25 	vadd.f32	s21, s16, s11
 80036cc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80036d0:	ee70 3a67 	vsub.f32	s7, s0, s15
 80036d4:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80036d8:	ed96 7a02 	vldr	s14, [r6, #8]
 80036dc:	ed9c 2a02 	vldr	s4, [ip, #8]
 80036e0:	ed94 ba02 	vldr	s22, [r4, #8]
 80036e4:	edd3 9a02 	vldr	s19, [r3, #8]
 80036e8:	edd6 2a01 	vldr	s5, [r6, #4]
 80036ec:	ed9c 9a01 	vldr	s18, [ip, #4]
 80036f0:	ed93 5a01 	vldr	s10, [r3, #4]
 80036f4:	edd4 0a01 	vldr	s1, [r4, #4]
 80036f8:	ee72 6a07 	vadd.f32	s13, s4, s14
 80036fc:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003700:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8003704:	ee79 4a22 	vadd.f32	s9, s18, s5
 8003708:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800370c:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003710:	ed8c 7a02 	vstr	s14, [ip, #8]
 8003714:	ed94 7a01 	vldr	s14, [r4, #4]
 8003718:	edd3 8a01 	vldr	s17, [r3, #4]
 800371c:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003720:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003724:	ee37 7a28 	vadd.f32	s14, s14, s17
 8003728:	ee32 9a60 	vsub.f32	s18, s4, s1
 800372c:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003730:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8003734:	ed1b aa02 	vldr	s20, [fp, #-8]
 8003738:	ee73 8a22 	vadd.f32	s17, s6, s5
 800373c:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003740:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003744:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003748:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800374c:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003750:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003754:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8003758:	ee63 ca87 	vmul.f32	s25, s7, s14
 800375c:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003760:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003764:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003768:	ee73 3aea 	vsub.f32	s7, s7, s21
 800376c:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003770:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003774:	ee3b aaca 	vsub.f32	s20, s23, s20
 8003778:	ee34 4a67 	vsub.f32	s8, s8, s15
 800377c:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003780:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003784:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8003788:	ed05 7a02 	vstr	s14, [r5, #-8]
 800378c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8003790:	edc4 8a01 	vstr	s17, [r4, #4]
 8003794:	ed84 aa02 	vstr	s20, [r4, #8]
 8003798:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800379c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80037a0:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80037a4:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80037a8:	ee34 4a61 	vsub.f32	s8, s8, s3
 80037ac:	ee36 6a41 	vsub.f32	s12, s12, s2
 80037b0:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80037b4:	ee66 9a26 	vmul.f32	s19, s12, s13
 80037b8:	ee24 9a23 	vmul.f32	s18, s8, s7
 80037bc:	ee26 6a23 	vmul.f32	s12, s12, s7
 80037c0:	ee24 4a26 	vmul.f32	s8, s8, s13
 80037c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80037c8:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80037cc:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80037d0:	ee36 6a44 	vsub.f32	s12, s12, s8
 80037d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80037d8:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80037dc:	ee79 3a29 	vadd.f32	s7, s18, s19
 80037e0:	ee75 6a60 	vsub.f32	s13, s10, s1
 80037e4:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80037e8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80037ec:	ed47 3a02 	vstr	s7, [r7, #-8]
 80037f0:	ed07 6a01 	vstr	s12, [r7, #-4]
 80037f4:	ed86 7a01 	vstr	s14, [r6, #4]
 80037f8:	ed86 4a02 	vstr	s8, [r6, #8]
 80037fc:	ee35 6a81 	vadd.f32	s12, s11, s2
 8003800:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8003804:	ed59 5a06 	vldr	s11, [r9, #-24]	; 0xffffffe8
 8003808:	ed59 6a05 	vldr	s13, [r9, #-20]	; 0xffffffec
 800380c:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003810:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8003814:	ee67 2a26 	vmul.f32	s5, s14, s13
 8003818:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800381c:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003820:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003824:	ee26 6a26 	vmul.f32	s12, s12, s13
 8003828:	ee27 7a25 	vmul.f32	s14, s14, s11
 800382c:	ee63 6a26 	vmul.f32	s13, s6, s13
 8003830:	ee23 3a25 	vmul.f32	s6, s6, s11
 8003834:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003838:	ee75 5a24 	vadd.f32	s11, s10, s9
 800383c:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8003840:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003844:	3901      	subs	r1, #1
 8003846:	ed42 5a02 	vstr	s11, [r2, #-8]
 800384a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800384e:	f10e 0e08 	add.w	lr, lr, #8
 8003852:	ed83 3a02 	vstr	s6, [r3, #8]
 8003856:	ed83 7a01 	vstr	s14, [r3, #4]
 800385a:	f1ac 0c08 	sub.w	ip, ip, #8
 800385e:	f10b 0b08 	add.w	fp, fp, #8
 8003862:	f105 0508 	add.w	r5, r5, #8
 8003866:	f1a4 0408 	sub.w	r4, r4, #8
 800386a:	f10a 0a10 	add.w	sl, sl, #16
 800386e:	f107 0708 	add.w	r7, r7, #8
 8003872:	f1a6 0608 	sub.w	r6, r6, #8
 8003876:	f109 0918 	add.w	r9, r9, #24
 800387a:	f102 0208 	add.w	r2, r2, #8
 800387e:	f1a3 0308 	sub.w	r3, r3, #8
 8003882:	f47f aefd 	bne.w	8003680 <arm_cfft_radix8by4_f32+0x124>
 8003886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003888:	9902      	ldr	r1, [sp, #8]
 800388a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800388e:	9102      	str	r1, [sp, #8]
 8003890:	9901      	ldr	r1, [sp, #4]
 8003892:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003896:	9101      	str	r1, [sp, #4]
 8003898:	9906      	ldr	r1, [sp, #24]
 800389a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800389e:	9106      	str	r1, [sp, #24]
 80038a0:	9903      	ldr	r1, [sp, #12]
 80038a2:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80038a6:	9103      	str	r1, [sp, #12]
 80038a8:	9905      	ldr	r1, [sp, #20]
 80038aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80038ae:	9105      	str	r1, [sp, #20]
 80038b0:	9904      	ldr	r1, [sp, #16]
 80038b2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80038b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80038ba:	9204      	str	r2, [sp, #16]
 80038bc:	9a00      	ldr	r2, [sp, #0]
 80038be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	9902      	ldr	r1, [sp, #8]
 80038c6:	9d05      	ldr	r5, [sp, #20]
 80038c8:	ed91 4a00 	vldr	s8, [r1]
 80038cc:	edd5 6a00 	vldr	s13, [r5]
 80038d0:	9b06      	ldr	r3, [sp, #24]
 80038d2:	9c04      	ldr	r4, [sp, #16]
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	ed94 3a00 	vldr	s6, [r4]
 80038dc:	edd5 4a01 	vldr	s9, [r5, #4]
 80038e0:	edd1 3a01 	vldr	s7, [r1, #4]
 80038e4:	ed94 2a01 	vldr	s4, [r4, #4]
 80038e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80038ec:	9a01      	ldr	r2, [sp, #4]
 80038ee:	ee34 6a26 	vadd.f32	s12, s8, s13
 80038f2:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80038f6:	ee37 5a86 	vadd.f32	s10, s15, s12
 80038fa:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80038fe:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003902:	ee74 6a66 	vsub.f32	s13, s8, s13
 8003906:	ed81 5a00 	vstr	s10, [r1]
 800390a:	ed93 5a01 	vldr	s10, [r3, #4]
 800390e:	edd4 4a01 	vldr	s9, [r4, #4]
 8003912:	ee35 5a85 	vadd.f32	s10, s11, s10
 8003916:	ee37 4a26 	vadd.f32	s8, s14, s13
 800391a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800391e:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8003922:	ed81 5a01 	vstr	s10, [r1, #4]
 8003926:	edd2 1a00 	vldr	s3, [r2]
 800392a:	edd2 2a01 	vldr	s5, [r2, #4]
 800392e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003932:	ee34 5a83 	vadd.f32	s10, s9, s6
 8003936:	ee34 4a42 	vsub.f32	s8, s8, s4
 800393a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800393e:	ee64 4a21 	vmul.f32	s9, s8, s3
 8003942:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003946:	ee65 2a22 	vmul.f32	s5, s10, s5
 800394a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800394e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003952:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003956:	edc3 2a00 	vstr	s5, [r3]
 800395a:	ed83 5a01 	vstr	s10, [r3, #4]
 800395e:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8003962:	9b03      	ldr	r3, [sp, #12]
 8003964:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003968:	ed93 4a01 	vldr	s8, [r3, #4]
 800396c:	ed93 5a00 	vldr	s10, [r3]
 8003970:	9b00      	ldr	r3, [sp, #0]
 8003972:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003976:	ee66 4a05 	vmul.f32	s9, s12, s10
 800397a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800397e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003982:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003986:	ee35 6a46 	vsub.f32	s12, s10, s12
 800398a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800398e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8003992:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003996:	ed85 6a01 	vstr	s12, [r5, #4]
 800399a:	edc5 5a00 	vstr	s11, [r5]
 800399e:	edd3 5a01 	vldr	s11, [r3, #4]
 80039a2:	edd3 6a00 	vldr	s13, [r3]
 80039a6:	ee37 7a02 	vadd.f32	s14, s14, s4
 80039aa:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80039ae:	ee27 6a26 	vmul.f32	s12, s14, s13
 80039b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80039b6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80039ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80039be:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80039c2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80039c6:	ed84 7a01 	vstr	s14, [r4, #4]
 80039ca:	edc4 7a00 	vstr	s15, [r4]
 80039ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80039d0:	9100      	str	r1, [sp, #0]
 80039d2:	6862      	ldr	r2, [r4, #4]
 80039d4:	2304      	movs	r3, #4
 80039d6:	f000 f9d3 	bl	8003d80 <arm_radix8_butterfly_f32>
 80039da:	9807      	ldr	r0, [sp, #28]
 80039dc:	9900      	ldr	r1, [sp, #0]
 80039de:	6862      	ldr	r2, [r4, #4]
 80039e0:	2304      	movs	r3, #4
 80039e2:	f000 f9cd 	bl	8003d80 <arm_radix8_butterfly_f32>
 80039e6:	9808      	ldr	r0, [sp, #32]
 80039e8:	9900      	ldr	r1, [sp, #0]
 80039ea:	6862      	ldr	r2, [r4, #4]
 80039ec:	2304      	movs	r3, #4
 80039ee:	f000 f9c7 	bl	8003d80 <arm_radix8_butterfly_f32>
 80039f2:	9900      	ldr	r1, [sp, #0]
 80039f4:	6862      	ldr	r2, [r4, #4]
 80039f6:	4640      	mov	r0, r8
 80039f8:	2304      	movs	r3, #4
 80039fa:	b00d      	add	sp, #52	; 0x34
 80039fc:	ecbd 8b0a 	vpop	{d8-d12}
 8003a00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a04:	f000 b9bc 	b.w	8003d80 <arm_radix8_butterfly_f32>

08003a08 <arm_cfft_f32>:
 8003a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a0c:	2a01      	cmp	r2, #1
 8003a0e:	8805      	ldrh	r5, [r0, #0]
 8003a10:	4607      	mov	r7, r0
 8003a12:	4690      	mov	r8, r2
 8003a14:	460c      	mov	r4, r1
 8003a16:	4699      	mov	r9, r3
 8003a18:	d05c      	beq.n	8003ad4 <arm_cfft_f32+0xcc>
 8003a1a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003a1e:	d054      	beq.n	8003aca <arm_cfft_f32+0xc2>
 8003a20:	d810      	bhi.n	8003a44 <arm_cfft_f32+0x3c>
 8003a22:	2d40      	cmp	r5, #64	; 0x40
 8003a24:	d015      	beq.n	8003a52 <arm_cfft_f32+0x4a>
 8003a26:	d94c      	bls.n	8003ac2 <arm_cfft_f32+0xba>
 8003a28:	2d80      	cmp	r5, #128	; 0x80
 8003a2a:	d103      	bne.n	8003a34 <arm_cfft_f32+0x2c>
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f7ff fcc2 	bl	80033b8 <arm_cfft_radix8by2_f32>
 8003a34:	f1b9 0f00 	cmp.w	r9, #0
 8003a38:	d114      	bne.n	8003a64 <arm_cfft_f32+0x5c>
 8003a3a:	f1b8 0f01 	cmp.w	r8, #1
 8003a3e:	d019      	beq.n	8003a74 <arm_cfft_f32+0x6c>
 8003a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a44:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8003a48:	d03f      	beq.n	8003aca <arm_cfft_f32+0xc2>
 8003a4a:	d933      	bls.n	8003ab4 <arm_cfft_f32+0xac>
 8003a4c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8003a50:	d1f0      	bne.n	8003a34 <arm_cfft_f32+0x2c>
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	2301      	movs	r3, #1
 8003a56:	4629      	mov	r1, r5
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f000 f991 	bl	8003d80 <arm_radix8_butterfly_f32>
 8003a5e:	f1b9 0f00 	cmp.w	r9, #0
 8003a62:	d0ea      	beq.n	8003a3a <arm_cfft_f32+0x32>
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	89b9      	ldrh	r1, [r7, #12]
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 f845 	bl	8003af8 <arm_bitreversal_32>
 8003a6e:	f1b8 0f01 	cmp.w	r8, #1
 8003a72:	d1e5      	bne.n	8003a40 <arm_cfft_f32+0x38>
 8003a74:	ee07 5a90 	vmov	s15, r5
 8003a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a84:	2d00      	cmp	r5, #0
 8003a86:	d0db      	beq.n	8003a40 <arm_cfft_f32+0x38>
 8003a88:	f104 0108 	add.w	r1, r4, #8
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	3301      	adds	r3, #1
 8003a90:	429d      	cmp	r5, r3
 8003a92:	f101 0108 	add.w	r1, r1, #8
 8003a96:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003a9a:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003a9e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003aa2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003aa6:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003aaa:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003aae:	d1ee      	bne.n	8003a8e <arm_cfft_f32+0x86>
 8003ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003ab8:	d0cb      	beq.n	8003a52 <arm_cfft_f32+0x4a>
 8003aba:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003abe:	d0b5      	beq.n	8003a2c <arm_cfft_f32+0x24>
 8003ac0:	e7b8      	b.n	8003a34 <arm_cfft_f32+0x2c>
 8003ac2:	2d10      	cmp	r5, #16
 8003ac4:	d0b2      	beq.n	8003a2c <arm_cfft_f32+0x24>
 8003ac6:	2d20      	cmp	r5, #32
 8003ac8:	d1b4      	bne.n	8003a34 <arm_cfft_f32+0x2c>
 8003aca:	4621      	mov	r1, r4
 8003acc:	4638      	mov	r0, r7
 8003ace:	f7ff fd45 	bl	800355c <arm_cfft_radix8by4_f32>
 8003ad2:	e7af      	b.n	8003a34 <arm_cfft_f32+0x2c>
 8003ad4:	b16d      	cbz	r5, 8003af2 <arm_cfft_f32+0xea>
 8003ad6:	310c      	adds	r1, #12
 8003ad8:	2600      	movs	r6, #0
 8003ada:	ed51 7a02 	vldr	s15, [r1, #-8]
 8003ade:	3601      	adds	r6, #1
 8003ae0:	eef1 7a67 	vneg.f32	s15, s15
 8003ae4:	42b5      	cmp	r5, r6
 8003ae6:	ed41 7a02 	vstr	s15, [r1, #-8]
 8003aea:	f101 0108 	add.w	r1, r1, #8
 8003aee:	d1f4      	bne.n	8003ada <arm_cfft_f32+0xd2>
 8003af0:	e793      	b.n	8003a1a <arm_cfft_f32+0x12>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0a4      	beq.n	8003a40 <arm_cfft_f32+0x38>
 8003af6:	e7b5      	b.n	8003a64 <arm_cfft_f32+0x5c>

08003af8 <arm_bitreversal_32>:
 8003af8:	b1e9      	cbz	r1, 8003b36 <arm_bitreversal_32+0x3e>
 8003afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afc:	2500      	movs	r5, #0
 8003afe:	f102 0e02 	add.w	lr, r2, #2
 8003b02:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8003b06:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8003b0a:	08a4      	lsrs	r4, r4, #2
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8003b12:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8003b16:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8003b1a:	00a6      	lsls	r6, r4, #2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8003b22:	3304      	adds	r3, #4
 8003b24:	1d34      	adds	r4, r6, #4
 8003b26:	3502      	adds	r5, #2
 8003b28:	58c6      	ldr	r6, [r0, r3]
 8003b2a:	5907      	ldr	r7, [r0, r4]
 8003b2c:	50c7      	str	r7, [r0, r3]
 8003b2e:	428d      	cmp	r5, r1
 8003b30:	5106      	str	r6, [r0, r4]
 8003b32:	d3e6      	bcc.n	8003b02 <arm_bitreversal_32+0xa>
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	4770      	bx	lr

08003b38 <arm_cmplx_mag_f32>:
 8003b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3c:	ed2d 8b02 	vpush	{d8}
 8003b40:	0897      	lsrs	r7, r2, #2
 8003b42:	b084      	sub	sp, #16
 8003b44:	d077      	beq.n	8003c36 <arm_cmplx_mag_f32+0xfe>
 8003b46:	f04f 0800 	mov.w	r8, #0
 8003b4a:	f100 0420 	add.w	r4, r0, #32
 8003b4e:	f101 0510 	add.w	r5, r1, #16
 8003b52:	463e      	mov	r6, r7
 8003b54:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8003b58:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8003b5c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003b60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b64:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003b68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	f2c0 80c5 	blt.w	8003cfe <arm_cmplx_mag_f32+0x1c6>
 8003b74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003b80:	f100 80cb 	bmi.w	8003d1a <arm_cmplx_mag_f32+0x1e2>
 8003b84:	ed05 8a04 	vstr	s16, [r5, #-16]
 8003b88:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8003b8c:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8003b90:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003b94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b98:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003b9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba4:	f2c0 80a8 	blt.w	8003cf8 <arm_cmplx_mag_f32+0x1c0>
 8003ba8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003bb4:	f100 80a8 	bmi.w	8003d08 <arm_cmplx_mag_f32+0x1d0>
 8003bb8:	ed05 8a03 	vstr	s16, [r5, #-12]
 8003bbc:	ed14 0a04 	vldr	s0, [r4, #-16]
 8003bc0:	ed54 7a03 	vldr	s15, [r4, #-12]
 8003bc4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003bc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bcc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003bd0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	f2c0 808b 	blt.w	8003cf2 <arm_cmplx_mag_f32+0x1ba>
 8003bdc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003be8:	f100 80a9 	bmi.w	8003d3e <arm_cmplx_mag_f32+0x206>
 8003bec:	ed05 8a02 	vstr	s16, [r5, #-8]
 8003bf0:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003bf4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8003bf8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003bfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	db6e      	blt.n	8003cec <arm_cmplx_mag_f32+0x1b4>
 8003c0e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c16:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003c1a:	f100 8087 	bmi.w	8003d2c <arm_cmplx_mag_f32+0x1f4>
 8003c1e:	ed05 8a01 	vstr	s16, [r5, #-4]
 8003c22:	3e01      	subs	r6, #1
 8003c24:	f104 0420 	add.w	r4, r4, #32
 8003c28:	f105 0510 	add.w	r5, r5, #16
 8003c2c:	d192      	bne.n	8003b54 <arm_cmplx_mag_f32+0x1c>
 8003c2e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8003c32:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8003c36:	f012 0203 	ands.w	r2, r2, #3
 8003c3a:	d052      	beq.n	8003ce2 <arm_cmplx_mag_f32+0x1aa>
 8003c3c:	ed90 0a00 	vldr	s0, [r0]
 8003c40:	edd0 7a01 	vldr	s15, [r0, #4]
 8003c44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003c48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003c52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5a:	bfb8      	it	lt
 8003c5c:	600b      	strlt	r3, [r1, #0]
 8003c5e:	db08      	blt.n	8003c72 <arm_cmplx_mag_f32+0x13a>
 8003c60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c68:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003c6c:	d479      	bmi.n	8003d62 <arm_cmplx_mag_f32+0x22a>
 8003c6e:	ed81 8a00 	vstr	s16, [r1]
 8003c72:	3a01      	subs	r2, #1
 8003c74:	d035      	beq.n	8003ce2 <arm_cmplx_mag_f32+0x1aa>
 8003c76:	ed90 0a02 	vldr	s0, [r0, #8]
 8003c7a:	edd0 7a03 	vldr	s15, [r0, #12]
 8003c7e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003c82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c86:	2300      	movs	r3, #0
 8003c88:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003c8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	bfb8      	it	lt
 8003c96:	604b      	strlt	r3, [r1, #4]
 8003c98:	db08      	blt.n	8003cac <arm_cmplx_mag_f32+0x174>
 8003c9a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003ca6:	d453      	bmi.n	8003d50 <arm_cmplx_mag_f32+0x218>
 8003ca8:	ed81 8a01 	vstr	s16, [r1, #4]
 8003cac:	2a01      	cmp	r2, #1
 8003cae:	d018      	beq.n	8003ce2 <arm_cmplx_mag_f32+0x1aa>
 8003cb0:	ed90 0a04 	vldr	s0, [r0, #16]
 8003cb4:	edd0 7a05 	vldr	s15, [r0, #20]
 8003cb8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003cbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003cc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	db19      	blt.n	8003d04 <arm_cmplx_mag_f32+0x1cc>
 8003cd0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003cdc:	d44a      	bmi.n	8003d74 <arm_cmplx_mag_f32+0x23c>
 8003cde:	ed81 8a02 	vstr	s16, [r1, #8]
 8003ce2:	b004      	add	sp, #16
 8003ce4:	ecbd 8b02 	vpop	{d8}
 8003ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cec:	f845 8c04 	str.w	r8, [r5, #-4]
 8003cf0:	e797      	b.n	8003c22 <arm_cmplx_mag_f32+0xea>
 8003cf2:	f845 8c08 	str.w	r8, [r5, #-8]
 8003cf6:	e77b      	b.n	8003bf0 <arm_cmplx_mag_f32+0xb8>
 8003cf8:	f845 8c0c 	str.w	r8, [r5, #-12]
 8003cfc:	e75e      	b.n	8003bbc <arm_cmplx_mag_f32+0x84>
 8003cfe:	f845 8c10 	str.w	r8, [r5, #-16]
 8003d02:	e741      	b.n	8003b88 <arm_cmplx_mag_f32+0x50>
 8003d04:	608b      	str	r3, [r1, #8]
 8003d06:	e7ec      	b.n	8003ce2 <arm_cmplx_mag_f32+0x1aa>
 8003d08:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003d0c:	9001      	str	r0, [sp, #4]
 8003d0e:	f001 fc0f 	bl	8005530 <sqrtf>
 8003d12:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003d16:	9801      	ldr	r0, [sp, #4]
 8003d18:	e74e      	b.n	8003bb8 <arm_cmplx_mag_f32+0x80>
 8003d1a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003d1e:	9001      	str	r0, [sp, #4]
 8003d20:	f001 fc06 	bl	8005530 <sqrtf>
 8003d24:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003d28:	9801      	ldr	r0, [sp, #4]
 8003d2a:	e72b      	b.n	8003b84 <arm_cmplx_mag_f32+0x4c>
 8003d2c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003d30:	9001      	str	r0, [sp, #4]
 8003d32:	f001 fbfd 	bl	8005530 <sqrtf>
 8003d36:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003d3a:	9801      	ldr	r0, [sp, #4]
 8003d3c:	e76f      	b.n	8003c1e <arm_cmplx_mag_f32+0xe6>
 8003d3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003d42:	9001      	str	r0, [sp, #4]
 8003d44:	f001 fbf4 	bl	8005530 <sqrtf>
 8003d48:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003d4c:	9801      	ldr	r0, [sp, #4]
 8003d4e:	e74d      	b.n	8003bec <arm_cmplx_mag_f32+0xb4>
 8003d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d54:	9201      	str	r2, [sp, #4]
 8003d56:	f001 fbeb 	bl	8005530 <sqrtf>
 8003d5a:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8003d5e:	9903      	ldr	r1, [sp, #12]
 8003d60:	e7a2      	b.n	8003ca8 <arm_cmplx_mag_f32+0x170>
 8003d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d66:	9201      	str	r2, [sp, #4]
 8003d68:	f001 fbe2 	bl	8005530 <sqrtf>
 8003d6c:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8003d70:	9903      	ldr	r1, [sp, #12]
 8003d72:	e77c      	b.n	8003c6e <arm_cmplx_mag_f32+0x136>
 8003d74:	9101      	str	r1, [sp, #4]
 8003d76:	f001 fbdb 	bl	8005530 <sqrtf>
 8003d7a:	9901      	ldr	r1, [sp, #4]
 8003d7c:	e7af      	b.n	8003cde <arm_cmplx_mag_f32+0x1a6>
 8003d7e:	bf00      	nop

08003d80 <arm_radix8_butterfly_f32>:
 8003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	ed2d 8b10 	vpush	{d8-d15}
 8003d88:	b093      	sub	sp, #76	; 0x4c
 8003d8a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8003d8e:	4603      	mov	r3, r0
 8003d90:	3304      	adds	r3, #4
 8003d92:	ed9f bac0 	vldr	s22, [pc, #768]	; 8004094 <arm_radix8_butterfly_f32+0x314>
 8003d96:	9010      	str	r0, [sp, #64]	; 0x40
 8003d98:	468b      	mov	fp, r1
 8003d9a:	9311      	str	r3, [sp, #68]	; 0x44
 8003d9c:	4689      	mov	r9, r1
 8003d9e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003da0:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8003da4:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8003da8:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8003dac:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 8003db0:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8003db4:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8003db8:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8003dbc:	9100      	str	r1, [sp, #0]
 8003dbe:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8003dc2:	f108 0004 	add.w	r0, r8, #4
 8003dc6:	f10e 0104 	add.w	r1, lr, #4
 8003dca:	462e      	mov	r6, r5
 8003dcc:	4420      	add	r0, r4
 8003dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dd2:	4421      	add	r1, r4
 8003dd4:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8003dd8:	960d      	str	r6, [sp, #52]	; 0x34
 8003dda:	9402      	str	r4, [sp, #8]
 8003ddc:	012c      	lsls	r4, r5, #4
 8003dde:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8003de2:	9403      	str	r4, [sp, #12]
 8003de4:	00ec      	lsls	r4, r5, #3
 8003de6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003de8:	9404      	str	r4, [sp, #16]
 8003dea:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8003dee:	9405      	str	r4, [sp, #20]
 8003df0:	016c      	lsls	r4, r5, #5
 8003df2:	9401      	str	r4, [sp, #4]
 8003df4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003df6:	9c00      	ldr	r4, [sp, #0]
 8003df8:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8003dfc:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8003e00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003e04:	f04f 0c00 	mov.w	ip, #0
 8003e08:	edd6 6a00 	vldr	s13, [r6]
 8003e0c:	edd7 1a00 	vldr	s3, [r7]
 8003e10:	ed15 aa01 	vldr	s20, [r5, #-4]
 8003e14:	edd2 5a00 	vldr	s11, [r2]
 8003e18:	ed51 9a01 	vldr	s19, [r1, #-4]
 8003e1c:	ed94 6a00 	vldr	s12, [r4]
 8003e20:	ed50 7a01 	vldr	s15, [r0, #-4]
 8003e24:	ed93 3a00 	vldr	s6, [r3]
 8003e28:	ee39 0a86 	vadd.f32	s0, s19, s12
 8003e2c:	ee33 2a21 	vadd.f32	s4, s6, s3
 8003e30:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8003e34:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8003e38:	ee35 7a02 	vadd.f32	s14, s10, s4
 8003e3c:	ee34 4a80 	vadd.f32	s8, s9, s0
 8003e40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e44:	ee74 6a07 	vadd.f32	s13, s8, s14
 8003e48:	ee34 4a47 	vsub.f32	s8, s8, s14
 8003e4c:	ed45 6a01 	vstr	s13, [r5, #-4]
 8003e50:	ed82 4a00 	vstr	s8, [r2]
 8003e54:	edd0 6a00 	vldr	s13, [r0]
 8003e58:	ed96 9a01 	vldr	s18, [r6, #4]
 8003e5c:	edd3 2a01 	vldr	s5, [r3, #4]
 8003e60:	edd7 8a01 	vldr	s17, [r7, #4]
 8003e64:	edd5 0a00 	vldr	s1, [r5]
 8003e68:	edd2 3a01 	vldr	s7, [r2, #4]
 8003e6c:	ed94 8a01 	vldr	s16, [r4, #4]
 8003e70:	ed91 7a00 	vldr	s14, [r1]
 8003e74:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003e78:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8003e7c:	ee72 aae8 	vsub.f32	s21, s5, s17
 8003e80:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8003e84:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8003e88:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003e8c:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8003e90:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8003e94:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8003e98:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8003e9c:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8003ea0:	ee77 0a08 	vadd.f32	s1, s14, s16
 8003ea4:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8003ea8:	ee37 7a48 	vsub.f32	s14, s14, s16
 8003eac:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8003eb0:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8003eb4:	ee76 6a89 	vadd.f32	s13, s13, s18
 8003eb8:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8003ebc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8003ec0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003ec4:	ee35 5a42 	vsub.f32	s10, s10, s4
 8003ec8:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8003ecc:	ee33 2a20 	vadd.f32	s4, s6, s1
 8003ed0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003ed4:	ee33 3a60 	vsub.f32	s6, s6, s1
 8003ed8:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8003edc:	ee77 0a01 	vadd.f32	s1, s14, s2
 8003ee0:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8003ee4:	ee37 7a41 	vsub.f32	s14, s14, s2
 8003ee8:	ee73 1a84 	vadd.f32	s3, s7, s8
 8003eec:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8003ef0:	ee76 3a27 	vadd.f32	s7, s12, s15
 8003ef4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ef8:	ee32 8a00 	vadd.f32	s16, s4, s0
 8003efc:	ee33 1a45 	vsub.f32	s2, s6, s10
 8003f00:	ee32 2a40 	vsub.f32	s4, s4, s0
 8003f04:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003f08:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8003f0c:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8003f10:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8003f14:	ee34 6a67 	vsub.f32	s12, s8, s15
 8003f18:	ee75 4a87 	vadd.f32	s9, s11, s14
 8003f1c:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8003f20:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8003f24:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003f28:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8003f2c:	44dc      	add	ip, fp
 8003f2e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003f32:	45e1      	cmp	r9, ip
 8003f34:	ed85 8a00 	vstr	s16, [r5]
 8003f38:	ed82 2a01 	vstr	s4, [r2, #4]
 8003f3c:	4455      	add	r5, sl
 8003f3e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003f42:	4452      	add	r2, sl
 8003f44:	edc4 6a00 	vstr	s13, [r4]
 8003f48:	ed81 1a00 	vstr	s2, [r1]
 8003f4c:	ed84 5a01 	vstr	s10, [r4, #4]
 8003f50:	4451      	add	r1, sl
 8003f52:	ed00 3a01 	vstr	s6, [r0, #-4]
 8003f56:	4454      	add	r4, sl
 8003f58:	edc7 2a00 	vstr	s5, [r7]
 8003f5c:	edc6 4a00 	vstr	s9, [r6]
 8003f60:	ed83 7a00 	vstr	s14, [r3]
 8003f64:	edc0 5a00 	vstr	s11, [r0]
 8003f68:	edc7 3a01 	vstr	s7, [r7, #4]
 8003f6c:	4450      	add	r0, sl
 8003f6e:	ed86 6a01 	vstr	s12, [r6, #4]
 8003f72:	4457      	add	r7, sl
 8003f74:	edc3 7a01 	vstr	s15, [r3, #4]
 8003f78:	4456      	add	r6, sl
 8003f7a:	4453      	add	r3, sl
 8003f7c:	f63f af44 	bhi.w	8003e08 <arm_radix8_butterfly_f32+0x88>
 8003f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f82:	2b07      	cmp	r3, #7
 8003f84:	f240 81c3 	bls.w	800430e <arm_radix8_butterfly_f32+0x58e>
 8003f88:	9805      	ldr	r0, [sp, #20]
 8003f8a:	9a01      	ldr	r2, [sp, #4]
 8003f8c:	9b03      	ldr	r3, [sp, #12]
 8003f8e:	9d04      	ldr	r5, [sp, #16]
 8003f90:	9902      	ldr	r1, [sp, #8]
 8003f92:	f100 0c08 	add.w	ip, r0, #8
 8003f96:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003f98:	3208      	adds	r2, #8
 8003f9a:	1882      	adds	r2, r0, r2
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	920a      	str	r2, [sp, #40]	; 0x28
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	18d3      	adds	r3, r2, r3
 8003fa4:	3108      	adds	r1, #8
 8003fa6:	3508      	adds	r5, #8
 8003fa8:	1851      	adds	r1, r2, r1
 8003faa:	9307      	str	r3, [sp, #28]
 8003fac:	4613      	mov	r3, r2
 8003fae:	442a      	add	r2, r5
 8003fb0:	9206      	str	r2, [sp, #24]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4462      	add	r2, ip
 8003fb6:	f10e 0e0c 	add.w	lr, lr, #12
 8003fba:	9205      	str	r2, [sp, #20]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4472      	add	r2, lr
 8003fc0:	f108 0808 	add.w	r8, r8, #8
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	4440      	add	r0, r8
 8003fc8:	f04f 0e00 	mov.w	lr, #0
 8003fcc:	9203      	str	r2, [sp, #12]
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	465a      	mov	r2, fp
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	46f3      	mov	fp, lr
 8003fd6:	46d1      	mov	r9, sl
 8003fd8:	9009      	str	r0, [sp, #36]	; 0x24
 8003fda:	9108      	str	r1, [sp, #32]
 8003fdc:	f04f 0801 	mov.w	r8, #1
 8003fe0:	469a      	mov	sl, r3
 8003fe2:	4696      	mov	lr, r2
 8003fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fe6:	449b      	add	fp, r3
 8003fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003fee:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8003ff2:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8003ff6:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8003ffa:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 8003ffe:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8004002:	930c      	str	r3, [sp, #48]	; 0x30
 8004004:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8004008:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 800400c:	920b      	str	r2, [sp, #44]	; 0x2c
 800400e:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 8004012:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8004016:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 800401a:	9202      	str	r2, [sp, #8]
 800401c:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	edd3 da01 	vldr	s27, [r3, #4]
 8004028:	9b01      	ldr	r3, [sp, #4]
 800402a:	edd0 7a00 	vldr	s15, [r0]
 800402e:	ed93 da01 	vldr	s26, [r3, #4]
 8004032:	9b02      	ldr	r3, [sp, #8]
 8004034:	edcd 7a02 	vstr	s15, [sp, #8]
 8004038:	ed93 ca01 	vldr	s24, [r3, #4]
 800403c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800403e:	eddc ca01 	vldr	s25, [ip, #4]
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004048:	edcd 7a01 	vstr	s15, [sp, #4]
 800404c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8004050:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8004054:	9200      	str	r2, [sp, #0]
 8004056:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	ed92 fa01 	vldr	s30, [r2, #4]
 8004062:	9a00      	ldr	r2, [sp, #0]
 8004064:	edd1 ea01 	vldr	s29, [r1, #4]
 8004068:	ed92 ea01 	vldr	s28, [r2, #4]
 800406c:	edd7 ba00 	vldr	s23, [r7]
 8004070:	edd6 aa00 	vldr	s21, [r6]
 8004074:	ed95 aa00 	vldr	s20, [r5]
 8004078:	edd4 9a00 	vldr	s19, [r4]
 800407c:	edcd 7a00 	vstr	s15, [sp]
 8004080:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8004084:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8004088:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 800408c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004090:	46c4      	mov	ip, r8
 8004092:	e001      	b.n	8004098 <arm_radix8_butterfly_f32+0x318>
 8004094:	3f3504f3 	.word	0x3f3504f3
 8004098:	ed91 6a00 	vldr	s12, [r1]
 800409c:	ed93 5a00 	vldr	s10, [r3]
 80040a0:	edd0 fa00 	vldr	s31, [r0]
 80040a4:	edd4 7a00 	vldr	s15, [r4]
 80040a8:	ed95 7a00 	vldr	s14, [r5]
 80040ac:	ed56 3a01 	vldr	s7, [r6, #-4]
 80040b0:	ed17 3a01 	vldr	s6, [r7, #-4]
 80040b4:	ed92 2a00 	vldr	s4, [r2]
 80040b8:	ed96 0a00 	vldr	s0, [r6]
 80040bc:	ee33 8a85 	vadd.f32	s16, s7, s10
 80040c0:	ee32 1a06 	vadd.f32	s2, s4, s12
 80040c4:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80040c8:	ee77 4a87 	vadd.f32	s9, s15, s14
 80040cc:	ee78 1a04 	vadd.f32	s3, s16, s8
 80040d0:	ee71 6a24 	vadd.f32	s13, s2, s9
 80040d4:	ee32 2a46 	vsub.f32	s4, s4, s12
 80040d8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80040dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040e0:	ed06 6a01 	vstr	s12, [r6, #-4]
 80040e4:	edd4 8a01 	vldr	s17, [r4, #4]
 80040e8:	ed92 9a01 	vldr	s18, [r2, #4]
 80040ec:	edd7 0a00 	vldr	s1, [r7]
 80040f0:	edd1 2a01 	vldr	s5, [r1, #4]
 80040f4:	ed95 7a01 	vldr	s14, [r5, #4]
 80040f8:	ed93 6a01 	vldr	s12, [r3, #4]
 80040fc:	edd0 5a01 	vldr	s11, [r0, #4]
 8004100:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004104:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8004108:	ee39 5a62 	vsub.f32	s10, s18, s5
 800410c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8004110:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004114:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004118:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800411c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004120:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004124:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004128:	ee30 2a06 	vadd.f32	s4, s0, s12
 800412c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8004130:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004134:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8004138:	ee32 1a08 	vadd.f32	s2, s4, s16
 800413c:	ee72 fa87 	vadd.f32	s31, s5, s14
 8004140:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004144:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004148:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800414c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004150:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004154:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004158:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800415c:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8004160:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004164:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004168:	ee74 0a22 	vadd.f32	s1, s8, s5
 800416c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004170:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004174:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004178:	ee32 4a64 	vsub.f32	s8, s4, s9
 800417c:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004180:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004184:	ee33 9a49 	vsub.f32	s18, s6, s18
 8004188:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800418c:	ee35 3a85 	vadd.f32	s6, s11, s10
 8004190:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004194:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004198:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800419c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80041a0:	ee30 7a68 	vsub.f32	s14, s0, s17
 80041a4:	ee35 8a03 	vadd.f32	s16, s10, s6
 80041a8:	ee38 0a80 	vadd.f32	s0, s17, s0
 80041ac:	ee73 3a82 	vadd.f32	s7, s7, s4
 80041b0:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80041b4:	ed9d 2a00 	vldr	s4, [sp]
 80041b8:	eddd 1a01 	vldr	s3, [sp, #4]
 80041bc:	ee35 5a43 	vsub.f32	s10, s10, s6
 80041c0:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80041c4:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80041c8:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80041cc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80041d0:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80041d4:	ee76 5a49 	vsub.f32	s11, s12, s18
 80041d8:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80041dc:	ee39 6a06 	vadd.f32	s12, s18, s12
 80041e0:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80041e4:	ee21 4a84 	vmul.f32	s8, s3, s8
 80041e8:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80041ec:	ee22 7a07 	vmul.f32	s14, s4, s14
 80041f0:	ee22 2a08 	vmul.f32	s4, s4, s16
 80041f4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80041f8:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80041fc:	ee31 1a09 	vadd.f32	s2, s2, s18
 8004200:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8004204:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8004208:	ee74 0a60 	vsub.f32	s1, s8, s1
 800420c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004210:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8004214:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8004218:	ee72 1a21 	vadd.f32	s3, s4, s3
 800421c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8004220:	ee38 2a89 	vadd.f32	s4, s17, s18
 8004224:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8004228:	ee38 8a04 	vadd.f32	s16, s16, s8
 800422c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8004230:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8004234:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8004238:	eddd 5a02 	vldr	s11, [sp, #8]
 800423c:	edc6 fa00 	vstr	s31, [r6]
 8004240:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8004244:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004248:	ee30 0a45 	vsub.f32	s0, s0, s10
 800424c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8004250:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8004254:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8004258:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800425c:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8004260:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004264:	ee74 4a89 	vadd.f32	s9, s9, s18
 8004268:	ee34 3a43 	vsub.f32	s6, s8, s6
 800426c:	ee78 8a85 	vadd.f32	s17, s17, s10
 8004270:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004274:	44f4      	add	ip, lr
 8004276:	45e2      	cmp	sl, ip
 8004278:	edc3 3a00 	vstr	s7, [r3]
 800427c:	edc3 6a01 	vstr	s13, [r3, #4]
 8004280:	444e      	add	r6, r9
 8004282:	ed07 1a01 	vstr	s2, [r7, #-4]
 8004286:	edc7 0a00 	vstr	s1, [r7]
 800428a:	444b      	add	r3, r9
 800428c:	ed80 2a00 	vstr	s4, [r0]
 8004290:	edc0 2a01 	vstr	s5, [r0, #4]
 8004294:	444f      	add	r7, r9
 8004296:	edc2 1a00 	vstr	s3, [r2]
 800429a:	ed82 7a01 	vstr	s14, [r2, #4]
 800429e:	4448      	add	r0, r9
 80042a0:	ed85 8a00 	vstr	s16, [r5]
 80042a4:	ed85 0a01 	vstr	s0, [r5, #4]
 80042a8:	444a      	add	r2, r9
 80042aa:	edc1 4a00 	vstr	s9, [r1]
 80042ae:	444d      	add	r5, r9
 80042b0:	ed81 3a01 	vstr	s6, [r1, #4]
 80042b4:	edc4 8a00 	vstr	s17, [r4]
 80042b8:	ed84 6a01 	vstr	s12, [r4, #4]
 80042bc:	4449      	add	r1, r9
 80042be:	444c      	add	r4, r9
 80042c0:	f63f aeea 	bhi.w	8004098 <arm_radix8_butterfly_f32+0x318>
 80042c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c6:	3308      	adds	r3, #8
 80042c8:	930a      	str	r3, [sp, #40]	; 0x28
 80042ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042cc:	3308      	adds	r3, #8
 80042ce:	9309      	str	r3, [sp, #36]	; 0x24
 80042d0:	9b08      	ldr	r3, [sp, #32]
 80042d2:	3308      	adds	r3, #8
 80042d4:	9308      	str	r3, [sp, #32]
 80042d6:	9b07      	ldr	r3, [sp, #28]
 80042d8:	3308      	adds	r3, #8
 80042da:	9307      	str	r3, [sp, #28]
 80042dc:	9b06      	ldr	r3, [sp, #24]
 80042de:	3308      	adds	r3, #8
 80042e0:	9306      	str	r3, [sp, #24]
 80042e2:	9b05      	ldr	r3, [sp, #20]
 80042e4:	3308      	adds	r3, #8
 80042e6:	9305      	str	r3, [sp, #20]
 80042e8:	9b04      	ldr	r3, [sp, #16]
 80042ea:	3308      	adds	r3, #8
 80042ec:	9304      	str	r3, [sp, #16]
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	3308      	adds	r3, #8
 80042f2:	9303      	str	r3, [sp, #12]
 80042f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042f6:	f108 0801 	add.w	r8, r8, #1
 80042fa:	4543      	cmp	r3, r8
 80042fc:	f47f ae72 	bne.w	8003fe4 <arm_radix8_butterfly_f32+0x264>
 8004300:	469b      	mov	fp, r3
 8004302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	b29b      	uxth	r3, r3
 8004308:	46d1      	mov	r9, sl
 800430a:	930e      	str	r3, [sp, #56]	; 0x38
 800430c:	e547      	b.n	8003d9e <arm_radix8_butterfly_f32+0x1e>
 800430e:	b013      	add	sp, #76	; 0x4c
 8004310:	ecbd 8b10 	vpop	{d8-d15}
 8004314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004318 <__errno>:
 8004318:	4b01      	ldr	r3, [pc, #4]	; (8004320 <__errno+0x8>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000014 	.word	0x20000014

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4e0d      	ldr	r6, [pc, #52]	; (800435c <__libc_init_array+0x38>)
 8004328:	4c0d      	ldr	r4, [pc, #52]	; (8004360 <__libc_init_array+0x3c>)
 800432a:	1ba4      	subs	r4, r4, r6
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	2500      	movs	r5, #0
 8004330:	42a5      	cmp	r5, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	4e0b      	ldr	r6, [pc, #44]	; (8004364 <__libc_init_array+0x40>)
 8004336:	4c0c      	ldr	r4, [pc, #48]	; (8004368 <__libc_init_array+0x44>)
 8004338:	f002 f914 	bl	8006564 <_init>
 800433c:	1ba4      	subs	r4, r4, r6
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	2500      	movs	r5, #0
 8004342:	42a5      	cmp	r5, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800434c:	4798      	blx	r3
 800434e:	3501      	adds	r5, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004356:	4798      	blx	r3
 8004358:	3501      	adds	r5, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	0801bd48 	.word	0x0801bd48
 8004360:	0801bd48 	.word	0x0801bd48
 8004364:	0801bd48 	.word	0x0801bd48
 8004368:	0801bd4c 	.word	0x0801bd4c

0800436c <memset>:
 800436c:	4402      	add	r2, r0
 800436e:	4603      	mov	r3, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <iprintf>:
 800437c:	b40f      	push	{r0, r1, r2, r3}
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <iprintf+0x2c>)
 8004380:	b513      	push	{r0, r1, r4, lr}
 8004382:	681c      	ldr	r4, [r3, #0]
 8004384:	b124      	cbz	r4, 8004390 <iprintf+0x14>
 8004386:	69a3      	ldr	r3, [r4, #24]
 8004388:	b913      	cbnz	r3, 8004390 <iprintf+0x14>
 800438a:	4620      	mov	r0, r4
 800438c:	f000 f84e 	bl	800442c <__sinit>
 8004390:	ab05      	add	r3, sp, #20
 8004392:	9a04      	ldr	r2, [sp, #16]
 8004394:	68a1      	ldr	r1, [r4, #8]
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	4620      	mov	r0, r4
 800439a:	f000 f955 	bl	8004648 <_vfiprintf_r>
 800439e:	b002      	add	sp, #8
 80043a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a4:	b004      	add	sp, #16
 80043a6:	4770      	bx	lr
 80043a8:	20000014 	.word	0x20000014

080043ac <std>:
 80043ac:	2300      	movs	r3, #0
 80043ae:	b510      	push	{r4, lr}
 80043b0:	4604      	mov	r4, r0
 80043b2:	e9c0 3300 	strd	r3, r3, [r0]
 80043b6:	6083      	str	r3, [r0, #8]
 80043b8:	8181      	strh	r1, [r0, #12]
 80043ba:	6643      	str	r3, [r0, #100]	; 0x64
 80043bc:	81c2      	strh	r2, [r0, #14]
 80043be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043c2:	6183      	str	r3, [r0, #24]
 80043c4:	4619      	mov	r1, r3
 80043c6:	2208      	movs	r2, #8
 80043c8:	305c      	adds	r0, #92	; 0x5c
 80043ca:	f7ff ffcf 	bl	800436c <memset>
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <std+0x38>)
 80043d0:	6263      	str	r3, [r4, #36]	; 0x24
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <std+0x3c>)
 80043d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <std+0x40>)
 80043d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <std+0x44>)
 80043dc:	6224      	str	r4, [r4, #32]
 80043de:	6323      	str	r3, [r4, #48]	; 0x30
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	bf00      	nop
 80043e4:	08004ba5 	.word	0x08004ba5
 80043e8:	08004bc7 	.word	0x08004bc7
 80043ec:	08004bff 	.word	0x08004bff
 80043f0:	08004c23 	.word	0x08004c23

080043f4 <_cleanup_r>:
 80043f4:	4901      	ldr	r1, [pc, #4]	; (80043fc <_cleanup_r+0x8>)
 80043f6:	f000 b885 	b.w	8004504 <_fwalk_reent>
 80043fa:	bf00      	nop
 80043fc:	08004efd 	.word	0x08004efd

08004400 <__sfmoreglue>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	1e4a      	subs	r2, r1, #1
 8004404:	2568      	movs	r5, #104	; 0x68
 8004406:	4355      	muls	r5, r2
 8004408:	460e      	mov	r6, r1
 800440a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800440e:	f000 f897 	bl	8004540 <_malloc_r>
 8004412:	4604      	mov	r4, r0
 8004414:	b140      	cbz	r0, 8004428 <__sfmoreglue+0x28>
 8004416:	2100      	movs	r1, #0
 8004418:	e9c0 1600 	strd	r1, r6, [r0]
 800441c:	300c      	adds	r0, #12
 800441e:	60a0      	str	r0, [r4, #8]
 8004420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004424:	f7ff ffa2 	bl	800436c <memset>
 8004428:	4620      	mov	r0, r4
 800442a:	bd70      	pop	{r4, r5, r6, pc}

0800442c <__sinit>:
 800442c:	6983      	ldr	r3, [r0, #24]
 800442e:	b510      	push	{r4, lr}
 8004430:	4604      	mov	r4, r0
 8004432:	bb33      	cbnz	r3, 8004482 <__sinit+0x56>
 8004434:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004438:	6503      	str	r3, [r0, #80]	; 0x50
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <__sinit+0x58>)
 800443c:	4a12      	ldr	r2, [pc, #72]	; (8004488 <__sinit+0x5c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6282      	str	r2, [r0, #40]	; 0x28
 8004442:	4298      	cmp	r0, r3
 8004444:	bf04      	itt	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	6183      	streq	r3, [r0, #24]
 800444a:	f000 f81f 	bl	800448c <__sfp>
 800444e:	6060      	str	r0, [r4, #4]
 8004450:	4620      	mov	r0, r4
 8004452:	f000 f81b 	bl	800448c <__sfp>
 8004456:	60a0      	str	r0, [r4, #8]
 8004458:	4620      	mov	r0, r4
 800445a:	f000 f817 	bl	800448c <__sfp>
 800445e:	2200      	movs	r2, #0
 8004460:	60e0      	str	r0, [r4, #12]
 8004462:	2104      	movs	r1, #4
 8004464:	6860      	ldr	r0, [r4, #4]
 8004466:	f7ff ffa1 	bl	80043ac <std>
 800446a:	2201      	movs	r2, #1
 800446c:	2109      	movs	r1, #9
 800446e:	68a0      	ldr	r0, [r4, #8]
 8004470:	f7ff ff9c 	bl	80043ac <std>
 8004474:	2202      	movs	r2, #2
 8004476:	2112      	movs	r1, #18
 8004478:	68e0      	ldr	r0, [r4, #12]
 800447a:	f7ff ff97 	bl	80043ac <std>
 800447e:	2301      	movs	r3, #1
 8004480:	61a3      	str	r3, [r4, #24]
 8004482:	bd10      	pop	{r4, pc}
 8004484:	0801ba88 	.word	0x0801ba88
 8004488:	080043f5 	.word	0x080043f5

0800448c <__sfp>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <__sfp+0x70>)
 8004490:	681e      	ldr	r6, [r3, #0]
 8004492:	69b3      	ldr	r3, [r6, #24]
 8004494:	4607      	mov	r7, r0
 8004496:	b913      	cbnz	r3, 800449e <__sfp+0x12>
 8004498:	4630      	mov	r0, r6
 800449a:	f7ff ffc7 	bl	800442c <__sinit>
 800449e:	3648      	adds	r6, #72	; 0x48
 80044a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	d503      	bpl.n	80044b0 <__sfp+0x24>
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	b133      	cbz	r3, 80044ba <__sfp+0x2e>
 80044ac:	6836      	ldr	r6, [r6, #0]
 80044ae:	e7f7      	b.n	80044a0 <__sfp+0x14>
 80044b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044b4:	b16d      	cbz	r5, 80044d2 <__sfp+0x46>
 80044b6:	3468      	adds	r4, #104	; 0x68
 80044b8:	e7f4      	b.n	80044a4 <__sfp+0x18>
 80044ba:	2104      	movs	r1, #4
 80044bc:	4638      	mov	r0, r7
 80044be:	f7ff ff9f 	bl	8004400 <__sfmoreglue>
 80044c2:	6030      	str	r0, [r6, #0]
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d1f1      	bne.n	80044ac <__sfp+0x20>
 80044c8:	230c      	movs	r3, #12
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4604      	mov	r4, r0
 80044ce:	4620      	mov	r0, r4
 80044d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <__sfp+0x74>)
 80044d4:	6665      	str	r5, [r4, #100]	; 0x64
 80044d6:	e9c4 5500 	strd	r5, r5, [r4]
 80044da:	60a5      	str	r5, [r4, #8]
 80044dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80044e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80044e4:	2208      	movs	r2, #8
 80044e6:	4629      	mov	r1, r5
 80044e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ec:	f7ff ff3e 	bl	800436c <memset>
 80044f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044f8:	e7e9      	b.n	80044ce <__sfp+0x42>
 80044fa:	bf00      	nop
 80044fc:	0801ba88 	.word	0x0801ba88
 8004500:	ffff0001 	.word	0xffff0001

08004504 <_fwalk_reent>:
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	4680      	mov	r8, r0
 800450a:	4689      	mov	r9, r1
 800450c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004510:	2600      	movs	r6, #0
 8004512:	b914      	cbnz	r4, 800451a <_fwalk_reent+0x16>
 8004514:	4630      	mov	r0, r6
 8004516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800451a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800451e:	3f01      	subs	r7, #1
 8004520:	d501      	bpl.n	8004526 <_fwalk_reent+0x22>
 8004522:	6824      	ldr	r4, [r4, #0]
 8004524:	e7f5      	b.n	8004512 <_fwalk_reent+0xe>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d907      	bls.n	800453c <_fwalk_reent+0x38>
 800452c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004530:	3301      	adds	r3, #1
 8004532:	d003      	beq.n	800453c <_fwalk_reent+0x38>
 8004534:	4629      	mov	r1, r5
 8004536:	4640      	mov	r0, r8
 8004538:	47c8      	blx	r9
 800453a:	4306      	orrs	r6, r0
 800453c:	3568      	adds	r5, #104	; 0x68
 800453e:	e7ee      	b.n	800451e <_fwalk_reent+0x1a>

08004540 <_malloc_r>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	1ccd      	adds	r5, r1, #3
 8004544:	f025 0503 	bic.w	r5, r5, #3
 8004548:	3508      	adds	r5, #8
 800454a:	2d0c      	cmp	r5, #12
 800454c:	bf38      	it	cc
 800454e:	250c      	movcc	r5, #12
 8004550:	2d00      	cmp	r5, #0
 8004552:	4606      	mov	r6, r0
 8004554:	db01      	blt.n	800455a <_malloc_r+0x1a>
 8004556:	42a9      	cmp	r1, r5
 8004558:	d903      	bls.n	8004562 <_malloc_r+0x22>
 800455a:	230c      	movs	r3, #12
 800455c:	6033      	str	r3, [r6, #0]
 800455e:	2000      	movs	r0, #0
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	f000 fd6b 	bl	800503c <__malloc_lock>
 8004566:	4a21      	ldr	r2, [pc, #132]	; (80045ec <_malloc_r+0xac>)
 8004568:	6814      	ldr	r4, [r2, #0]
 800456a:	4621      	mov	r1, r4
 800456c:	b991      	cbnz	r1, 8004594 <_malloc_r+0x54>
 800456e:	4c20      	ldr	r4, [pc, #128]	; (80045f0 <_malloc_r+0xb0>)
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	b91b      	cbnz	r3, 800457c <_malloc_r+0x3c>
 8004574:	4630      	mov	r0, r6
 8004576:	f000 fb05 	bl	8004b84 <_sbrk_r>
 800457a:	6020      	str	r0, [r4, #0]
 800457c:	4629      	mov	r1, r5
 800457e:	4630      	mov	r0, r6
 8004580:	f000 fb00 	bl	8004b84 <_sbrk_r>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d124      	bne.n	80045d2 <_malloc_r+0x92>
 8004588:	230c      	movs	r3, #12
 800458a:	6033      	str	r3, [r6, #0]
 800458c:	4630      	mov	r0, r6
 800458e:	f000 fd56 	bl	800503e <__malloc_unlock>
 8004592:	e7e4      	b.n	800455e <_malloc_r+0x1e>
 8004594:	680b      	ldr	r3, [r1, #0]
 8004596:	1b5b      	subs	r3, r3, r5
 8004598:	d418      	bmi.n	80045cc <_malloc_r+0x8c>
 800459a:	2b0b      	cmp	r3, #11
 800459c:	d90f      	bls.n	80045be <_malloc_r+0x7e>
 800459e:	600b      	str	r3, [r1, #0]
 80045a0:	50cd      	str	r5, [r1, r3]
 80045a2:	18cc      	adds	r4, r1, r3
 80045a4:	4630      	mov	r0, r6
 80045a6:	f000 fd4a 	bl	800503e <__malloc_unlock>
 80045aa:	f104 000b 	add.w	r0, r4, #11
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	f020 0007 	bic.w	r0, r0, #7
 80045b4:	1ac3      	subs	r3, r0, r3
 80045b6:	d0d3      	beq.n	8004560 <_malloc_r+0x20>
 80045b8:	425a      	negs	r2, r3
 80045ba:	50e2      	str	r2, [r4, r3]
 80045bc:	e7d0      	b.n	8004560 <_malloc_r+0x20>
 80045be:	428c      	cmp	r4, r1
 80045c0:	684b      	ldr	r3, [r1, #4]
 80045c2:	bf16      	itet	ne
 80045c4:	6063      	strne	r3, [r4, #4]
 80045c6:	6013      	streq	r3, [r2, #0]
 80045c8:	460c      	movne	r4, r1
 80045ca:	e7eb      	b.n	80045a4 <_malloc_r+0x64>
 80045cc:	460c      	mov	r4, r1
 80045ce:	6849      	ldr	r1, [r1, #4]
 80045d0:	e7cc      	b.n	800456c <_malloc_r+0x2c>
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d005      	beq.n	80045e8 <_malloc_r+0xa8>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 fad0 	bl	8004b84 <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d0cf      	beq.n	8004588 <_malloc_r+0x48>
 80045e8:	6025      	str	r5, [r4, #0]
 80045ea:	e7db      	b.n	80045a4 <_malloc_r+0x64>
 80045ec:	2000009c 	.word	0x2000009c
 80045f0:	200000a0 	.word	0x200000a0

080045f4 <__sfputc_r>:
 80045f4:	6893      	ldr	r3, [r2, #8]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	b410      	push	{r4}
 80045fc:	6093      	str	r3, [r2, #8]
 80045fe:	da08      	bge.n	8004612 <__sfputc_r+0x1e>
 8004600:	6994      	ldr	r4, [r2, #24]
 8004602:	42a3      	cmp	r3, r4
 8004604:	db01      	blt.n	800460a <__sfputc_r+0x16>
 8004606:	290a      	cmp	r1, #10
 8004608:	d103      	bne.n	8004612 <__sfputc_r+0x1e>
 800460a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800460e:	f000 bb0d 	b.w	8004c2c <__swbuf_r>
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	1c58      	adds	r0, r3, #1
 8004616:	6010      	str	r0, [r2, #0]
 8004618:	7019      	strb	r1, [r3, #0]
 800461a:	4608      	mov	r0, r1
 800461c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004620:	4770      	bx	lr

08004622 <__sfputs_r>:
 8004622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004624:	4606      	mov	r6, r0
 8004626:	460f      	mov	r7, r1
 8004628:	4614      	mov	r4, r2
 800462a:	18d5      	adds	r5, r2, r3
 800462c:	42ac      	cmp	r4, r5
 800462e:	d101      	bne.n	8004634 <__sfputs_r+0x12>
 8004630:	2000      	movs	r0, #0
 8004632:	e007      	b.n	8004644 <__sfputs_r+0x22>
 8004634:	463a      	mov	r2, r7
 8004636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463a:	4630      	mov	r0, r6
 800463c:	f7ff ffda 	bl	80045f4 <__sfputc_r>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d1f3      	bne.n	800462c <__sfputs_r+0xa>
 8004644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004648 <_vfiprintf_r>:
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	460c      	mov	r4, r1
 800464e:	b09d      	sub	sp, #116	; 0x74
 8004650:	4617      	mov	r7, r2
 8004652:	461d      	mov	r5, r3
 8004654:	4606      	mov	r6, r0
 8004656:	b118      	cbz	r0, 8004660 <_vfiprintf_r+0x18>
 8004658:	6983      	ldr	r3, [r0, #24]
 800465a:	b90b      	cbnz	r3, 8004660 <_vfiprintf_r+0x18>
 800465c:	f7ff fee6 	bl	800442c <__sinit>
 8004660:	4b7c      	ldr	r3, [pc, #496]	; (8004854 <_vfiprintf_r+0x20c>)
 8004662:	429c      	cmp	r4, r3
 8004664:	d158      	bne.n	8004718 <_vfiprintf_r+0xd0>
 8004666:	6874      	ldr	r4, [r6, #4]
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	0718      	lsls	r0, r3, #28
 800466c:	d55e      	bpl.n	800472c <_vfiprintf_r+0xe4>
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05b      	beq.n	800472c <_vfiprintf_r+0xe4>
 8004674:	2300      	movs	r3, #0
 8004676:	9309      	str	r3, [sp, #36]	; 0x24
 8004678:	2320      	movs	r3, #32
 800467a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800467e:	2330      	movs	r3, #48	; 0x30
 8004680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004684:	9503      	str	r5, [sp, #12]
 8004686:	f04f 0b01 	mov.w	fp, #1
 800468a:	46b8      	mov	r8, r7
 800468c:	4645      	mov	r5, r8
 800468e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004692:	b10b      	cbz	r3, 8004698 <_vfiprintf_r+0x50>
 8004694:	2b25      	cmp	r3, #37	; 0x25
 8004696:	d154      	bne.n	8004742 <_vfiprintf_r+0xfa>
 8004698:	ebb8 0a07 	subs.w	sl, r8, r7
 800469c:	d00b      	beq.n	80046b6 <_vfiprintf_r+0x6e>
 800469e:	4653      	mov	r3, sl
 80046a0:	463a      	mov	r2, r7
 80046a2:	4621      	mov	r1, r4
 80046a4:	4630      	mov	r0, r6
 80046a6:	f7ff ffbc 	bl	8004622 <__sfputs_r>
 80046aa:	3001      	adds	r0, #1
 80046ac:	f000 80c2 	beq.w	8004834 <_vfiprintf_r+0x1ec>
 80046b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b2:	4453      	add	r3, sl
 80046b4:	9309      	str	r3, [sp, #36]	; 0x24
 80046b6:	f898 3000 	ldrb.w	r3, [r8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80ba 	beq.w	8004834 <_vfiprintf_r+0x1ec>
 80046c0:	2300      	movs	r3, #0
 80046c2:	f04f 32ff 	mov.w	r2, #4294967295
 80046c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	9307      	str	r3, [sp, #28]
 80046ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046d2:	931a      	str	r3, [sp, #104]	; 0x68
 80046d4:	46a8      	mov	r8, r5
 80046d6:	2205      	movs	r2, #5
 80046d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80046dc:	485e      	ldr	r0, [pc, #376]	; (8004858 <_vfiprintf_r+0x210>)
 80046de:	f7fb fd97 	bl	8000210 <memchr>
 80046e2:	9b04      	ldr	r3, [sp, #16]
 80046e4:	bb78      	cbnz	r0, 8004746 <_vfiprintf_r+0xfe>
 80046e6:	06d9      	lsls	r1, r3, #27
 80046e8:	bf44      	itt	mi
 80046ea:	2220      	movmi	r2, #32
 80046ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046f0:	071a      	lsls	r2, r3, #28
 80046f2:	bf44      	itt	mi
 80046f4:	222b      	movmi	r2, #43	; 0x2b
 80046f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046fa:	782a      	ldrb	r2, [r5, #0]
 80046fc:	2a2a      	cmp	r2, #42	; 0x2a
 80046fe:	d02a      	beq.n	8004756 <_vfiprintf_r+0x10e>
 8004700:	9a07      	ldr	r2, [sp, #28]
 8004702:	46a8      	mov	r8, r5
 8004704:	2000      	movs	r0, #0
 8004706:	250a      	movs	r5, #10
 8004708:	4641      	mov	r1, r8
 800470a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800470e:	3b30      	subs	r3, #48	; 0x30
 8004710:	2b09      	cmp	r3, #9
 8004712:	d969      	bls.n	80047e8 <_vfiprintf_r+0x1a0>
 8004714:	b360      	cbz	r0, 8004770 <_vfiprintf_r+0x128>
 8004716:	e024      	b.n	8004762 <_vfiprintf_r+0x11a>
 8004718:	4b50      	ldr	r3, [pc, #320]	; (800485c <_vfiprintf_r+0x214>)
 800471a:	429c      	cmp	r4, r3
 800471c:	d101      	bne.n	8004722 <_vfiprintf_r+0xda>
 800471e:	68b4      	ldr	r4, [r6, #8]
 8004720:	e7a2      	b.n	8004668 <_vfiprintf_r+0x20>
 8004722:	4b4f      	ldr	r3, [pc, #316]	; (8004860 <_vfiprintf_r+0x218>)
 8004724:	429c      	cmp	r4, r3
 8004726:	bf08      	it	eq
 8004728:	68f4      	ldreq	r4, [r6, #12]
 800472a:	e79d      	b.n	8004668 <_vfiprintf_r+0x20>
 800472c:	4621      	mov	r1, r4
 800472e:	4630      	mov	r0, r6
 8004730:	f000 fae0 	bl	8004cf4 <__swsetup_r>
 8004734:	2800      	cmp	r0, #0
 8004736:	d09d      	beq.n	8004674 <_vfiprintf_r+0x2c>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	b01d      	add	sp, #116	; 0x74
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	46a8      	mov	r8, r5
 8004744:	e7a2      	b.n	800468c <_vfiprintf_r+0x44>
 8004746:	4a44      	ldr	r2, [pc, #272]	; (8004858 <_vfiprintf_r+0x210>)
 8004748:	1a80      	subs	r0, r0, r2
 800474a:	fa0b f000 	lsl.w	r0, fp, r0
 800474e:	4318      	orrs	r0, r3
 8004750:	9004      	str	r0, [sp, #16]
 8004752:	4645      	mov	r5, r8
 8004754:	e7be      	b.n	80046d4 <_vfiprintf_r+0x8c>
 8004756:	9a03      	ldr	r2, [sp, #12]
 8004758:	1d11      	adds	r1, r2, #4
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	9103      	str	r1, [sp, #12]
 800475e:	2a00      	cmp	r2, #0
 8004760:	db01      	blt.n	8004766 <_vfiprintf_r+0x11e>
 8004762:	9207      	str	r2, [sp, #28]
 8004764:	e004      	b.n	8004770 <_vfiprintf_r+0x128>
 8004766:	4252      	negs	r2, r2
 8004768:	f043 0302 	orr.w	r3, r3, #2
 800476c:	9207      	str	r2, [sp, #28]
 800476e:	9304      	str	r3, [sp, #16]
 8004770:	f898 3000 	ldrb.w	r3, [r8]
 8004774:	2b2e      	cmp	r3, #46	; 0x2e
 8004776:	d10e      	bne.n	8004796 <_vfiprintf_r+0x14e>
 8004778:	f898 3001 	ldrb.w	r3, [r8, #1]
 800477c:	2b2a      	cmp	r3, #42	; 0x2a
 800477e:	d138      	bne.n	80047f2 <_vfiprintf_r+0x1aa>
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	9203      	str	r2, [sp, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	bfb8      	it	lt
 800478c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004790:	f108 0802 	add.w	r8, r8, #2
 8004794:	9305      	str	r3, [sp, #20]
 8004796:	4d33      	ldr	r5, [pc, #204]	; (8004864 <_vfiprintf_r+0x21c>)
 8004798:	f898 1000 	ldrb.w	r1, [r8]
 800479c:	2203      	movs	r2, #3
 800479e:	4628      	mov	r0, r5
 80047a0:	f7fb fd36 	bl	8000210 <memchr>
 80047a4:	b140      	cbz	r0, 80047b8 <_vfiprintf_r+0x170>
 80047a6:	2340      	movs	r3, #64	; 0x40
 80047a8:	1b40      	subs	r0, r0, r5
 80047aa:	fa03 f000 	lsl.w	r0, r3, r0
 80047ae:	9b04      	ldr	r3, [sp, #16]
 80047b0:	4303      	orrs	r3, r0
 80047b2:	f108 0801 	add.w	r8, r8, #1
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	f898 1000 	ldrb.w	r1, [r8]
 80047bc:	482a      	ldr	r0, [pc, #168]	; (8004868 <_vfiprintf_r+0x220>)
 80047be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047c2:	2206      	movs	r2, #6
 80047c4:	f108 0701 	add.w	r7, r8, #1
 80047c8:	f7fb fd22 	bl	8000210 <memchr>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d037      	beq.n	8004840 <_vfiprintf_r+0x1f8>
 80047d0:	4b26      	ldr	r3, [pc, #152]	; (800486c <_vfiprintf_r+0x224>)
 80047d2:	bb1b      	cbnz	r3, 800481c <_vfiprintf_r+0x1d4>
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	3307      	adds	r3, #7
 80047d8:	f023 0307 	bic.w	r3, r3, #7
 80047dc:	3308      	adds	r3, #8
 80047de:	9303      	str	r3, [sp, #12]
 80047e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e2:	444b      	add	r3, r9
 80047e4:	9309      	str	r3, [sp, #36]	; 0x24
 80047e6:	e750      	b.n	800468a <_vfiprintf_r+0x42>
 80047e8:	fb05 3202 	mla	r2, r5, r2, r3
 80047ec:	2001      	movs	r0, #1
 80047ee:	4688      	mov	r8, r1
 80047f0:	e78a      	b.n	8004708 <_vfiprintf_r+0xc0>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f108 0801 	add.w	r8, r8, #1
 80047f8:	9305      	str	r3, [sp, #20]
 80047fa:	4619      	mov	r1, r3
 80047fc:	250a      	movs	r5, #10
 80047fe:	4640      	mov	r0, r8
 8004800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004804:	3a30      	subs	r2, #48	; 0x30
 8004806:	2a09      	cmp	r2, #9
 8004808:	d903      	bls.n	8004812 <_vfiprintf_r+0x1ca>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0c3      	beq.n	8004796 <_vfiprintf_r+0x14e>
 800480e:	9105      	str	r1, [sp, #20]
 8004810:	e7c1      	b.n	8004796 <_vfiprintf_r+0x14e>
 8004812:	fb05 2101 	mla	r1, r5, r1, r2
 8004816:	2301      	movs	r3, #1
 8004818:	4680      	mov	r8, r0
 800481a:	e7f0      	b.n	80047fe <_vfiprintf_r+0x1b6>
 800481c:	ab03      	add	r3, sp, #12
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	4622      	mov	r2, r4
 8004822:	4b13      	ldr	r3, [pc, #76]	; (8004870 <_vfiprintf_r+0x228>)
 8004824:	a904      	add	r1, sp, #16
 8004826:	4630      	mov	r0, r6
 8004828:	f3af 8000 	nop.w
 800482c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004830:	4681      	mov	r9, r0
 8004832:	d1d5      	bne.n	80047e0 <_vfiprintf_r+0x198>
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	065b      	lsls	r3, r3, #25
 8004838:	f53f af7e 	bmi.w	8004738 <_vfiprintf_r+0xf0>
 800483c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800483e:	e77d      	b.n	800473c <_vfiprintf_r+0xf4>
 8004840:	ab03      	add	r3, sp, #12
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	4622      	mov	r2, r4
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <_vfiprintf_r+0x228>)
 8004848:	a904      	add	r1, sp, #16
 800484a:	4630      	mov	r0, r6
 800484c:	f000 f888 	bl	8004960 <_printf_i>
 8004850:	e7ec      	b.n	800482c <_vfiprintf_r+0x1e4>
 8004852:	bf00      	nop
 8004854:	0801baac 	.word	0x0801baac
 8004858:	0801baec 	.word	0x0801baec
 800485c:	0801bacc 	.word	0x0801bacc
 8004860:	0801ba8c 	.word	0x0801ba8c
 8004864:	0801baf2 	.word	0x0801baf2
 8004868:	0801baf6 	.word	0x0801baf6
 800486c:	00000000 	.word	0x00000000
 8004870:	08004623 	.word	0x08004623

08004874 <_printf_common>:
 8004874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	4691      	mov	r9, r2
 800487a:	461f      	mov	r7, r3
 800487c:	688a      	ldr	r2, [r1, #8]
 800487e:	690b      	ldr	r3, [r1, #16]
 8004880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004884:	4293      	cmp	r3, r2
 8004886:	bfb8      	it	lt
 8004888:	4613      	movlt	r3, r2
 800488a:	f8c9 3000 	str.w	r3, [r9]
 800488e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004892:	4606      	mov	r6, r0
 8004894:	460c      	mov	r4, r1
 8004896:	b112      	cbz	r2, 800489e <_printf_common+0x2a>
 8004898:	3301      	adds	r3, #1
 800489a:	f8c9 3000 	str.w	r3, [r9]
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	0699      	lsls	r1, r3, #26
 80048a2:	bf42      	ittt	mi
 80048a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048a8:	3302      	addmi	r3, #2
 80048aa:	f8c9 3000 	strmi.w	r3, [r9]
 80048ae:	6825      	ldr	r5, [r4, #0]
 80048b0:	f015 0506 	ands.w	r5, r5, #6
 80048b4:	d107      	bne.n	80048c6 <_printf_common+0x52>
 80048b6:	f104 0a19 	add.w	sl, r4, #25
 80048ba:	68e3      	ldr	r3, [r4, #12]
 80048bc:	f8d9 2000 	ldr.w	r2, [r9]
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	42ab      	cmp	r3, r5
 80048c4:	dc28      	bgt.n	8004918 <_printf_common+0xa4>
 80048c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	3300      	adds	r3, #0
 80048ce:	bf18      	it	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	0692      	lsls	r2, r2, #26
 80048d4:	d42d      	bmi.n	8004932 <_printf_common+0xbe>
 80048d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048da:	4639      	mov	r1, r7
 80048dc:	4630      	mov	r0, r6
 80048de:	47c0      	blx	r8
 80048e0:	3001      	adds	r0, #1
 80048e2:	d020      	beq.n	8004926 <_printf_common+0xb2>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	68e5      	ldr	r5, [r4, #12]
 80048e8:	f8d9 2000 	ldr.w	r2, [r9]
 80048ec:	f003 0306 	and.w	r3, r3, #6
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	bf08      	it	eq
 80048f4:	1aad      	subeq	r5, r5, r2
 80048f6:	68a3      	ldr	r3, [r4, #8]
 80048f8:	6922      	ldr	r2, [r4, #16]
 80048fa:	bf0c      	ite	eq
 80048fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004900:	2500      	movne	r5, #0
 8004902:	4293      	cmp	r3, r2
 8004904:	bfc4      	itt	gt
 8004906:	1a9b      	subgt	r3, r3, r2
 8004908:	18ed      	addgt	r5, r5, r3
 800490a:	f04f 0900 	mov.w	r9, #0
 800490e:	341a      	adds	r4, #26
 8004910:	454d      	cmp	r5, r9
 8004912:	d11a      	bne.n	800494a <_printf_common+0xd6>
 8004914:	2000      	movs	r0, #0
 8004916:	e008      	b.n	800492a <_printf_common+0xb6>
 8004918:	2301      	movs	r3, #1
 800491a:	4652      	mov	r2, sl
 800491c:	4639      	mov	r1, r7
 800491e:	4630      	mov	r0, r6
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d103      	bne.n	800492e <_printf_common+0xba>
 8004926:	f04f 30ff 	mov.w	r0, #4294967295
 800492a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492e:	3501      	adds	r5, #1
 8004930:	e7c3      	b.n	80048ba <_printf_common+0x46>
 8004932:	18e1      	adds	r1, r4, r3
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	2030      	movs	r0, #48	; 0x30
 8004938:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800493c:	4422      	add	r2, r4
 800493e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004946:	3302      	adds	r3, #2
 8004948:	e7c5      	b.n	80048d6 <_printf_common+0x62>
 800494a:	2301      	movs	r3, #1
 800494c:	4622      	mov	r2, r4
 800494e:	4639      	mov	r1, r7
 8004950:	4630      	mov	r0, r6
 8004952:	47c0      	blx	r8
 8004954:	3001      	adds	r0, #1
 8004956:	d0e6      	beq.n	8004926 <_printf_common+0xb2>
 8004958:	f109 0901 	add.w	r9, r9, #1
 800495c:	e7d8      	b.n	8004910 <_printf_common+0x9c>
	...

08004960 <_printf_i>:
 8004960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004964:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004968:	460c      	mov	r4, r1
 800496a:	7e09      	ldrb	r1, [r1, #24]
 800496c:	b085      	sub	sp, #20
 800496e:	296e      	cmp	r1, #110	; 0x6e
 8004970:	4617      	mov	r7, r2
 8004972:	4606      	mov	r6, r0
 8004974:	4698      	mov	r8, r3
 8004976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004978:	f000 80b3 	beq.w	8004ae2 <_printf_i+0x182>
 800497c:	d822      	bhi.n	80049c4 <_printf_i+0x64>
 800497e:	2963      	cmp	r1, #99	; 0x63
 8004980:	d036      	beq.n	80049f0 <_printf_i+0x90>
 8004982:	d80a      	bhi.n	800499a <_printf_i+0x3a>
 8004984:	2900      	cmp	r1, #0
 8004986:	f000 80b9 	beq.w	8004afc <_printf_i+0x19c>
 800498a:	2958      	cmp	r1, #88	; 0x58
 800498c:	f000 8083 	beq.w	8004a96 <_printf_i+0x136>
 8004990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004994:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004998:	e032      	b.n	8004a00 <_printf_i+0xa0>
 800499a:	2964      	cmp	r1, #100	; 0x64
 800499c:	d001      	beq.n	80049a2 <_printf_i+0x42>
 800499e:	2969      	cmp	r1, #105	; 0x69
 80049a0:	d1f6      	bne.n	8004990 <_printf_i+0x30>
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	6813      	ldr	r3, [r2, #0]
 80049a6:	0605      	lsls	r5, r0, #24
 80049a8:	f103 0104 	add.w	r1, r3, #4
 80049ac:	d52a      	bpl.n	8004a04 <_printf_i+0xa4>
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6011      	str	r1, [r2, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	da03      	bge.n	80049be <_printf_i+0x5e>
 80049b6:	222d      	movs	r2, #45	; 0x2d
 80049b8:	425b      	negs	r3, r3
 80049ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049be:	486f      	ldr	r0, [pc, #444]	; (8004b7c <_printf_i+0x21c>)
 80049c0:	220a      	movs	r2, #10
 80049c2:	e039      	b.n	8004a38 <_printf_i+0xd8>
 80049c4:	2973      	cmp	r1, #115	; 0x73
 80049c6:	f000 809d 	beq.w	8004b04 <_printf_i+0x1a4>
 80049ca:	d808      	bhi.n	80049de <_printf_i+0x7e>
 80049cc:	296f      	cmp	r1, #111	; 0x6f
 80049ce:	d020      	beq.n	8004a12 <_printf_i+0xb2>
 80049d0:	2970      	cmp	r1, #112	; 0x70
 80049d2:	d1dd      	bne.n	8004990 <_printf_i+0x30>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	f043 0320 	orr.w	r3, r3, #32
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	e003      	b.n	80049e6 <_printf_i+0x86>
 80049de:	2975      	cmp	r1, #117	; 0x75
 80049e0:	d017      	beq.n	8004a12 <_printf_i+0xb2>
 80049e2:	2978      	cmp	r1, #120	; 0x78
 80049e4:	d1d4      	bne.n	8004990 <_printf_i+0x30>
 80049e6:	2378      	movs	r3, #120	; 0x78
 80049e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049ec:	4864      	ldr	r0, [pc, #400]	; (8004b80 <_printf_i+0x220>)
 80049ee:	e055      	b.n	8004a9c <_printf_i+0x13c>
 80049f0:	6813      	ldr	r3, [r2, #0]
 80049f2:	1d19      	adds	r1, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6011      	str	r1, [r2, #0]
 80049f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a00:	2301      	movs	r3, #1
 8004a02:	e08c      	b.n	8004b1e <_printf_i+0x1be>
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6011      	str	r1, [r2, #0]
 8004a08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a0c:	bf18      	it	ne
 8004a0e:	b21b      	sxthne	r3, r3
 8004a10:	e7cf      	b.n	80049b2 <_printf_i+0x52>
 8004a12:	6813      	ldr	r3, [r2, #0]
 8004a14:	6825      	ldr	r5, [r4, #0]
 8004a16:	1d18      	adds	r0, r3, #4
 8004a18:	6010      	str	r0, [r2, #0]
 8004a1a:	0628      	lsls	r0, r5, #24
 8004a1c:	d501      	bpl.n	8004a22 <_printf_i+0xc2>
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	e002      	b.n	8004a28 <_printf_i+0xc8>
 8004a22:	0668      	lsls	r0, r5, #25
 8004a24:	d5fb      	bpl.n	8004a1e <_printf_i+0xbe>
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	4854      	ldr	r0, [pc, #336]	; (8004b7c <_printf_i+0x21c>)
 8004a2a:	296f      	cmp	r1, #111	; 0x6f
 8004a2c:	bf14      	ite	ne
 8004a2e:	220a      	movne	r2, #10
 8004a30:	2208      	moveq	r2, #8
 8004a32:	2100      	movs	r1, #0
 8004a34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a38:	6865      	ldr	r5, [r4, #4]
 8004a3a:	60a5      	str	r5, [r4, #8]
 8004a3c:	2d00      	cmp	r5, #0
 8004a3e:	f2c0 8095 	blt.w	8004b6c <_printf_i+0x20c>
 8004a42:	6821      	ldr	r1, [r4, #0]
 8004a44:	f021 0104 	bic.w	r1, r1, #4
 8004a48:	6021      	str	r1, [r4, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d13d      	bne.n	8004aca <_printf_i+0x16a>
 8004a4e:	2d00      	cmp	r5, #0
 8004a50:	f040 808e 	bne.w	8004b70 <_printf_i+0x210>
 8004a54:	4665      	mov	r5, ip
 8004a56:	2a08      	cmp	r2, #8
 8004a58:	d10b      	bne.n	8004a72 <_printf_i+0x112>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	07db      	lsls	r3, r3, #31
 8004a5e:	d508      	bpl.n	8004a72 <_printf_i+0x112>
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	bfde      	ittt	le
 8004a68:	2330      	movle	r3, #48	; 0x30
 8004a6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a72:	ebac 0305 	sub.w	r3, ip, r5
 8004a76:	6123      	str	r3, [r4, #16]
 8004a78:	f8cd 8000 	str.w	r8, [sp]
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	aa03      	add	r2, sp, #12
 8004a80:	4621      	mov	r1, r4
 8004a82:	4630      	mov	r0, r6
 8004a84:	f7ff fef6 	bl	8004874 <_printf_common>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d14d      	bne.n	8004b28 <_printf_i+0x1c8>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	b005      	add	sp, #20
 8004a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a96:	4839      	ldr	r0, [pc, #228]	; (8004b7c <_printf_i+0x21c>)
 8004a98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	6821      	ldr	r1, [r4, #0]
 8004aa0:	1d1d      	adds	r5, r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6015      	str	r5, [r2, #0]
 8004aa6:	060a      	lsls	r2, r1, #24
 8004aa8:	d50b      	bpl.n	8004ac2 <_printf_i+0x162>
 8004aaa:	07ca      	lsls	r2, r1, #31
 8004aac:	bf44      	itt	mi
 8004aae:	f041 0120 	orrmi.w	r1, r1, #32
 8004ab2:	6021      	strmi	r1, [r4, #0]
 8004ab4:	b91b      	cbnz	r3, 8004abe <_printf_i+0x15e>
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	f022 0220 	bic.w	r2, r2, #32
 8004abc:	6022      	str	r2, [r4, #0]
 8004abe:	2210      	movs	r2, #16
 8004ac0:	e7b7      	b.n	8004a32 <_printf_i+0xd2>
 8004ac2:	064d      	lsls	r5, r1, #25
 8004ac4:	bf48      	it	mi
 8004ac6:	b29b      	uxthmi	r3, r3
 8004ac8:	e7ef      	b.n	8004aaa <_printf_i+0x14a>
 8004aca:	4665      	mov	r5, ip
 8004acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ad0:	fb02 3311 	mls	r3, r2, r1, r3
 8004ad4:	5cc3      	ldrb	r3, [r0, r3]
 8004ad6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ada:	460b      	mov	r3, r1
 8004adc:	2900      	cmp	r1, #0
 8004ade:	d1f5      	bne.n	8004acc <_printf_i+0x16c>
 8004ae0:	e7b9      	b.n	8004a56 <_printf_i+0xf6>
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	6825      	ldr	r5, [r4, #0]
 8004ae6:	6961      	ldr	r1, [r4, #20]
 8004ae8:	1d18      	adds	r0, r3, #4
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	0628      	lsls	r0, r5, #24
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	d501      	bpl.n	8004af6 <_printf_i+0x196>
 8004af2:	6019      	str	r1, [r3, #0]
 8004af4:	e002      	b.n	8004afc <_printf_i+0x19c>
 8004af6:	066a      	lsls	r2, r5, #25
 8004af8:	d5fb      	bpl.n	8004af2 <_printf_i+0x192>
 8004afa:	8019      	strh	r1, [r3, #0]
 8004afc:	2300      	movs	r3, #0
 8004afe:	6123      	str	r3, [r4, #16]
 8004b00:	4665      	mov	r5, ip
 8004b02:	e7b9      	b.n	8004a78 <_printf_i+0x118>
 8004b04:	6813      	ldr	r3, [r2, #0]
 8004b06:	1d19      	adds	r1, r3, #4
 8004b08:	6011      	str	r1, [r2, #0]
 8004b0a:	681d      	ldr	r5, [r3, #0]
 8004b0c:	6862      	ldr	r2, [r4, #4]
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4628      	mov	r0, r5
 8004b12:	f7fb fb7d 	bl	8000210 <memchr>
 8004b16:	b108      	cbz	r0, 8004b1c <_printf_i+0x1bc>
 8004b18:	1b40      	subs	r0, r0, r5
 8004b1a:	6060      	str	r0, [r4, #4]
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	2300      	movs	r3, #0
 8004b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b26:	e7a7      	b.n	8004a78 <_printf_i+0x118>
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	4630      	mov	r0, r6
 8004b30:	47c0      	blx	r8
 8004b32:	3001      	adds	r0, #1
 8004b34:	d0aa      	beq.n	8004a8c <_printf_i+0x12c>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	079b      	lsls	r3, r3, #30
 8004b3a:	d413      	bmi.n	8004b64 <_printf_i+0x204>
 8004b3c:	68e0      	ldr	r0, [r4, #12]
 8004b3e:	9b03      	ldr	r3, [sp, #12]
 8004b40:	4298      	cmp	r0, r3
 8004b42:	bfb8      	it	lt
 8004b44:	4618      	movlt	r0, r3
 8004b46:	e7a3      	b.n	8004a90 <_printf_i+0x130>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	464a      	mov	r2, r9
 8004b4c:	4639      	mov	r1, r7
 8004b4e:	4630      	mov	r0, r6
 8004b50:	47c0      	blx	r8
 8004b52:	3001      	adds	r0, #1
 8004b54:	d09a      	beq.n	8004a8c <_printf_i+0x12c>
 8004b56:	3501      	adds	r5, #1
 8004b58:	68e3      	ldr	r3, [r4, #12]
 8004b5a:	9a03      	ldr	r2, [sp, #12]
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	42ab      	cmp	r3, r5
 8004b60:	dcf2      	bgt.n	8004b48 <_printf_i+0x1e8>
 8004b62:	e7eb      	b.n	8004b3c <_printf_i+0x1dc>
 8004b64:	2500      	movs	r5, #0
 8004b66:	f104 0919 	add.w	r9, r4, #25
 8004b6a:	e7f5      	b.n	8004b58 <_printf_i+0x1f8>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ac      	bne.n	8004aca <_printf_i+0x16a>
 8004b70:	7803      	ldrb	r3, [r0, #0]
 8004b72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b7a:	e76c      	b.n	8004a56 <_printf_i+0xf6>
 8004b7c:	0801bafd 	.word	0x0801bafd
 8004b80:	0801bb0e 	.word	0x0801bb0e

08004b84 <_sbrk_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4c06      	ldr	r4, [pc, #24]	; (8004ba0 <_sbrk_r+0x1c>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	f7fc fe30 	bl	80017f4 <_sbrk>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d102      	bne.n	8004b9e <_sbrk_r+0x1a>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	b103      	cbz	r3, 8004b9e <_sbrk_r+0x1a>
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	2000c108 	.word	0x2000c108

08004ba4 <__sread>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bac:	f000 fa96 	bl	80050dc <_read_r>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	bfab      	itete	ge
 8004bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004bb8:	181b      	addge	r3, r3, r0
 8004bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bbe:	bfac      	ite	ge
 8004bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bc2:	81a3      	strhlt	r3, [r4, #12]
 8004bc4:	bd10      	pop	{r4, pc}

08004bc6 <__swrite>:
 8004bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bca:	461f      	mov	r7, r3
 8004bcc:	898b      	ldrh	r3, [r1, #12]
 8004bce:	05db      	lsls	r3, r3, #23
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	d505      	bpl.n	8004be4 <__swrite+0x1e>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	f000 f9b6 	bl	8004f50 <_lseek_r>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	4632      	mov	r2, r6
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfa:	f000 b869 	b.w	8004cd0 <_write_r>

08004bfe <__sseek>:
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	460c      	mov	r4, r1
 8004c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c06:	f000 f9a3 	bl	8004f50 <_lseek_r>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	bf15      	itete	ne
 8004c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c1a:	81a3      	strheq	r3, [r4, #12]
 8004c1c:	bf18      	it	ne
 8004c1e:	81a3      	strhne	r3, [r4, #12]
 8004c20:	bd10      	pop	{r4, pc}

08004c22 <__sclose>:
 8004c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c26:	f000 b8d3 	b.w	8004dd0 <_close_r>
	...

08004c2c <__swbuf_r>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	460e      	mov	r6, r1
 8004c30:	4614      	mov	r4, r2
 8004c32:	4605      	mov	r5, r0
 8004c34:	b118      	cbz	r0, 8004c3e <__swbuf_r+0x12>
 8004c36:	6983      	ldr	r3, [r0, #24]
 8004c38:	b90b      	cbnz	r3, 8004c3e <__swbuf_r+0x12>
 8004c3a:	f7ff fbf7 	bl	800442c <__sinit>
 8004c3e:	4b21      	ldr	r3, [pc, #132]	; (8004cc4 <__swbuf_r+0x98>)
 8004c40:	429c      	cmp	r4, r3
 8004c42:	d12a      	bne.n	8004c9a <__swbuf_r+0x6e>
 8004c44:	686c      	ldr	r4, [r5, #4]
 8004c46:	69a3      	ldr	r3, [r4, #24]
 8004c48:	60a3      	str	r3, [r4, #8]
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	071a      	lsls	r2, r3, #28
 8004c4e:	d52e      	bpl.n	8004cae <__swbuf_r+0x82>
 8004c50:	6923      	ldr	r3, [r4, #16]
 8004c52:	b363      	cbz	r3, 8004cae <__swbuf_r+0x82>
 8004c54:	6923      	ldr	r3, [r4, #16]
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	1ac0      	subs	r0, r0, r3
 8004c5a:	6963      	ldr	r3, [r4, #20]
 8004c5c:	b2f6      	uxtb	r6, r6
 8004c5e:	4283      	cmp	r3, r0
 8004c60:	4637      	mov	r7, r6
 8004c62:	dc04      	bgt.n	8004c6e <__swbuf_r+0x42>
 8004c64:	4621      	mov	r1, r4
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 f948 	bl	8004efc <_fflush_r>
 8004c6c:	bb28      	cbnz	r0, 8004cba <__swbuf_r+0x8e>
 8004c6e:	68a3      	ldr	r3, [r4, #8]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	60a3      	str	r3, [r4, #8]
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	6022      	str	r2, [r4, #0]
 8004c7a:	701e      	strb	r6, [r3, #0]
 8004c7c:	6963      	ldr	r3, [r4, #20]
 8004c7e:	3001      	adds	r0, #1
 8004c80:	4283      	cmp	r3, r0
 8004c82:	d004      	beq.n	8004c8e <__swbuf_r+0x62>
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d519      	bpl.n	8004cbe <__swbuf_r+0x92>
 8004c8a:	2e0a      	cmp	r6, #10
 8004c8c:	d117      	bne.n	8004cbe <__swbuf_r+0x92>
 8004c8e:	4621      	mov	r1, r4
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 f933 	bl	8004efc <_fflush_r>
 8004c96:	b190      	cbz	r0, 8004cbe <__swbuf_r+0x92>
 8004c98:	e00f      	b.n	8004cba <__swbuf_r+0x8e>
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <__swbuf_r+0x9c>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	d101      	bne.n	8004ca4 <__swbuf_r+0x78>
 8004ca0:	68ac      	ldr	r4, [r5, #8]
 8004ca2:	e7d0      	b.n	8004c46 <__swbuf_r+0x1a>
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <__swbuf_r+0xa0>)
 8004ca6:	429c      	cmp	r4, r3
 8004ca8:	bf08      	it	eq
 8004caa:	68ec      	ldreq	r4, [r5, #12]
 8004cac:	e7cb      	b.n	8004c46 <__swbuf_r+0x1a>
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 f81f 	bl	8004cf4 <__swsetup_r>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d0cc      	beq.n	8004c54 <__swbuf_r+0x28>
 8004cba:	f04f 37ff 	mov.w	r7, #4294967295
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	0801baac 	.word	0x0801baac
 8004cc8:	0801bacc 	.word	0x0801bacc
 8004ccc:	0801ba8c 	.word	0x0801ba8c

08004cd0 <_write_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4c07      	ldr	r4, [pc, #28]	; (8004cf0 <_write_r+0x20>)
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	4608      	mov	r0, r1
 8004cd8:	4611      	mov	r1, r2
 8004cda:	2200      	movs	r2, #0
 8004cdc:	6022      	str	r2, [r4, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f7fc fc2e 	bl	8001540 <_write>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_write_r+0x1e>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_write_r+0x1e>
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	2000c108 	.word	0x2000c108

08004cf4 <__swsetup_r>:
 8004cf4:	4b32      	ldr	r3, [pc, #200]	; (8004dc0 <__swsetup_r+0xcc>)
 8004cf6:	b570      	push	{r4, r5, r6, lr}
 8004cf8:	681d      	ldr	r5, [r3, #0]
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	b125      	cbz	r5, 8004d0a <__swsetup_r+0x16>
 8004d00:	69ab      	ldr	r3, [r5, #24]
 8004d02:	b913      	cbnz	r3, 8004d0a <__swsetup_r+0x16>
 8004d04:	4628      	mov	r0, r5
 8004d06:	f7ff fb91 	bl	800442c <__sinit>
 8004d0a:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <__swsetup_r+0xd0>)
 8004d0c:	429c      	cmp	r4, r3
 8004d0e:	d10f      	bne.n	8004d30 <__swsetup_r+0x3c>
 8004d10:	686c      	ldr	r4, [r5, #4]
 8004d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	0715      	lsls	r5, r2, #28
 8004d1a:	d42c      	bmi.n	8004d76 <__swsetup_r+0x82>
 8004d1c:	06d0      	lsls	r0, r2, #27
 8004d1e:	d411      	bmi.n	8004d44 <__swsetup_r+0x50>
 8004d20:	2209      	movs	r2, #9
 8004d22:	6032      	str	r2, [r6, #0]
 8004d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2e:	e03e      	b.n	8004dae <__swsetup_r+0xba>
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <__swsetup_r+0xd4>)
 8004d32:	429c      	cmp	r4, r3
 8004d34:	d101      	bne.n	8004d3a <__swsetup_r+0x46>
 8004d36:	68ac      	ldr	r4, [r5, #8]
 8004d38:	e7eb      	b.n	8004d12 <__swsetup_r+0x1e>
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <__swsetup_r+0xd8>)
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	bf08      	it	eq
 8004d40:	68ec      	ldreq	r4, [r5, #12]
 8004d42:	e7e6      	b.n	8004d12 <__swsetup_r+0x1e>
 8004d44:	0751      	lsls	r1, r2, #29
 8004d46:	d512      	bpl.n	8004d6e <__swsetup_r+0x7a>
 8004d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d4a:	b141      	cbz	r1, 8004d5e <__swsetup_r+0x6a>
 8004d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d50:	4299      	cmp	r1, r3
 8004d52:	d002      	beq.n	8004d5a <__swsetup_r+0x66>
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 f973 	bl	8005040 <_free_r>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	2300      	movs	r3, #0
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f043 0308 	orr.w	r3, r3, #8
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	6923      	ldr	r3, [r4, #16]
 8004d78:	b94b      	cbnz	r3, 8004d8e <__swsetup_r+0x9a>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d84:	d003      	beq.n	8004d8e <__swsetup_r+0x9a>
 8004d86:	4621      	mov	r1, r4
 8004d88:	4630      	mov	r0, r6
 8004d8a:	f000 f917 	bl	8004fbc <__smakebuf_r>
 8004d8e:	89a2      	ldrh	r2, [r4, #12]
 8004d90:	f012 0301 	ands.w	r3, r2, #1
 8004d94:	d00c      	beq.n	8004db0 <__swsetup_r+0xbc>
 8004d96:	2300      	movs	r3, #0
 8004d98:	60a3      	str	r3, [r4, #8]
 8004d9a:	6963      	ldr	r3, [r4, #20]
 8004d9c:	425b      	negs	r3, r3
 8004d9e:	61a3      	str	r3, [r4, #24]
 8004da0:	6923      	ldr	r3, [r4, #16]
 8004da2:	b953      	cbnz	r3, 8004dba <__swsetup_r+0xc6>
 8004da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004dac:	d1ba      	bne.n	8004d24 <__swsetup_r+0x30>
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	0792      	lsls	r2, r2, #30
 8004db2:	bf58      	it	pl
 8004db4:	6963      	ldrpl	r3, [r4, #20]
 8004db6:	60a3      	str	r3, [r4, #8]
 8004db8:	e7f2      	b.n	8004da0 <__swsetup_r+0xac>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e7f7      	b.n	8004dae <__swsetup_r+0xba>
 8004dbe:	bf00      	nop
 8004dc0:	20000014 	.word	0x20000014
 8004dc4:	0801baac 	.word	0x0801baac
 8004dc8:	0801bacc 	.word	0x0801bacc
 8004dcc:	0801ba8c 	.word	0x0801ba8c

08004dd0 <_close_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4c06      	ldr	r4, [pc, #24]	; (8004dec <_close_r+0x1c>)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	f7fc fcd5 	bl	800178a <_close>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_close_r+0x1a>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_close_r+0x1a>
 8004de8:	602b      	str	r3, [r5, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	2000c108 	.word	0x2000c108

08004df0 <__sflush_r>:
 8004df0:	898a      	ldrh	r2, [r1, #12]
 8004df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	4605      	mov	r5, r0
 8004df8:	0710      	lsls	r0, r2, #28
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	d458      	bmi.n	8004eb0 <__sflush_r+0xc0>
 8004dfe:	684b      	ldr	r3, [r1, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dc05      	bgt.n	8004e10 <__sflush_r+0x20>
 8004e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dc02      	bgt.n	8004e10 <__sflush_r+0x20>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	d0f9      	beq.n	8004e0a <__sflush_r+0x1a>
 8004e16:	2300      	movs	r3, #0
 8004e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e1c:	682f      	ldr	r7, [r5, #0]
 8004e1e:	6a21      	ldr	r1, [r4, #32]
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	d032      	beq.n	8004e8a <__sflush_r+0x9a>
 8004e24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	075a      	lsls	r2, r3, #29
 8004e2a:	d505      	bpl.n	8004e38 <__sflush_r+0x48>
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	1ac0      	subs	r0, r0, r3
 8004e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e32:	b10b      	cbz	r3, 8004e38 <__sflush_r+0x48>
 8004e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e36:	1ac0      	subs	r0, r0, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e3e:	6a21      	ldr	r1, [r4, #32]
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	d106      	bne.n	8004e58 <__sflush_r+0x68>
 8004e4a:	6829      	ldr	r1, [r5, #0]
 8004e4c:	291d      	cmp	r1, #29
 8004e4e:	d848      	bhi.n	8004ee2 <__sflush_r+0xf2>
 8004e50:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <__sflush_r+0x108>)
 8004e52:	40ca      	lsrs	r2, r1
 8004e54:	07d6      	lsls	r6, r2, #31
 8004e56:	d544      	bpl.n	8004ee2 <__sflush_r+0xf2>
 8004e58:	2200      	movs	r2, #0
 8004e5a:	6062      	str	r2, [r4, #4]
 8004e5c:	04d9      	lsls	r1, r3, #19
 8004e5e:	6922      	ldr	r2, [r4, #16]
 8004e60:	6022      	str	r2, [r4, #0]
 8004e62:	d504      	bpl.n	8004e6e <__sflush_r+0x7e>
 8004e64:	1c42      	adds	r2, r0, #1
 8004e66:	d101      	bne.n	8004e6c <__sflush_r+0x7c>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b903      	cbnz	r3, 8004e6e <__sflush_r+0x7e>
 8004e6c:	6560      	str	r0, [r4, #84]	; 0x54
 8004e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e70:	602f      	str	r7, [r5, #0]
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d0c9      	beq.n	8004e0a <__sflush_r+0x1a>
 8004e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e7a:	4299      	cmp	r1, r3
 8004e7c:	d002      	beq.n	8004e84 <__sflush_r+0x94>
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 f8de 	bl	8005040 <_free_r>
 8004e84:	2000      	movs	r0, #0
 8004e86:	6360      	str	r0, [r4, #52]	; 0x34
 8004e88:	e7c0      	b.n	8004e0c <__sflush_r+0x1c>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b0      	blx	r6
 8004e90:	1c41      	adds	r1, r0, #1
 8004e92:	d1c8      	bne.n	8004e26 <__sflush_r+0x36>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0c5      	beq.n	8004e26 <__sflush_r+0x36>
 8004e9a:	2b1d      	cmp	r3, #29
 8004e9c:	d001      	beq.n	8004ea2 <__sflush_r+0xb2>
 8004e9e:	2b16      	cmp	r3, #22
 8004ea0:	d101      	bne.n	8004ea6 <__sflush_r+0xb6>
 8004ea2:	602f      	str	r7, [r5, #0]
 8004ea4:	e7b1      	b.n	8004e0a <__sflush_r+0x1a>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	e7ad      	b.n	8004e0c <__sflush_r+0x1c>
 8004eb0:	690f      	ldr	r7, [r1, #16]
 8004eb2:	2f00      	cmp	r7, #0
 8004eb4:	d0a9      	beq.n	8004e0a <__sflush_r+0x1a>
 8004eb6:	0793      	lsls	r3, r2, #30
 8004eb8:	680e      	ldr	r6, [r1, #0]
 8004eba:	bf08      	it	eq
 8004ebc:	694b      	ldreq	r3, [r1, #20]
 8004ebe:	600f      	str	r7, [r1, #0]
 8004ec0:	bf18      	it	ne
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	eba6 0807 	sub.w	r8, r6, r7
 8004ec8:	608b      	str	r3, [r1, #8]
 8004eca:	f1b8 0f00 	cmp.w	r8, #0
 8004ece:	dd9c      	ble.n	8004e0a <__sflush_r+0x1a>
 8004ed0:	4643      	mov	r3, r8
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	6a21      	ldr	r1, [r4, #32]
 8004ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b0      	blx	r6
 8004edc:	2800      	cmp	r0, #0
 8004ede:	dc06      	bgt.n	8004eee <__sflush_r+0xfe>
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e78e      	b.n	8004e0c <__sflush_r+0x1c>
 8004eee:	4407      	add	r7, r0
 8004ef0:	eba8 0800 	sub.w	r8, r8, r0
 8004ef4:	e7e9      	b.n	8004eca <__sflush_r+0xda>
 8004ef6:	bf00      	nop
 8004ef8:	20400001 	.word	0x20400001

08004efc <_fflush_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	4605      	mov	r5, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b1db      	cbz	r3, 8004f3e <_fflush_r+0x42>
 8004f06:	b118      	cbz	r0, 8004f10 <_fflush_r+0x14>
 8004f08:	6983      	ldr	r3, [r0, #24]
 8004f0a:	b90b      	cbnz	r3, 8004f10 <_fflush_r+0x14>
 8004f0c:	f7ff fa8e 	bl	800442c <__sinit>
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <_fflush_r+0x48>)
 8004f12:	429c      	cmp	r4, r3
 8004f14:	d109      	bne.n	8004f2a <_fflush_r+0x2e>
 8004f16:	686c      	ldr	r4, [r5, #4]
 8004f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1c:	b17b      	cbz	r3, 8004f3e <_fflush_r+0x42>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f26:	f7ff bf63 	b.w	8004df0 <__sflush_r>
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <_fflush_r+0x4c>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	d101      	bne.n	8004f34 <_fflush_r+0x38>
 8004f30:	68ac      	ldr	r4, [r5, #8]
 8004f32:	e7f1      	b.n	8004f18 <_fflush_r+0x1c>
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <_fflush_r+0x50>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	bf08      	it	eq
 8004f3a:	68ec      	ldreq	r4, [r5, #12]
 8004f3c:	e7ec      	b.n	8004f18 <_fflush_r+0x1c>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
 8004f42:	bf00      	nop
 8004f44:	0801baac 	.word	0x0801baac
 8004f48:	0801bacc 	.word	0x0801bacc
 8004f4c:	0801ba8c 	.word	0x0801ba8c

08004f50 <_lseek_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4c07      	ldr	r4, [pc, #28]	; (8004f70 <_lseek_r+0x20>)
 8004f54:	4605      	mov	r5, r0
 8004f56:	4608      	mov	r0, r1
 8004f58:	4611      	mov	r1, r2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	6022      	str	r2, [r4, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fc fc3a 	bl	80017d8 <_lseek>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_lseek_r+0x1e>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_lseek_r+0x1e>
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	2000c108 	.word	0x2000c108

08004f74 <__swhatbuf_r>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	460e      	mov	r6, r1
 8004f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	b096      	sub	sp, #88	; 0x58
 8004f80:	4614      	mov	r4, r2
 8004f82:	461d      	mov	r5, r3
 8004f84:	da07      	bge.n	8004f96 <__swhatbuf_r+0x22>
 8004f86:	2300      	movs	r3, #0
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	89b3      	ldrh	r3, [r6, #12]
 8004f8c:	061a      	lsls	r2, r3, #24
 8004f8e:	d410      	bmi.n	8004fb2 <__swhatbuf_r+0x3e>
 8004f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f94:	e00e      	b.n	8004fb4 <__swhatbuf_r+0x40>
 8004f96:	466a      	mov	r2, sp
 8004f98:	f000 f8b2 	bl	8005100 <_fstat_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	dbf2      	blt.n	8004f86 <__swhatbuf_r+0x12>
 8004fa0:	9a01      	ldr	r2, [sp, #4]
 8004fa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004faa:	425a      	negs	r2, r3
 8004fac:	415a      	adcs	r2, r3
 8004fae:	602a      	str	r2, [r5, #0]
 8004fb0:	e7ee      	b.n	8004f90 <__swhatbuf_r+0x1c>
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	b016      	add	sp, #88	; 0x58
 8004fba:	bd70      	pop	{r4, r5, r6, pc}

08004fbc <__smakebuf_r>:
 8004fbc:	898b      	ldrh	r3, [r1, #12]
 8004fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fc0:	079d      	lsls	r5, r3, #30
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	d507      	bpl.n	8004fd8 <__smakebuf_r+0x1c>
 8004fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	6163      	str	r3, [r4, #20]
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	ab01      	add	r3, sp, #4
 8004fda:	466a      	mov	r2, sp
 8004fdc:	f7ff ffca 	bl	8004f74 <__swhatbuf_r>
 8004fe0:	9900      	ldr	r1, [sp, #0]
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7ff faab 	bl	8004540 <_malloc_r>
 8004fea:	b948      	cbnz	r0, 8005000 <__smakebuf_r+0x44>
 8004fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff0:	059a      	lsls	r2, r3, #22
 8004ff2:	d4ef      	bmi.n	8004fd4 <__smakebuf_r+0x18>
 8004ff4:	f023 0303 	bic.w	r3, r3, #3
 8004ff8:	f043 0302 	orr.w	r3, r3, #2
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	e7e3      	b.n	8004fc8 <__smakebuf_r+0xc>
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <__smakebuf_r+0x7c>)
 8005002:	62b3      	str	r3, [r6, #40]	; 0x28
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	6020      	str	r0, [r4, #0]
 8005008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	9b00      	ldr	r3, [sp, #0]
 8005010:	6163      	str	r3, [r4, #20]
 8005012:	9b01      	ldr	r3, [sp, #4]
 8005014:	6120      	str	r0, [r4, #16]
 8005016:	b15b      	cbz	r3, 8005030 <__smakebuf_r+0x74>
 8005018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f881 	bl	8005124 <_isatty_r>
 8005022:	b128      	cbz	r0, 8005030 <__smakebuf_r+0x74>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	431d      	orrs	r5, r3
 8005034:	81a5      	strh	r5, [r4, #12]
 8005036:	e7cd      	b.n	8004fd4 <__smakebuf_r+0x18>
 8005038:	080043f5 	.word	0x080043f5

0800503c <__malloc_lock>:
 800503c:	4770      	bx	lr

0800503e <__malloc_unlock>:
 800503e:	4770      	bx	lr

08005040 <_free_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4605      	mov	r5, r0
 8005044:	2900      	cmp	r1, #0
 8005046:	d045      	beq.n	80050d4 <_free_r+0x94>
 8005048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504c:	1f0c      	subs	r4, r1, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfb8      	it	lt
 8005052:	18e4      	addlt	r4, r4, r3
 8005054:	f7ff fff2 	bl	800503c <__malloc_lock>
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <_free_r+0x98>)
 800505a:	6813      	ldr	r3, [r2, #0]
 800505c:	4610      	mov	r0, r2
 800505e:	b933      	cbnz	r3, 800506e <_free_r+0x2e>
 8005060:	6063      	str	r3, [r4, #4]
 8005062:	6014      	str	r4, [r2, #0]
 8005064:	4628      	mov	r0, r5
 8005066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800506a:	f7ff bfe8 	b.w	800503e <__malloc_unlock>
 800506e:	42a3      	cmp	r3, r4
 8005070:	d90c      	bls.n	800508c <_free_r+0x4c>
 8005072:	6821      	ldr	r1, [r4, #0]
 8005074:	1862      	adds	r2, r4, r1
 8005076:	4293      	cmp	r3, r2
 8005078:	bf04      	itt	eq
 800507a:	681a      	ldreq	r2, [r3, #0]
 800507c:	685b      	ldreq	r3, [r3, #4]
 800507e:	6063      	str	r3, [r4, #4]
 8005080:	bf04      	itt	eq
 8005082:	1852      	addeq	r2, r2, r1
 8005084:	6022      	streq	r2, [r4, #0]
 8005086:	6004      	str	r4, [r0, #0]
 8005088:	e7ec      	b.n	8005064 <_free_r+0x24>
 800508a:	4613      	mov	r3, r2
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	b10a      	cbz	r2, 8005094 <_free_r+0x54>
 8005090:	42a2      	cmp	r2, r4
 8005092:	d9fa      	bls.n	800508a <_free_r+0x4a>
 8005094:	6819      	ldr	r1, [r3, #0]
 8005096:	1858      	adds	r0, r3, r1
 8005098:	42a0      	cmp	r0, r4
 800509a:	d10b      	bne.n	80050b4 <_free_r+0x74>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	4401      	add	r1, r0
 80050a0:	1858      	adds	r0, r3, r1
 80050a2:	4282      	cmp	r2, r0
 80050a4:	6019      	str	r1, [r3, #0]
 80050a6:	d1dd      	bne.n	8005064 <_free_r+0x24>
 80050a8:	6810      	ldr	r0, [r2, #0]
 80050aa:	6852      	ldr	r2, [r2, #4]
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	4401      	add	r1, r0
 80050b0:	6019      	str	r1, [r3, #0]
 80050b2:	e7d7      	b.n	8005064 <_free_r+0x24>
 80050b4:	d902      	bls.n	80050bc <_free_r+0x7c>
 80050b6:	230c      	movs	r3, #12
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	e7d3      	b.n	8005064 <_free_r+0x24>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	1821      	adds	r1, r4, r0
 80050c0:	428a      	cmp	r2, r1
 80050c2:	bf04      	itt	eq
 80050c4:	6811      	ldreq	r1, [r2, #0]
 80050c6:	6852      	ldreq	r2, [r2, #4]
 80050c8:	6062      	str	r2, [r4, #4]
 80050ca:	bf04      	itt	eq
 80050cc:	1809      	addeq	r1, r1, r0
 80050ce:	6021      	streq	r1, [r4, #0]
 80050d0:	605c      	str	r4, [r3, #4]
 80050d2:	e7c7      	b.n	8005064 <_free_r+0x24>
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	2000009c 	.word	0x2000009c

080050dc <_read_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4c07      	ldr	r4, [pc, #28]	; (80050fc <_read_r+0x20>)
 80050e0:	4605      	mov	r5, r0
 80050e2:	4608      	mov	r0, r1
 80050e4:	4611      	mov	r1, r2
 80050e6:	2200      	movs	r2, #0
 80050e8:	6022      	str	r2, [r4, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f7fc fb30 	bl	8001750 <_read>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_read_r+0x1e>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_read_r+0x1e>
 80050f8:	602b      	str	r3, [r5, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	2000c108 	.word	0x2000c108

08005100 <_fstat_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4c07      	ldr	r4, [pc, #28]	; (8005120 <_fstat_r+0x20>)
 8005104:	2300      	movs	r3, #0
 8005106:	4605      	mov	r5, r0
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	f7fc fb48 	bl	80017a2 <_fstat>
 8005112:	1c43      	adds	r3, r0, #1
 8005114:	d102      	bne.n	800511c <_fstat_r+0x1c>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	b103      	cbz	r3, 800511c <_fstat_r+0x1c>
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	bd38      	pop	{r3, r4, r5, pc}
 800511e:	bf00      	nop
 8005120:	2000c108 	.word	0x2000c108

08005124 <_isatty_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4c06      	ldr	r4, [pc, #24]	; (8005140 <_isatty_r+0x1c>)
 8005128:	2300      	movs	r3, #0
 800512a:	4605      	mov	r5, r0
 800512c:	4608      	mov	r0, r1
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	f7fc fb47 	bl	80017c2 <_isatty>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_isatty_r+0x1a>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	b103      	cbz	r3, 800513e <_isatty_r+0x1a>
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	2000c108 	.word	0x2000c108
 8005144:	00000000 	.word	0x00000000

08005148 <atan>:
 8005148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	ec55 4b10 	vmov	r4, r5, d0
 8005150:	4bc3      	ldr	r3, [pc, #780]	; (8005460 <atan+0x318>)
 8005152:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005156:	429e      	cmp	r6, r3
 8005158:	46ab      	mov	fp, r5
 800515a:	dd18      	ble.n	800518e <atan+0x46>
 800515c:	4bc1      	ldr	r3, [pc, #772]	; (8005464 <atan+0x31c>)
 800515e:	429e      	cmp	r6, r3
 8005160:	dc01      	bgt.n	8005166 <atan+0x1e>
 8005162:	d109      	bne.n	8005178 <atan+0x30>
 8005164:	b144      	cbz	r4, 8005178 <atan+0x30>
 8005166:	4622      	mov	r2, r4
 8005168:	462b      	mov	r3, r5
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb f8a5 	bl	80002bc <__adddf3>
 8005172:	4604      	mov	r4, r0
 8005174:	460d      	mov	r5, r1
 8005176:	e006      	b.n	8005186 <atan+0x3e>
 8005178:	f1bb 0f00 	cmp.w	fp, #0
 800517c:	f340 8131 	ble.w	80053e2 <atan+0x29a>
 8005180:	a59b      	add	r5, pc, #620	; (adr r5, 80053f0 <atan+0x2a8>)
 8005182:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005186:	ec45 4b10 	vmov	d0, r4, r5
 800518a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518e:	4bb6      	ldr	r3, [pc, #728]	; (8005468 <atan+0x320>)
 8005190:	429e      	cmp	r6, r3
 8005192:	dc14      	bgt.n	80051be <atan+0x76>
 8005194:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005198:	429e      	cmp	r6, r3
 800519a:	dc0d      	bgt.n	80051b8 <atan+0x70>
 800519c:	a396      	add	r3, pc, #600	; (adr r3, 80053f8 <atan+0x2b0>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	ee10 0a10 	vmov	r0, s0
 80051a6:	4629      	mov	r1, r5
 80051a8:	f7fb f888 	bl	80002bc <__adddf3>
 80051ac:	2200      	movs	r2, #0
 80051ae:	4baf      	ldr	r3, [pc, #700]	; (800546c <atan+0x324>)
 80051b0:	f7fb fcca 	bl	8000b48 <__aeabi_dcmpgt>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d1e6      	bne.n	8005186 <atan+0x3e>
 80051b8:	f04f 3aff 	mov.w	sl, #4294967295
 80051bc:	e02b      	b.n	8005216 <atan+0xce>
 80051be:	f000 f963 	bl	8005488 <fabs>
 80051c2:	4bab      	ldr	r3, [pc, #684]	; (8005470 <atan+0x328>)
 80051c4:	429e      	cmp	r6, r3
 80051c6:	ec55 4b10 	vmov	r4, r5, d0
 80051ca:	f300 80bf 	bgt.w	800534c <atan+0x204>
 80051ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80051d2:	429e      	cmp	r6, r3
 80051d4:	f300 80a0 	bgt.w	8005318 <atan+0x1d0>
 80051d8:	ee10 2a10 	vmov	r2, s0
 80051dc:	ee10 0a10 	vmov	r0, s0
 80051e0:	462b      	mov	r3, r5
 80051e2:	4629      	mov	r1, r5
 80051e4:	f7fb f86a 	bl	80002bc <__adddf3>
 80051e8:	2200      	movs	r2, #0
 80051ea:	4ba0      	ldr	r3, [pc, #640]	; (800546c <atan+0x324>)
 80051ec:	f7fb f864 	bl	80002b8 <__aeabi_dsub>
 80051f0:	2200      	movs	r2, #0
 80051f2:	4606      	mov	r6, r0
 80051f4:	460f      	mov	r7, r1
 80051f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7fb f85d 	bl	80002bc <__adddf3>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	f7fb fb37 	bl	800087c <__aeabi_ddiv>
 800520e:	f04f 0a00 	mov.w	sl, #0
 8005212:	4604      	mov	r4, r0
 8005214:	460d      	mov	r5, r1
 8005216:	4622      	mov	r2, r4
 8005218:	462b      	mov	r3, r5
 800521a:	4620      	mov	r0, r4
 800521c:	4629      	mov	r1, r5
 800521e:	f7fb fa03 	bl	8000628 <__aeabi_dmul>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4680      	mov	r8, r0
 8005228:	4689      	mov	r9, r1
 800522a:	f7fb f9fd 	bl	8000628 <__aeabi_dmul>
 800522e:	a374      	add	r3, pc, #464	; (adr r3, 8005400 <atan+0x2b8>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	f7fb f9f6 	bl	8000628 <__aeabi_dmul>
 800523c:	a372      	add	r3, pc, #456	; (adr r3, 8005408 <atan+0x2c0>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f7fb f83b 	bl	80002bc <__adddf3>
 8005246:	4632      	mov	r2, r6
 8005248:	463b      	mov	r3, r7
 800524a:	f7fb f9ed 	bl	8000628 <__aeabi_dmul>
 800524e:	a370      	add	r3, pc, #448	; (adr r3, 8005410 <atan+0x2c8>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f7fb f832 	bl	80002bc <__adddf3>
 8005258:	4632      	mov	r2, r6
 800525a:	463b      	mov	r3, r7
 800525c:	f7fb f9e4 	bl	8000628 <__aeabi_dmul>
 8005260:	a36d      	add	r3, pc, #436	; (adr r3, 8005418 <atan+0x2d0>)
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f7fb f829 	bl	80002bc <__adddf3>
 800526a:	4632      	mov	r2, r6
 800526c:	463b      	mov	r3, r7
 800526e:	f7fb f9db 	bl	8000628 <__aeabi_dmul>
 8005272:	a36b      	add	r3, pc, #428	; (adr r3, 8005420 <atan+0x2d8>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f7fb f820 	bl	80002bc <__adddf3>
 800527c:	4632      	mov	r2, r6
 800527e:	463b      	mov	r3, r7
 8005280:	f7fb f9d2 	bl	8000628 <__aeabi_dmul>
 8005284:	a368      	add	r3, pc, #416	; (adr r3, 8005428 <atan+0x2e0>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f7fb f817 	bl	80002bc <__adddf3>
 800528e:	4642      	mov	r2, r8
 8005290:	464b      	mov	r3, r9
 8005292:	f7fb f9c9 	bl	8000628 <__aeabi_dmul>
 8005296:	a366      	add	r3, pc, #408	; (adr r3, 8005430 <atan+0x2e8>)
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	4680      	mov	r8, r0
 800529e:	4689      	mov	r9, r1
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb f9c0 	bl	8000628 <__aeabi_dmul>
 80052a8:	a363      	add	r3, pc, #396	; (adr r3, 8005438 <atan+0x2f0>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f7fb f803 	bl	80002b8 <__aeabi_dsub>
 80052b2:	4632      	mov	r2, r6
 80052b4:	463b      	mov	r3, r7
 80052b6:	f7fb f9b7 	bl	8000628 <__aeabi_dmul>
 80052ba:	a361      	add	r3, pc, #388	; (adr r3, 8005440 <atan+0x2f8>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f7fa fffa 	bl	80002b8 <__aeabi_dsub>
 80052c4:	4632      	mov	r2, r6
 80052c6:	463b      	mov	r3, r7
 80052c8:	f7fb f9ae 	bl	8000628 <__aeabi_dmul>
 80052cc:	a35e      	add	r3, pc, #376	; (adr r3, 8005448 <atan+0x300>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fa fff1 	bl	80002b8 <__aeabi_dsub>
 80052d6:	4632      	mov	r2, r6
 80052d8:	463b      	mov	r3, r7
 80052da:	f7fb f9a5 	bl	8000628 <__aeabi_dmul>
 80052de:	a35c      	add	r3, pc, #368	; (adr r3, 8005450 <atan+0x308>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f7fa ffe8 	bl	80002b8 <__aeabi_dsub>
 80052e8:	4632      	mov	r2, r6
 80052ea:	463b      	mov	r3, r7
 80052ec:	f7fb f99c 	bl	8000628 <__aeabi_dmul>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4640      	mov	r0, r8
 80052f6:	4649      	mov	r1, r9
 80052f8:	f7fa ffe0 	bl	80002bc <__adddf3>
 80052fc:	4622      	mov	r2, r4
 80052fe:	462b      	mov	r3, r5
 8005300:	f7fb f992 	bl	8000628 <__aeabi_dmul>
 8005304:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	d14b      	bne.n	80053a6 <atan+0x25e>
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f7fa ffd1 	bl	80002b8 <__aeabi_dsub>
 8005316:	e72c      	b.n	8005172 <atan+0x2a>
 8005318:	ee10 0a10 	vmov	r0, s0
 800531c:	2200      	movs	r2, #0
 800531e:	4b53      	ldr	r3, [pc, #332]	; (800546c <atan+0x324>)
 8005320:	4629      	mov	r1, r5
 8005322:	f7fa ffc9 	bl	80002b8 <__aeabi_dsub>
 8005326:	2200      	movs	r2, #0
 8005328:	4606      	mov	r6, r0
 800532a:	460f      	mov	r7, r1
 800532c:	4b4f      	ldr	r3, [pc, #316]	; (800546c <atan+0x324>)
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	f7fa ffc3 	bl	80002bc <__adddf3>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4630      	mov	r0, r6
 800533c:	4639      	mov	r1, r7
 800533e:	f7fb fa9d 	bl	800087c <__aeabi_ddiv>
 8005342:	f04f 0a01 	mov.w	sl, #1
 8005346:	4604      	mov	r4, r0
 8005348:	460d      	mov	r5, r1
 800534a:	e764      	b.n	8005216 <atan+0xce>
 800534c:	4b49      	ldr	r3, [pc, #292]	; (8005474 <atan+0x32c>)
 800534e:	429e      	cmp	r6, r3
 8005350:	dc1d      	bgt.n	800538e <atan+0x246>
 8005352:	ee10 0a10 	vmov	r0, s0
 8005356:	2200      	movs	r2, #0
 8005358:	4b47      	ldr	r3, [pc, #284]	; (8005478 <atan+0x330>)
 800535a:	4629      	mov	r1, r5
 800535c:	f7fa ffac 	bl	80002b8 <__aeabi_dsub>
 8005360:	2200      	movs	r2, #0
 8005362:	4606      	mov	r6, r0
 8005364:	460f      	mov	r7, r1
 8005366:	4b44      	ldr	r3, [pc, #272]	; (8005478 <atan+0x330>)
 8005368:	4620      	mov	r0, r4
 800536a:	4629      	mov	r1, r5
 800536c:	f7fb f95c 	bl	8000628 <__aeabi_dmul>
 8005370:	2200      	movs	r2, #0
 8005372:	4b3e      	ldr	r3, [pc, #248]	; (800546c <atan+0x324>)
 8005374:	f7fa ffa2 	bl	80002bc <__adddf3>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4630      	mov	r0, r6
 800537e:	4639      	mov	r1, r7
 8005380:	f7fb fa7c 	bl	800087c <__aeabi_ddiv>
 8005384:	f04f 0a02 	mov.w	sl, #2
 8005388:	4604      	mov	r4, r0
 800538a:	460d      	mov	r5, r1
 800538c:	e743      	b.n	8005216 <atan+0xce>
 800538e:	462b      	mov	r3, r5
 8005390:	ee10 2a10 	vmov	r2, s0
 8005394:	2000      	movs	r0, #0
 8005396:	4939      	ldr	r1, [pc, #228]	; (800547c <atan+0x334>)
 8005398:	f7fb fa70 	bl	800087c <__aeabi_ddiv>
 800539c:	f04f 0a03 	mov.w	sl, #3
 80053a0:	4604      	mov	r4, r0
 80053a2:	460d      	mov	r5, r1
 80053a4:	e737      	b.n	8005216 <atan+0xce>
 80053a6:	4b36      	ldr	r3, [pc, #216]	; (8005480 <atan+0x338>)
 80053a8:	4e36      	ldr	r6, [pc, #216]	; (8005484 <atan+0x33c>)
 80053aa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80053ae:	4456      	add	r6, sl
 80053b0:	449a      	add	sl, r3
 80053b2:	e9da 2300 	ldrd	r2, r3, [sl]
 80053b6:	f7fa ff7f 	bl	80002b8 <__aeabi_dsub>
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	f7fa ff7b 	bl	80002b8 <__aeabi_dsub>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80053ca:	f7fa ff75 	bl	80002b8 <__aeabi_dsub>
 80053ce:	f1bb 0f00 	cmp.w	fp, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	460d      	mov	r5, r1
 80053d6:	f6bf aed6 	bge.w	8005186 <atan+0x3e>
 80053da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053de:	461d      	mov	r5, r3
 80053e0:	e6d1      	b.n	8005186 <atan+0x3e>
 80053e2:	a51d      	add	r5, pc, #116	; (adr r5, 8005458 <atan+0x310>)
 80053e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80053e8:	e6cd      	b.n	8005186 <atan+0x3e>
 80053ea:	bf00      	nop
 80053ec:	f3af 8000 	nop.w
 80053f0:	54442d18 	.word	0x54442d18
 80053f4:	3ff921fb 	.word	0x3ff921fb
 80053f8:	8800759c 	.word	0x8800759c
 80053fc:	7e37e43c 	.word	0x7e37e43c
 8005400:	e322da11 	.word	0xe322da11
 8005404:	3f90ad3a 	.word	0x3f90ad3a
 8005408:	24760deb 	.word	0x24760deb
 800540c:	3fa97b4b 	.word	0x3fa97b4b
 8005410:	a0d03d51 	.word	0xa0d03d51
 8005414:	3fb10d66 	.word	0x3fb10d66
 8005418:	c54c206e 	.word	0xc54c206e
 800541c:	3fb745cd 	.word	0x3fb745cd
 8005420:	920083ff 	.word	0x920083ff
 8005424:	3fc24924 	.word	0x3fc24924
 8005428:	5555550d 	.word	0x5555550d
 800542c:	3fd55555 	.word	0x3fd55555
 8005430:	2c6a6c2f 	.word	0x2c6a6c2f
 8005434:	bfa2b444 	.word	0xbfa2b444
 8005438:	52defd9a 	.word	0x52defd9a
 800543c:	3fadde2d 	.word	0x3fadde2d
 8005440:	af749a6d 	.word	0xaf749a6d
 8005444:	3fb3b0f2 	.word	0x3fb3b0f2
 8005448:	fe231671 	.word	0xfe231671
 800544c:	3fbc71c6 	.word	0x3fbc71c6
 8005450:	9998ebc4 	.word	0x9998ebc4
 8005454:	3fc99999 	.word	0x3fc99999
 8005458:	54442d18 	.word	0x54442d18
 800545c:	bff921fb 	.word	0xbff921fb
 8005460:	440fffff 	.word	0x440fffff
 8005464:	7ff00000 	.word	0x7ff00000
 8005468:	3fdbffff 	.word	0x3fdbffff
 800546c:	3ff00000 	.word	0x3ff00000
 8005470:	3ff2ffff 	.word	0x3ff2ffff
 8005474:	40037fff 	.word	0x40037fff
 8005478:	3ff80000 	.word	0x3ff80000
 800547c:	bff00000 	.word	0xbff00000
 8005480:	0801bb40 	.word	0x0801bb40
 8005484:	0801bb20 	.word	0x0801bb20

08005488 <fabs>:
 8005488:	ec51 0b10 	vmov	r0, r1, d0
 800548c:	ee10 2a10 	vmov	r2, s0
 8005490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005494:	ec43 2b10 	vmov	d0, r2, r3
 8005498:	4770      	bx	lr
 800549a:	0000      	movs	r0, r0
 800549c:	0000      	movs	r0, r0
	...

080054a0 <sin>:
 80054a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054a2:	ec51 0b10 	vmov	r0, r1, d0
 80054a6:	4a20      	ldr	r2, [pc, #128]	; (8005528 <sin+0x88>)
 80054a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054ac:	4293      	cmp	r3, r2
 80054ae:	dc07      	bgt.n	80054c0 <sin+0x20>
 80054b0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005520 <sin+0x80>
 80054b4:	2000      	movs	r0, #0
 80054b6:	f000 fe8b 	bl	80061d0 <__kernel_sin>
 80054ba:	ec51 0b10 	vmov	r0, r1, d0
 80054be:	e007      	b.n	80054d0 <sin+0x30>
 80054c0:	4a1a      	ldr	r2, [pc, #104]	; (800552c <sin+0x8c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	dd09      	ble.n	80054da <sin+0x3a>
 80054c6:	ee10 2a10 	vmov	r2, s0
 80054ca:	460b      	mov	r3, r1
 80054cc:	f7fa fef4 	bl	80002b8 <__aeabi_dsub>
 80054d0:	ec41 0b10 	vmov	d0, r0, r1
 80054d4:	b005      	add	sp, #20
 80054d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80054da:	4668      	mov	r0, sp
 80054dc:	f000 f878 	bl	80055d0 <__ieee754_rem_pio2>
 80054e0:	f000 0003 	and.w	r0, r0, #3
 80054e4:	2801      	cmp	r0, #1
 80054e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80054ea:	ed9d 0b00 	vldr	d0, [sp]
 80054ee:	d004      	beq.n	80054fa <sin+0x5a>
 80054f0:	2802      	cmp	r0, #2
 80054f2:	d005      	beq.n	8005500 <sin+0x60>
 80054f4:	b970      	cbnz	r0, 8005514 <sin+0x74>
 80054f6:	2001      	movs	r0, #1
 80054f8:	e7dd      	b.n	80054b6 <sin+0x16>
 80054fa:	f000 fa61 	bl	80059c0 <__kernel_cos>
 80054fe:	e7dc      	b.n	80054ba <sin+0x1a>
 8005500:	2001      	movs	r0, #1
 8005502:	f000 fe65 	bl	80061d0 <__kernel_sin>
 8005506:	ec53 2b10 	vmov	r2, r3, d0
 800550a:	ee10 0a10 	vmov	r0, s0
 800550e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005512:	e7dd      	b.n	80054d0 <sin+0x30>
 8005514:	f000 fa54 	bl	80059c0 <__kernel_cos>
 8005518:	e7f5      	b.n	8005506 <sin+0x66>
 800551a:	bf00      	nop
 800551c:	f3af 8000 	nop.w
	...
 8005528:	3fe921fb 	.word	0x3fe921fb
 800552c:	7fefffff 	.word	0x7fefffff

08005530 <sqrtf>:
 8005530:	b510      	push	{r4, lr}
 8005532:	ed2d 8b02 	vpush	{d8}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	eeb0 8a40 	vmov.f32	s16, s0
 800553c:	f000 fa3a 	bl	80059b4 <__ieee754_sqrtf>
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <sqrtf+0x98>)
 8005542:	f993 4000 	ldrsb.w	r4, [r3]
 8005546:	1c63      	adds	r3, r4, #1
 8005548:	d02c      	beq.n	80055a4 <sqrtf+0x74>
 800554a:	eeb4 8a48 	vcmp.f32	s16, s16
 800554e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005552:	d627      	bvs.n	80055a4 <sqrtf+0x74>
 8005554:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555c:	d522      	bpl.n	80055a4 <sqrtf+0x74>
 800555e:	2301      	movs	r3, #1
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	4b1a      	ldr	r3, [pc, #104]	; (80055cc <sqrtf+0x9c>)
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	ee18 0a10 	vmov	r0, s16
 800556a:	2300      	movs	r3, #0
 800556c:	9308      	str	r3, [sp, #32]
 800556e:	f7fb f803 	bl	8000578 <__aeabi_f2d>
 8005572:	2200      	movs	r2, #0
 8005574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800557c:	2300      	movs	r3, #0
 800557e:	b9ac      	cbnz	r4, 80055ac <sqrtf+0x7c>
 8005580:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005584:	4668      	mov	r0, sp
 8005586:	f000 ff63 	bl	8006450 <matherr>
 800558a:	b1b8      	cbz	r0, 80055bc <sqrtf+0x8c>
 800558c:	9b08      	ldr	r3, [sp, #32]
 800558e:	b11b      	cbz	r3, 8005598 <sqrtf+0x68>
 8005590:	f7fe fec2 	bl	8004318 <__errno>
 8005594:	9b08      	ldr	r3, [sp, #32]
 8005596:	6003      	str	r3, [r0, #0]
 8005598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800559c:	f7fb fb26 	bl	8000bec <__aeabi_d2f>
 80055a0:	ee00 0a10 	vmov	s0, r0
 80055a4:	b00a      	add	sp, #40	; 0x28
 80055a6:	ecbd 8b02 	vpop	{d8}
 80055aa:	bd10      	pop	{r4, pc}
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	f7fb f964 	bl	800087c <__aeabi_ddiv>
 80055b4:	2c02      	cmp	r4, #2
 80055b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055ba:	d1e3      	bne.n	8005584 <sqrtf+0x54>
 80055bc:	f7fe feac 	bl	8004318 <__errno>
 80055c0:	2321      	movs	r3, #33	; 0x21
 80055c2:	6003      	str	r3, [r0, #0]
 80055c4:	e7e2      	b.n	800558c <sqrtf+0x5c>
 80055c6:	bf00      	nop
 80055c8:	20000078 	.word	0x20000078
 80055cc:	0801bb60 	.word	0x0801bb60

080055d0 <__ieee754_rem_pio2>:
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	ec57 6b10 	vmov	r6, r7, d0
 80055d8:	4bc3      	ldr	r3, [pc, #780]	; (80058e8 <__ieee754_rem_pio2+0x318>)
 80055da:	b08d      	sub	sp, #52	; 0x34
 80055dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80055e0:	4598      	cmp	r8, r3
 80055e2:	4604      	mov	r4, r0
 80055e4:	9704      	str	r7, [sp, #16]
 80055e6:	dc07      	bgt.n	80055f8 <__ieee754_rem_pio2+0x28>
 80055e8:	2200      	movs	r2, #0
 80055ea:	2300      	movs	r3, #0
 80055ec:	ed84 0b00 	vstr	d0, [r4]
 80055f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80055f4:	2500      	movs	r5, #0
 80055f6:	e027      	b.n	8005648 <__ieee754_rem_pio2+0x78>
 80055f8:	4bbc      	ldr	r3, [pc, #752]	; (80058ec <__ieee754_rem_pio2+0x31c>)
 80055fa:	4598      	cmp	r8, r3
 80055fc:	dc75      	bgt.n	80056ea <__ieee754_rem_pio2+0x11a>
 80055fe:	9b04      	ldr	r3, [sp, #16]
 8005600:	4dbb      	ldr	r5, [pc, #748]	; (80058f0 <__ieee754_rem_pio2+0x320>)
 8005602:	2b00      	cmp	r3, #0
 8005604:	ee10 0a10 	vmov	r0, s0
 8005608:	a3a9      	add	r3, pc, #676	; (adr r3, 80058b0 <__ieee754_rem_pio2+0x2e0>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	4639      	mov	r1, r7
 8005610:	dd36      	ble.n	8005680 <__ieee754_rem_pio2+0xb0>
 8005612:	f7fa fe51 	bl	80002b8 <__aeabi_dsub>
 8005616:	45a8      	cmp	r8, r5
 8005618:	4606      	mov	r6, r0
 800561a:	460f      	mov	r7, r1
 800561c:	d018      	beq.n	8005650 <__ieee754_rem_pio2+0x80>
 800561e:	a3a6      	add	r3, pc, #664	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x2e8>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fa fe48 	bl	80002b8 <__aeabi_dsub>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	e9c4 2300 	strd	r2, r3, [r4]
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fa fe40 	bl	80002b8 <__aeabi_dsub>
 8005638:	a39f      	add	r3, pc, #636	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x2e8>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa fe3b 	bl	80002b8 <__aeabi_dsub>
 8005642:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005646:	2501      	movs	r5, #1
 8005648:	4628      	mov	r0, r5
 800564a:	b00d      	add	sp, #52	; 0x34
 800564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005650:	a39b      	add	r3, pc, #620	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2f0>)
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	f7fa fe2f 	bl	80002b8 <__aeabi_dsub>
 800565a:	a39b      	add	r3, pc, #620	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2f8>)
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	4606      	mov	r6, r0
 8005662:	460f      	mov	r7, r1
 8005664:	f7fa fe28 	bl	80002b8 <__aeabi_dsub>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	e9c4 2300 	strd	r2, r3, [r4]
 8005670:	4630      	mov	r0, r6
 8005672:	4639      	mov	r1, r7
 8005674:	f7fa fe20 	bl	80002b8 <__aeabi_dsub>
 8005678:	a393      	add	r3, pc, #588	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2f8>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	e7de      	b.n	800563e <__ieee754_rem_pio2+0x6e>
 8005680:	f7fa fe1c 	bl	80002bc <__adddf3>
 8005684:	45a8      	cmp	r8, r5
 8005686:	4606      	mov	r6, r0
 8005688:	460f      	mov	r7, r1
 800568a:	d016      	beq.n	80056ba <__ieee754_rem_pio2+0xea>
 800568c:	a38a      	add	r3, pc, #552	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x2e8>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fa fe13 	bl	80002bc <__adddf3>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	e9c4 2300 	strd	r2, r3, [r4]
 800569e:	4630      	mov	r0, r6
 80056a0:	4639      	mov	r1, r7
 80056a2:	f7fa fe09 	bl	80002b8 <__aeabi_dsub>
 80056a6:	a384      	add	r3, pc, #528	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x2e8>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f7fa fe06 	bl	80002bc <__adddf3>
 80056b0:	f04f 35ff 	mov.w	r5, #4294967295
 80056b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056b8:	e7c6      	b.n	8005648 <__ieee754_rem_pio2+0x78>
 80056ba:	a381      	add	r3, pc, #516	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2f0>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f7fa fdfc 	bl	80002bc <__adddf3>
 80056c4:	a380      	add	r3, pc, #512	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2f8>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	f7fa fdf5 	bl	80002bc <__adddf3>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	e9c4 2300 	strd	r2, r3, [r4]
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	f7fa fdeb 	bl	80002b8 <__aeabi_dsub>
 80056e2:	a379      	add	r3, pc, #484	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2f8>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	e7e0      	b.n	80056ac <__ieee754_rem_pio2+0xdc>
 80056ea:	4b82      	ldr	r3, [pc, #520]	; (80058f4 <__ieee754_rem_pio2+0x324>)
 80056ec:	4598      	cmp	r8, r3
 80056ee:	f300 80d0 	bgt.w	8005892 <__ieee754_rem_pio2+0x2c2>
 80056f2:	f7ff fec9 	bl	8005488 <fabs>
 80056f6:	ec57 6b10 	vmov	r6, r7, d0
 80056fa:	ee10 0a10 	vmov	r0, s0
 80056fe:	a374      	add	r3, pc, #464	; (adr r3, 80058d0 <__ieee754_rem_pio2+0x300>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	4639      	mov	r1, r7
 8005706:	f7fa ff8f 	bl	8000628 <__aeabi_dmul>
 800570a:	2200      	movs	r2, #0
 800570c:	4b7a      	ldr	r3, [pc, #488]	; (80058f8 <__ieee754_rem_pio2+0x328>)
 800570e:	f7fa fdd5 	bl	80002bc <__adddf3>
 8005712:	f7fb fa23 	bl	8000b5c <__aeabi_d2iz>
 8005716:	4605      	mov	r5, r0
 8005718:	f7fa ff1c 	bl	8000554 <__aeabi_i2d>
 800571c:	a364      	add	r3, pc, #400	; (adr r3, 80058b0 <__ieee754_rem_pio2+0x2e0>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005726:	f7fa ff7f 	bl	8000628 <__aeabi_dmul>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4630      	mov	r0, r6
 8005730:	4639      	mov	r1, r7
 8005732:	f7fa fdc1 	bl	80002b8 <__aeabi_dsub>
 8005736:	a360      	add	r3, pc, #384	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x2e8>)
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	4682      	mov	sl, r0
 800573e:	468b      	mov	fp, r1
 8005740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005744:	f7fa ff70 	bl	8000628 <__aeabi_dmul>
 8005748:	2d1f      	cmp	r5, #31
 800574a:	4606      	mov	r6, r0
 800574c:	460f      	mov	r7, r1
 800574e:	dc0c      	bgt.n	800576a <__ieee754_rem_pio2+0x19a>
 8005750:	1e6a      	subs	r2, r5, #1
 8005752:	4b6a      	ldr	r3, [pc, #424]	; (80058fc <__ieee754_rem_pio2+0x32c>)
 8005754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005758:	4543      	cmp	r3, r8
 800575a:	d006      	beq.n	800576a <__ieee754_rem_pio2+0x19a>
 800575c:	4632      	mov	r2, r6
 800575e:	463b      	mov	r3, r7
 8005760:	4650      	mov	r0, sl
 8005762:	4659      	mov	r1, fp
 8005764:	f7fa fda8 	bl	80002b8 <__aeabi_dsub>
 8005768:	e00e      	b.n	8005788 <__ieee754_rem_pio2+0x1b8>
 800576a:	4632      	mov	r2, r6
 800576c:	463b      	mov	r3, r7
 800576e:	4650      	mov	r0, sl
 8005770:	4659      	mov	r1, fp
 8005772:	f7fa fda1 	bl	80002b8 <__aeabi_dsub>
 8005776:	ea4f 5328 	mov.w	r3, r8, asr #20
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	9a05      	ldr	r2, [sp, #20]
 800577e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b10      	cmp	r3, #16
 8005786:	dc02      	bgt.n	800578e <__ieee754_rem_pio2+0x1be>
 8005788:	e9c4 0100 	strd	r0, r1, [r4]
 800578c:	e039      	b.n	8005802 <__ieee754_rem_pio2+0x232>
 800578e:	a34c      	add	r3, pc, #304	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2f0>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005798:	f7fa ff46 	bl	8000628 <__aeabi_dmul>
 800579c:	4606      	mov	r6, r0
 800579e:	460f      	mov	r7, r1
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4650      	mov	r0, sl
 80057a6:	4659      	mov	r1, fp
 80057a8:	f7fa fd86 	bl	80002b8 <__aeabi_dsub>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4680      	mov	r8, r0
 80057b2:	4689      	mov	r9, r1
 80057b4:	4650      	mov	r0, sl
 80057b6:	4659      	mov	r1, fp
 80057b8:	f7fa fd7e 	bl	80002b8 <__aeabi_dsub>
 80057bc:	4632      	mov	r2, r6
 80057be:	463b      	mov	r3, r7
 80057c0:	f7fa fd7a 	bl	80002b8 <__aeabi_dsub>
 80057c4:	a340      	add	r3, pc, #256	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2f8>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	4606      	mov	r6, r0
 80057cc:	460f      	mov	r7, r1
 80057ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d2:	f7fa ff29 	bl	8000628 <__aeabi_dmul>
 80057d6:	4632      	mov	r2, r6
 80057d8:	463b      	mov	r3, r7
 80057da:	f7fa fd6d 	bl	80002b8 <__aeabi_dsub>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4606      	mov	r6, r0
 80057e4:	460f      	mov	r7, r1
 80057e6:	4640      	mov	r0, r8
 80057e8:	4649      	mov	r1, r9
 80057ea:	f7fa fd65 	bl	80002b8 <__aeabi_dsub>
 80057ee:	9a05      	ldr	r2, [sp, #20]
 80057f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b31      	cmp	r3, #49	; 0x31
 80057f8:	dc20      	bgt.n	800583c <__ieee754_rem_pio2+0x26c>
 80057fa:	e9c4 0100 	strd	r0, r1, [r4]
 80057fe:	46c2      	mov	sl, r8
 8005800:	46cb      	mov	fp, r9
 8005802:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005806:	4650      	mov	r0, sl
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	4659      	mov	r1, fp
 800580e:	f7fa fd53 	bl	80002b8 <__aeabi_dsub>
 8005812:	463b      	mov	r3, r7
 8005814:	4632      	mov	r2, r6
 8005816:	f7fa fd4f 	bl	80002b8 <__aeabi_dsub>
 800581a:	9b04      	ldr	r3, [sp, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005822:	f6bf af11 	bge.w	8005648 <__ieee754_rem_pio2+0x78>
 8005826:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800582a:	6063      	str	r3, [r4, #4]
 800582c:	f8c4 8000 	str.w	r8, [r4]
 8005830:	60a0      	str	r0, [r4, #8]
 8005832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005836:	60e3      	str	r3, [r4, #12]
 8005838:	426d      	negs	r5, r5
 800583a:	e705      	b.n	8005648 <__ieee754_rem_pio2+0x78>
 800583c:	a326      	add	r3, pc, #152	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x308>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005846:	f7fa feef 	bl	8000628 <__aeabi_dmul>
 800584a:	4606      	mov	r6, r0
 800584c:	460f      	mov	r7, r1
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fa fd2f 	bl	80002b8 <__aeabi_dsub>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4682      	mov	sl, r0
 8005860:	468b      	mov	fp, r1
 8005862:	4640      	mov	r0, r8
 8005864:	4649      	mov	r1, r9
 8005866:	f7fa fd27 	bl	80002b8 <__aeabi_dsub>
 800586a:	4632      	mov	r2, r6
 800586c:	463b      	mov	r3, r7
 800586e:	f7fa fd23 	bl	80002b8 <__aeabi_dsub>
 8005872:	a31b      	add	r3, pc, #108	; (adr r3, 80058e0 <__ieee754_rem_pio2+0x310>)
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	4606      	mov	r6, r0
 800587a:	460f      	mov	r7, r1
 800587c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005880:	f7fa fed2 	bl	8000628 <__aeabi_dmul>
 8005884:	4632      	mov	r2, r6
 8005886:	463b      	mov	r3, r7
 8005888:	f7fa fd16 	bl	80002b8 <__aeabi_dsub>
 800588c:	4606      	mov	r6, r0
 800588e:	460f      	mov	r7, r1
 8005890:	e764      	b.n	800575c <__ieee754_rem_pio2+0x18c>
 8005892:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <__ieee754_rem_pio2+0x330>)
 8005894:	4598      	cmp	r8, r3
 8005896:	dd35      	ble.n	8005904 <__ieee754_rem_pio2+0x334>
 8005898:	ee10 2a10 	vmov	r2, s0
 800589c:	463b      	mov	r3, r7
 800589e:	4630      	mov	r0, r6
 80058a0:	4639      	mov	r1, r7
 80058a2:	f7fa fd09 	bl	80002b8 <__aeabi_dsub>
 80058a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058aa:	e9c4 0100 	strd	r0, r1, [r4]
 80058ae:	e6a1      	b.n	80055f4 <__ieee754_rem_pio2+0x24>
 80058b0:	54400000 	.word	0x54400000
 80058b4:	3ff921fb 	.word	0x3ff921fb
 80058b8:	1a626331 	.word	0x1a626331
 80058bc:	3dd0b461 	.word	0x3dd0b461
 80058c0:	1a600000 	.word	0x1a600000
 80058c4:	3dd0b461 	.word	0x3dd0b461
 80058c8:	2e037073 	.word	0x2e037073
 80058cc:	3ba3198a 	.word	0x3ba3198a
 80058d0:	6dc9c883 	.word	0x6dc9c883
 80058d4:	3fe45f30 	.word	0x3fe45f30
 80058d8:	2e000000 	.word	0x2e000000
 80058dc:	3ba3198a 	.word	0x3ba3198a
 80058e0:	252049c1 	.word	0x252049c1
 80058e4:	397b839a 	.word	0x397b839a
 80058e8:	3fe921fb 	.word	0x3fe921fb
 80058ec:	4002d97b 	.word	0x4002d97b
 80058f0:	3ff921fb 	.word	0x3ff921fb
 80058f4:	413921fb 	.word	0x413921fb
 80058f8:	3fe00000 	.word	0x3fe00000
 80058fc:	0801bb68 	.word	0x0801bb68
 8005900:	7fefffff 	.word	0x7fefffff
 8005904:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005908:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800590c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005910:	4630      	mov	r0, r6
 8005912:	460f      	mov	r7, r1
 8005914:	f7fb f922 	bl	8000b5c <__aeabi_d2iz>
 8005918:	f7fa fe1c 	bl	8000554 <__aeabi_i2d>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4630      	mov	r0, r6
 8005922:	4639      	mov	r1, r7
 8005924:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005928:	f7fa fcc6 	bl	80002b8 <__aeabi_dsub>
 800592c:	2200      	movs	r2, #0
 800592e:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <__ieee754_rem_pio2+0x3dc>)
 8005930:	f7fa fe7a 	bl	8000628 <__aeabi_dmul>
 8005934:	460f      	mov	r7, r1
 8005936:	4606      	mov	r6, r0
 8005938:	f7fb f910 	bl	8000b5c <__aeabi_d2iz>
 800593c:	f7fa fe0a 	bl	8000554 <__aeabi_i2d>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800594c:	f7fa fcb4 	bl	80002b8 <__aeabi_dsub>
 8005950:	2200      	movs	r2, #0
 8005952:	4b16      	ldr	r3, [pc, #88]	; (80059ac <__ieee754_rem_pio2+0x3dc>)
 8005954:	f7fa fe68 	bl	8000628 <__aeabi_dmul>
 8005958:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800595c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005960:	f04f 0803 	mov.w	r8, #3
 8005964:	2600      	movs	r6, #0
 8005966:	2700      	movs	r7, #0
 8005968:	4632      	mov	r2, r6
 800596a:	463b      	mov	r3, r7
 800596c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005970:	f108 3aff 	add.w	sl, r8, #4294967295
 8005974:	f7fb f8c0 	bl	8000af8 <__aeabi_dcmpeq>
 8005978:	b9b0      	cbnz	r0, 80059a8 <__ieee754_rem_pio2+0x3d8>
 800597a:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <__ieee754_rem_pio2+0x3e0>)
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	2302      	movs	r3, #2
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	462a      	mov	r2, r5
 8005984:	4643      	mov	r3, r8
 8005986:	4621      	mov	r1, r4
 8005988:	a806      	add	r0, sp, #24
 800598a:	f000 f8e1 	bl	8005b50 <__kernel_rem_pio2>
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	4605      	mov	r5, r0
 8005994:	f6bf ae58 	bge.w	8005648 <__ieee754_rem_pio2+0x78>
 8005998:	6863      	ldr	r3, [r4, #4]
 800599a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	68e3      	ldr	r3, [r4, #12]
 80059a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059a6:	e746      	b.n	8005836 <__ieee754_rem_pio2+0x266>
 80059a8:	46d0      	mov	r8, sl
 80059aa:	e7dd      	b.n	8005968 <__ieee754_rem_pio2+0x398>
 80059ac:	41700000 	.word	0x41700000
 80059b0:	0801bbe8 	.word	0x0801bbe8

080059b4 <__ieee754_sqrtf>:
 80059b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80059b8:	4770      	bx	lr
 80059ba:	0000      	movs	r0, r0
 80059bc:	0000      	movs	r0, r0
	...

080059c0 <__kernel_cos>:
 80059c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	ec59 8b10 	vmov	r8, r9, d0
 80059c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80059cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80059d0:	ed2d 8b02 	vpush	{d8}
 80059d4:	eeb0 8a41 	vmov.f32	s16, s2
 80059d8:	eef0 8a61 	vmov.f32	s17, s3
 80059dc:	da07      	bge.n	80059ee <__kernel_cos+0x2e>
 80059de:	ee10 0a10 	vmov	r0, s0
 80059e2:	4649      	mov	r1, r9
 80059e4:	f7fb f8ba 	bl	8000b5c <__aeabi_d2iz>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f000 8089 	beq.w	8005b00 <__kernel_cos+0x140>
 80059ee:	4642      	mov	r2, r8
 80059f0:	464b      	mov	r3, r9
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	f7fa fe17 	bl	8000628 <__aeabi_dmul>
 80059fa:	2200      	movs	r2, #0
 80059fc:	4b4e      	ldr	r3, [pc, #312]	; (8005b38 <__kernel_cos+0x178>)
 80059fe:	4604      	mov	r4, r0
 8005a00:	460d      	mov	r5, r1
 8005a02:	f7fa fe11 	bl	8000628 <__aeabi_dmul>
 8005a06:	a340      	add	r3, pc, #256	; (adr r3, 8005b08 <__kernel_cos+0x148>)
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	4682      	mov	sl, r0
 8005a0e:	468b      	mov	fp, r1
 8005a10:	4620      	mov	r0, r4
 8005a12:	4629      	mov	r1, r5
 8005a14:	f7fa fe08 	bl	8000628 <__aeabi_dmul>
 8005a18:	a33d      	add	r3, pc, #244	; (adr r3, 8005b10 <__kernel_cos+0x150>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa fc4d 	bl	80002bc <__adddf3>
 8005a22:	4622      	mov	r2, r4
 8005a24:	462b      	mov	r3, r5
 8005a26:	f7fa fdff 	bl	8000628 <__aeabi_dmul>
 8005a2a:	a33b      	add	r3, pc, #236	; (adr r3, 8005b18 <__kernel_cos+0x158>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f7fa fc42 	bl	80002b8 <__aeabi_dsub>
 8005a34:	4622      	mov	r2, r4
 8005a36:	462b      	mov	r3, r5
 8005a38:	f7fa fdf6 	bl	8000628 <__aeabi_dmul>
 8005a3c:	a338      	add	r3, pc, #224	; (adr r3, 8005b20 <__kernel_cos+0x160>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa fc3b 	bl	80002bc <__adddf3>
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f7fa fded 	bl	8000628 <__aeabi_dmul>
 8005a4e:	a336      	add	r3, pc, #216	; (adr r3, 8005b28 <__kernel_cos+0x168>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa fc30 	bl	80002b8 <__aeabi_dsub>
 8005a58:	4622      	mov	r2, r4
 8005a5a:	462b      	mov	r3, r5
 8005a5c:	f7fa fde4 	bl	8000628 <__aeabi_dmul>
 8005a60:	a333      	add	r3, pc, #204	; (adr r3, 8005b30 <__kernel_cos+0x170>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fa fc29 	bl	80002bc <__adddf3>
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	462b      	mov	r3, r5
 8005a6e:	f7fa fddb 	bl	8000628 <__aeabi_dmul>
 8005a72:	4622      	mov	r2, r4
 8005a74:	462b      	mov	r3, r5
 8005a76:	f7fa fdd7 	bl	8000628 <__aeabi_dmul>
 8005a7a:	ec53 2b18 	vmov	r2, r3, d8
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460d      	mov	r5, r1
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fdcf 	bl	8000628 <__aeabi_dmul>
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4620      	mov	r0, r4
 8005a92:	f7fa fc11 	bl	80002b8 <__aeabi_dsub>
 8005a96:	4b29      	ldr	r3, [pc, #164]	; (8005b3c <__kernel_cos+0x17c>)
 8005a98:	429e      	cmp	r6, r3
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	4689      	mov	r9, r1
 8005a9e:	dc11      	bgt.n	8005ac4 <__kernel_cos+0x104>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4650      	mov	r0, sl
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	f7fa fc06 	bl	80002b8 <__aeabi_dsub>
 8005aac:	460b      	mov	r3, r1
 8005aae:	4924      	ldr	r1, [pc, #144]	; (8005b40 <__kernel_cos+0x180>)
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f7fa fc00 	bl	80002b8 <__aeabi_dsub>
 8005ab8:	ecbd 8b02 	vpop	{d8}
 8005abc:	ec41 0b10 	vmov	d0, r0, r1
 8005ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <__kernel_cos+0x184>)
 8005ac6:	491e      	ldr	r1, [pc, #120]	; (8005b40 <__kernel_cos+0x180>)
 8005ac8:	429e      	cmp	r6, r3
 8005aca:	bfcc      	ite	gt
 8005acc:	4d1e      	ldrgt	r5, [pc, #120]	; (8005b48 <__kernel_cos+0x188>)
 8005ace:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005ad2:	2400      	movs	r4, #0
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	2000      	movs	r0, #0
 8005ada:	f7fa fbed 	bl	80002b8 <__aeabi_dsub>
 8005ade:	4622      	mov	r2, r4
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	460f      	mov	r7, r1
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	4650      	mov	r0, sl
 8005ae8:	4659      	mov	r1, fp
 8005aea:	f7fa fbe5 	bl	80002b8 <__aeabi_dsub>
 8005aee:	4642      	mov	r2, r8
 8005af0:	464b      	mov	r3, r9
 8005af2:	f7fa fbe1 	bl	80002b8 <__aeabi_dsub>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4630      	mov	r0, r6
 8005afc:	4639      	mov	r1, r7
 8005afe:	e7d9      	b.n	8005ab4 <__kernel_cos+0xf4>
 8005b00:	2000      	movs	r0, #0
 8005b02:	490f      	ldr	r1, [pc, #60]	; (8005b40 <__kernel_cos+0x180>)
 8005b04:	e7d8      	b.n	8005ab8 <__kernel_cos+0xf8>
 8005b06:	bf00      	nop
 8005b08:	be8838d4 	.word	0xbe8838d4
 8005b0c:	bda8fae9 	.word	0xbda8fae9
 8005b10:	bdb4b1c4 	.word	0xbdb4b1c4
 8005b14:	3e21ee9e 	.word	0x3e21ee9e
 8005b18:	809c52ad 	.word	0x809c52ad
 8005b1c:	3e927e4f 	.word	0x3e927e4f
 8005b20:	19cb1590 	.word	0x19cb1590
 8005b24:	3efa01a0 	.word	0x3efa01a0
 8005b28:	16c15177 	.word	0x16c15177
 8005b2c:	3f56c16c 	.word	0x3f56c16c
 8005b30:	5555554c 	.word	0x5555554c
 8005b34:	3fa55555 	.word	0x3fa55555
 8005b38:	3fe00000 	.word	0x3fe00000
 8005b3c:	3fd33332 	.word	0x3fd33332
 8005b40:	3ff00000 	.word	0x3ff00000
 8005b44:	3fe90000 	.word	0x3fe90000
 8005b48:	3fd20000 	.word	0x3fd20000
 8005b4c:	00000000 	.word	0x00000000

08005b50 <__kernel_rem_pio2>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	ed2d 8b02 	vpush	{d8}
 8005b58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005b5c:	1ed4      	subs	r4, r2, #3
 8005b5e:	9308      	str	r3, [sp, #32]
 8005b60:	9101      	str	r1, [sp, #4]
 8005b62:	4bc5      	ldr	r3, [pc, #788]	; (8005e78 <__kernel_rem_pio2+0x328>)
 8005b64:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005b66:	9009      	str	r0, [sp, #36]	; 0x24
 8005b68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	9b08      	ldr	r3, [sp, #32]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	2318      	movs	r3, #24
 8005b76:	fb94 f4f3 	sdiv	r4, r4, r3
 8005b7a:	f06f 0317 	mvn.w	r3, #23
 8005b7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005b82:	fb04 3303 	mla	r3, r4, r3, r3
 8005b86:	eb03 0a02 	add.w	sl, r3, r2
 8005b8a:	9b04      	ldr	r3, [sp, #16]
 8005b8c:	9a07      	ldr	r2, [sp, #28]
 8005b8e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005e68 <__kernel_rem_pio2+0x318>
 8005b92:	eb03 0802 	add.w	r8, r3, r2
 8005b96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005b98:	1aa7      	subs	r7, r4, r2
 8005b9a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005b9e:	ae22      	add	r6, sp, #136	; 0x88
 8005ba0:	2500      	movs	r5, #0
 8005ba2:	4545      	cmp	r5, r8
 8005ba4:	dd13      	ble.n	8005bce <__kernel_rem_pio2+0x7e>
 8005ba6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005e68 <__kernel_rem_pio2+0x318>
 8005baa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005bae:	2600      	movs	r6, #0
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	429e      	cmp	r6, r3
 8005bb4:	dc32      	bgt.n	8005c1c <__kernel_rem_pio2+0xcc>
 8005bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb8:	9302      	str	r3, [sp, #8]
 8005bba:	9b08      	ldr	r3, [sp, #32]
 8005bbc:	199d      	adds	r5, r3, r6
 8005bbe:	ab22      	add	r3, sp, #136	; 0x88
 8005bc0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005bc4:	9306      	str	r3, [sp, #24]
 8005bc6:	ec59 8b18 	vmov	r8, r9, d8
 8005bca:	2700      	movs	r7, #0
 8005bcc:	e01f      	b.n	8005c0e <__kernel_rem_pio2+0xbe>
 8005bce:	42ef      	cmn	r7, r5
 8005bd0:	d407      	bmi.n	8005be2 <__kernel_rem_pio2+0x92>
 8005bd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005bd6:	f7fa fcbd 	bl	8000554 <__aeabi_i2d>
 8005bda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005bde:	3501      	adds	r5, #1
 8005be0:	e7df      	b.n	8005ba2 <__kernel_rem_pio2+0x52>
 8005be2:	ec51 0b18 	vmov	r0, r1, d8
 8005be6:	e7f8      	b.n	8005bda <__kernel_rem_pio2+0x8a>
 8005be8:	9906      	ldr	r1, [sp, #24]
 8005bea:	9d02      	ldr	r5, [sp, #8]
 8005bec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005bf0:	9106      	str	r1, [sp, #24]
 8005bf2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005bf6:	9502      	str	r5, [sp, #8]
 8005bf8:	f7fa fd16 	bl	8000628 <__aeabi_dmul>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa fb5a 	bl	80002bc <__adddf3>
 8005c08:	3701      	adds	r7, #1
 8005c0a:	4680      	mov	r8, r0
 8005c0c:	4689      	mov	r9, r1
 8005c0e:	9b07      	ldr	r3, [sp, #28]
 8005c10:	429f      	cmp	r7, r3
 8005c12:	dde9      	ble.n	8005be8 <__kernel_rem_pio2+0x98>
 8005c14:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005c18:	3601      	adds	r6, #1
 8005c1a:	e7c9      	b.n	8005bb0 <__kernel_rem_pio2+0x60>
 8005c1c:	9b04      	ldr	r3, [sp, #16]
 8005c1e:	aa0e      	add	r2, sp, #56	; 0x38
 8005c20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c24:	930c      	str	r3, [sp, #48]	; 0x30
 8005c26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005c28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005c2c:	9c04      	ldr	r4, [sp, #16]
 8005c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c30:	ab9a      	add	r3, sp, #616	; 0x268
 8005c32:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005c36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c3e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005c42:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005c46:	ab9a      	add	r3, sp, #616	; 0x268
 8005c48:	445b      	add	r3, fp
 8005c4a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005c4e:	2500      	movs	r5, #0
 8005c50:	1b63      	subs	r3, r4, r5
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dc78      	bgt.n	8005d48 <__kernel_rem_pio2+0x1f8>
 8005c56:	4650      	mov	r0, sl
 8005c58:	ec49 8b10 	vmov	d0, r8, r9
 8005c5c:	f000 fbfc 	bl	8006458 <scalbn>
 8005c60:	ec57 6b10 	vmov	r6, r7, d0
 8005c64:	2200      	movs	r2, #0
 8005c66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005c6a:	ee10 0a10 	vmov	r0, s0
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa fcda 	bl	8000628 <__aeabi_dmul>
 8005c74:	ec41 0b10 	vmov	d0, r0, r1
 8005c78:	f000 fb66 	bl	8006348 <floor>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	ec51 0b10 	vmov	r0, r1, d0
 8005c82:	4b7e      	ldr	r3, [pc, #504]	; (8005e7c <__kernel_rem_pio2+0x32c>)
 8005c84:	f7fa fcd0 	bl	8000628 <__aeabi_dmul>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	4639      	mov	r1, r7
 8005c90:	f7fa fb12 	bl	80002b8 <__aeabi_dsub>
 8005c94:	460f      	mov	r7, r1
 8005c96:	4606      	mov	r6, r0
 8005c98:	f7fa ff60 	bl	8000b5c <__aeabi_d2iz>
 8005c9c:	9006      	str	r0, [sp, #24]
 8005c9e:	f7fa fc59 	bl	8000554 <__aeabi_i2d>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	4639      	mov	r1, r7
 8005caa:	f7fa fb05 	bl	80002b8 <__aeabi_dsub>
 8005cae:	f1ba 0f00 	cmp.w	sl, #0
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	460f      	mov	r7, r1
 8005cb6:	dd6c      	ble.n	8005d92 <__kernel_rem_pio2+0x242>
 8005cb8:	1e62      	subs	r2, r4, #1
 8005cba:	ab0e      	add	r3, sp, #56	; 0x38
 8005cbc:	f1ca 0118 	rsb	r1, sl, #24
 8005cc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005cc4:	9d06      	ldr	r5, [sp, #24]
 8005cc6:	fa40 f301 	asr.w	r3, r0, r1
 8005cca:	441d      	add	r5, r3
 8005ccc:	408b      	lsls	r3, r1
 8005cce:	1ac0      	subs	r0, r0, r3
 8005cd0:	ab0e      	add	r3, sp, #56	; 0x38
 8005cd2:	9506      	str	r5, [sp, #24]
 8005cd4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005cd8:	f1ca 0317 	rsb	r3, sl, #23
 8005cdc:	fa40 f303 	asr.w	r3, r0, r3
 8005ce0:	9302      	str	r3, [sp, #8]
 8005ce2:	9b02      	ldr	r3, [sp, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dd62      	ble.n	8005dae <__kernel_rem_pio2+0x25e>
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	2200      	movs	r2, #0
 8005cec:	3301      	adds	r3, #1
 8005cee:	9306      	str	r3, [sp, #24]
 8005cf0:	4615      	mov	r5, r2
 8005cf2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005cf6:	4294      	cmp	r4, r2
 8005cf8:	f300 8095 	bgt.w	8005e26 <__kernel_rem_pio2+0x2d6>
 8005cfc:	f1ba 0f00 	cmp.w	sl, #0
 8005d00:	dd07      	ble.n	8005d12 <__kernel_rem_pio2+0x1c2>
 8005d02:	f1ba 0f01 	cmp.w	sl, #1
 8005d06:	f000 80a2 	beq.w	8005e4e <__kernel_rem_pio2+0x2fe>
 8005d0a:	f1ba 0f02 	cmp.w	sl, #2
 8005d0e:	f000 80c1 	beq.w	8005e94 <__kernel_rem_pio2+0x344>
 8005d12:	9b02      	ldr	r3, [sp, #8]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d14a      	bne.n	8005dae <__kernel_rem_pio2+0x25e>
 8005d18:	4632      	mov	r2, r6
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	4958      	ldr	r1, [pc, #352]	; (8005e80 <__kernel_rem_pio2+0x330>)
 8005d20:	f7fa faca 	bl	80002b8 <__aeabi_dsub>
 8005d24:	4606      	mov	r6, r0
 8005d26:	460f      	mov	r7, r1
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	d040      	beq.n	8005dae <__kernel_rem_pio2+0x25e>
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005e70 <__kernel_rem_pio2+0x320>
 8005d32:	f000 fb91 	bl	8006458 <scalbn>
 8005d36:	4630      	mov	r0, r6
 8005d38:	4639      	mov	r1, r7
 8005d3a:	ec53 2b10 	vmov	r2, r3, d0
 8005d3e:	f7fa fabb 	bl	80002b8 <__aeabi_dsub>
 8005d42:	4606      	mov	r6, r0
 8005d44:	460f      	mov	r7, r1
 8005d46:	e032      	b.n	8005dae <__kernel_rem_pio2+0x25e>
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4b4e      	ldr	r3, [pc, #312]	; (8005e84 <__kernel_rem_pio2+0x334>)
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fc6a 	bl	8000628 <__aeabi_dmul>
 8005d54:	f7fa ff02 	bl	8000b5c <__aeabi_d2iz>
 8005d58:	f7fa fbfc 	bl	8000554 <__aeabi_i2d>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <__kernel_rem_pio2+0x338>)
 8005d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d64:	f7fa fc60 	bl	8000628 <__aeabi_dmul>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	4649      	mov	r1, r9
 8005d70:	f7fa faa2 	bl	80002b8 <__aeabi_dsub>
 8005d74:	f7fa fef2 	bl	8000b5c <__aeabi_d2iz>
 8005d78:	ab0e      	add	r3, sp, #56	; 0x38
 8005d7a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005d7e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d86:	f7fa fa99 	bl	80002bc <__adddf3>
 8005d8a:	3501      	adds	r5, #1
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	4689      	mov	r9, r1
 8005d90:	e75e      	b.n	8005c50 <__kernel_rem_pio2+0x100>
 8005d92:	d105      	bne.n	8005da0 <__kernel_rem_pio2+0x250>
 8005d94:	1e63      	subs	r3, r4, #1
 8005d96:	aa0e      	add	r2, sp, #56	; 0x38
 8005d98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005d9c:	15c3      	asrs	r3, r0, #23
 8005d9e:	e79f      	b.n	8005ce0 <__kernel_rem_pio2+0x190>
 8005da0:	2200      	movs	r2, #0
 8005da2:	4b3a      	ldr	r3, [pc, #232]	; (8005e8c <__kernel_rem_pio2+0x33c>)
 8005da4:	f7fa fec6 	bl	8000b34 <__aeabi_dcmpge>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d139      	bne.n	8005e20 <__kernel_rem_pio2+0x2d0>
 8005dac:	9002      	str	r0, [sp, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	2300      	movs	r3, #0
 8005db2:	4630      	mov	r0, r6
 8005db4:	4639      	mov	r1, r7
 8005db6:	f7fa fe9f 	bl	8000af8 <__aeabi_dcmpeq>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f000 80c7 	beq.w	8005f4e <__kernel_rem_pio2+0x3fe>
 8005dc0:	1e65      	subs	r5, r4, #1
 8005dc2:	462b      	mov	r3, r5
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	9904      	ldr	r1, [sp, #16]
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	da6a      	bge.n	8005ea2 <__kernel_rem_pio2+0x352>
 8005dcc:	2a00      	cmp	r2, #0
 8005dce:	f000 8088 	beq.w	8005ee2 <__kernel_rem_pio2+0x392>
 8005dd2:	ab0e      	add	r3, sp, #56	; 0x38
 8005dd4:	f1aa 0a18 	sub.w	sl, sl, #24
 8005dd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80b4 	beq.w	8005f4a <__kernel_rem_pio2+0x3fa>
 8005de2:	4650      	mov	r0, sl
 8005de4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005e70 <__kernel_rem_pio2+0x320>
 8005de8:	f000 fb36 	bl	8006458 <scalbn>
 8005dec:	00ec      	lsls	r4, r5, #3
 8005dee:	ab72      	add	r3, sp, #456	; 0x1c8
 8005df0:	191e      	adds	r6, r3, r4
 8005df2:	ec59 8b10 	vmov	r8, r9, d0
 8005df6:	f106 0a08 	add.w	sl, r6, #8
 8005dfa:	462f      	mov	r7, r5
 8005dfc:	2f00      	cmp	r7, #0
 8005dfe:	f280 80df 	bge.w	8005fc0 <__kernel_rem_pio2+0x470>
 8005e02:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005e68 <__kernel_rem_pio2+0x318>
 8005e06:	f04f 0a00 	mov.w	sl, #0
 8005e0a:	eba5 030a 	sub.w	r3, r5, sl
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f2c0 810a 	blt.w	8006028 <__kernel_rem_pio2+0x4d8>
 8005e14:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005e90 <__kernel_rem_pio2+0x340>
 8005e18:	ec59 8b18 	vmov	r8, r9, d8
 8005e1c:	2700      	movs	r7, #0
 8005e1e:	e0f5      	b.n	800600c <__kernel_rem_pio2+0x4bc>
 8005e20:	2302      	movs	r3, #2
 8005e22:	9302      	str	r3, [sp, #8]
 8005e24:	e760      	b.n	8005ce8 <__kernel_rem_pio2+0x198>
 8005e26:	ab0e      	add	r3, sp, #56	; 0x38
 8005e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2c:	b94d      	cbnz	r5, 8005e42 <__kernel_rem_pio2+0x2f2>
 8005e2e:	b12b      	cbz	r3, 8005e3c <__kernel_rem_pio2+0x2ec>
 8005e30:	a80e      	add	r0, sp, #56	; 0x38
 8005e32:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005e36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	3201      	adds	r2, #1
 8005e3e:	461d      	mov	r5, r3
 8005e40:	e759      	b.n	8005cf6 <__kernel_rem_pio2+0x1a6>
 8005e42:	a80e      	add	r0, sp, #56	; 0x38
 8005e44:	1acb      	subs	r3, r1, r3
 8005e46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	e7f6      	b.n	8005e3c <__kernel_rem_pio2+0x2ec>
 8005e4e:	1e62      	subs	r2, r4, #1
 8005e50:	ab0e      	add	r3, sp, #56	; 0x38
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005e5a:	a90e      	add	r1, sp, #56	; 0x38
 8005e5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005e60:	e757      	b.n	8005d12 <__kernel_rem_pio2+0x1c2>
 8005e62:	bf00      	nop
 8005e64:	f3af 8000 	nop.w
	...
 8005e74:	3ff00000 	.word	0x3ff00000
 8005e78:	0801bd30 	.word	0x0801bd30
 8005e7c:	40200000 	.word	0x40200000
 8005e80:	3ff00000 	.word	0x3ff00000
 8005e84:	3e700000 	.word	0x3e700000
 8005e88:	41700000 	.word	0x41700000
 8005e8c:	3fe00000 	.word	0x3fe00000
 8005e90:	0801bcf0 	.word	0x0801bcf0
 8005e94:	1e62      	subs	r2, r4, #1
 8005e96:	ab0e      	add	r3, sp, #56	; 0x38
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ea0:	e7db      	b.n	8005e5a <__kernel_rem_pio2+0x30a>
 8005ea2:	a90e      	add	r1, sp, #56	; 0x38
 8005ea4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	e78b      	b.n	8005dc6 <__kernel_rem_pio2+0x276>
 8005eae:	3301      	adds	r3, #1
 8005eb0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d0fa      	beq.n	8005eae <__kernel_rem_pio2+0x35e>
 8005eb8:	9a08      	ldr	r2, [sp, #32]
 8005eba:	4422      	add	r2, r4
 8005ebc:	00d2      	lsls	r2, r2, #3
 8005ebe:	a922      	add	r1, sp, #136	; 0x88
 8005ec0:	18e3      	adds	r3, r4, r3
 8005ec2:	9206      	str	r2, [sp, #24]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	f10b 0108 	add.w	r1, fp, #8
 8005ecc:	f102 0308 	add.w	r3, r2, #8
 8005ed0:	1c66      	adds	r6, r4, #1
 8005ed2:	910a      	str	r1, [sp, #40]	; 0x28
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ed8:	9b02      	ldr	r3, [sp, #8]
 8005eda:	42b3      	cmp	r3, r6
 8005edc:	da04      	bge.n	8005ee8 <__kernel_rem_pio2+0x398>
 8005ede:	461c      	mov	r4, r3
 8005ee0:	e6a6      	b.n	8005c30 <__kernel_rem_pio2+0xe0>
 8005ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e7e3      	b.n	8005eb0 <__kernel_rem_pio2+0x360>
 8005ee8:	9b06      	ldr	r3, [sp, #24]
 8005eea:	18ef      	adds	r7, r5, r3
 8005eec:	ab22      	add	r3, sp, #136	; 0x88
 8005eee:	441f      	add	r7, r3
 8005ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ef2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ef6:	f7fa fb2d 	bl	8000554 <__aeabi_i2d>
 8005efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efc:	461c      	mov	r4, r3
 8005efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f00:	e9c7 0100 	strd	r0, r1, [r7]
 8005f04:	eb03 0b05 	add.w	fp, r3, r5
 8005f08:	2700      	movs	r7, #0
 8005f0a:	f04f 0800 	mov.w	r8, #0
 8005f0e:	f04f 0900 	mov.w	r9, #0
 8005f12:	9b07      	ldr	r3, [sp, #28]
 8005f14:	429f      	cmp	r7, r3
 8005f16:	dd08      	ble.n	8005f2a <__kernel_rem_pio2+0x3da>
 8005f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1a:	aa72      	add	r2, sp, #456	; 0x1c8
 8005f1c:	18eb      	adds	r3, r5, r3
 8005f1e:	4413      	add	r3, r2
 8005f20:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005f24:	3601      	adds	r6, #1
 8005f26:	3508      	adds	r5, #8
 8005f28:	e7d6      	b.n	8005ed8 <__kernel_rem_pio2+0x388>
 8005f2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005f2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005f32:	f7fa fb79 	bl	8000628 <__aeabi_dmul>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	f7fa f9bd 	bl	80002bc <__adddf3>
 8005f42:	3701      	adds	r7, #1
 8005f44:	4680      	mov	r8, r0
 8005f46:	4689      	mov	r9, r1
 8005f48:	e7e3      	b.n	8005f12 <__kernel_rem_pio2+0x3c2>
 8005f4a:	3d01      	subs	r5, #1
 8005f4c:	e741      	b.n	8005dd2 <__kernel_rem_pio2+0x282>
 8005f4e:	f1ca 0000 	rsb	r0, sl, #0
 8005f52:	ec47 6b10 	vmov	d0, r6, r7
 8005f56:	f000 fa7f 	bl	8006458 <scalbn>
 8005f5a:	ec57 6b10 	vmov	r6, r7, d0
 8005f5e:	2200      	movs	r2, #0
 8005f60:	4b99      	ldr	r3, [pc, #612]	; (80061c8 <__kernel_rem_pio2+0x678>)
 8005f62:	ee10 0a10 	vmov	r0, s0
 8005f66:	4639      	mov	r1, r7
 8005f68:	f7fa fde4 	bl	8000b34 <__aeabi_dcmpge>
 8005f6c:	b1f8      	cbz	r0, 8005fae <__kernel_rem_pio2+0x45e>
 8005f6e:	2200      	movs	r2, #0
 8005f70:	4b96      	ldr	r3, [pc, #600]	; (80061cc <__kernel_rem_pio2+0x67c>)
 8005f72:	4630      	mov	r0, r6
 8005f74:	4639      	mov	r1, r7
 8005f76:	f7fa fb57 	bl	8000628 <__aeabi_dmul>
 8005f7a:	f7fa fdef 	bl	8000b5c <__aeabi_d2iz>
 8005f7e:	4680      	mov	r8, r0
 8005f80:	f7fa fae8 	bl	8000554 <__aeabi_i2d>
 8005f84:	2200      	movs	r2, #0
 8005f86:	4b90      	ldr	r3, [pc, #576]	; (80061c8 <__kernel_rem_pio2+0x678>)
 8005f88:	f7fa fb4e 	bl	8000628 <__aeabi_dmul>
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4639      	mov	r1, r7
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7fa f990 	bl	80002b8 <__aeabi_dsub>
 8005f98:	f7fa fde0 	bl	8000b5c <__aeabi_d2iz>
 8005f9c:	1c65      	adds	r5, r4, #1
 8005f9e:	ab0e      	add	r3, sp, #56	; 0x38
 8005fa0:	f10a 0a18 	add.w	sl, sl, #24
 8005fa4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005fa8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005fac:	e719      	b.n	8005de2 <__kernel_rem_pio2+0x292>
 8005fae:	4630      	mov	r0, r6
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	f7fa fdd3 	bl	8000b5c <__aeabi_d2iz>
 8005fb6:	ab0e      	add	r3, sp, #56	; 0x38
 8005fb8:	4625      	mov	r5, r4
 8005fba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005fbe:	e710      	b.n	8005de2 <__kernel_rem_pio2+0x292>
 8005fc0:	ab0e      	add	r3, sp, #56	; 0x38
 8005fc2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005fc6:	f7fa fac5 	bl	8000554 <__aeabi_i2d>
 8005fca:	4642      	mov	r2, r8
 8005fcc:	464b      	mov	r3, r9
 8005fce:	f7fa fb2b 	bl	8000628 <__aeabi_dmul>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005fd8:	4b7c      	ldr	r3, [pc, #496]	; (80061cc <__kernel_rem_pio2+0x67c>)
 8005fda:	4640      	mov	r0, r8
 8005fdc:	4649      	mov	r1, r9
 8005fde:	f7fa fb23 	bl	8000628 <__aeabi_dmul>
 8005fe2:	3f01      	subs	r7, #1
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	4689      	mov	r9, r1
 8005fe8:	e708      	b.n	8005dfc <__kernel_rem_pio2+0x2ac>
 8005fea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005ff6:	f7fa fb17 	bl	8000628 <__aeabi_dmul>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa f95b 	bl	80002bc <__adddf3>
 8006006:	3701      	adds	r7, #1
 8006008:	4680      	mov	r8, r0
 800600a:	4689      	mov	r9, r1
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	429f      	cmp	r7, r3
 8006010:	dc01      	bgt.n	8006016 <__kernel_rem_pio2+0x4c6>
 8006012:	45ba      	cmp	sl, r7
 8006014:	dae9      	bge.n	8005fea <__kernel_rem_pio2+0x49a>
 8006016:	ab4a      	add	r3, sp, #296	; 0x128
 8006018:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800601c:	e9c3 8900 	strd	r8, r9, [r3]
 8006020:	f10a 0a01 	add.w	sl, sl, #1
 8006024:	3e08      	subs	r6, #8
 8006026:	e6f0      	b.n	8005e0a <__kernel_rem_pio2+0x2ba>
 8006028:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800602a:	2b03      	cmp	r3, #3
 800602c:	d85b      	bhi.n	80060e6 <__kernel_rem_pio2+0x596>
 800602e:	e8df f003 	tbb	[pc, r3]
 8006032:	264a      	.short	0x264a
 8006034:	0226      	.short	0x0226
 8006036:	ab9a      	add	r3, sp, #616	; 0x268
 8006038:	441c      	add	r4, r3
 800603a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800603e:	46a2      	mov	sl, r4
 8006040:	46ab      	mov	fp, r5
 8006042:	f1bb 0f00 	cmp.w	fp, #0
 8006046:	dc6c      	bgt.n	8006122 <__kernel_rem_pio2+0x5d2>
 8006048:	46a2      	mov	sl, r4
 800604a:	46ab      	mov	fp, r5
 800604c:	f1bb 0f01 	cmp.w	fp, #1
 8006050:	f300 8086 	bgt.w	8006160 <__kernel_rem_pio2+0x610>
 8006054:	2000      	movs	r0, #0
 8006056:	2100      	movs	r1, #0
 8006058:	2d01      	cmp	r5, #1
 800605a:	f300 80a0 	bgt.w	800619e <__kernel_rem_pio2+0x64e>
 800605e:	9b02      	ldr	r3, [sp, #8]
 8006060:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006064:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006068:	2b00      	cmp	r3, #0
 800606a:	f040 809e 	bne.w	80061aa <__kernel_rem_pio2+0x65a>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	e9c3 7800 	strd	r7, r8, [r3]
 8006074:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006078:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800607c:	e033      	b.n	80060e6 <__kernel_rem_pio2+0x596>
 800607e:	3408      	adds	r4, #8
 8006080:	ab4a      	add	r3, sp, #296	; 0x128
 8006082:	441c      	add	r4, r3
 8006084:	462e      	mov	r6, r5
 8006086:	2000      	movs	r0, #0
 8006088:	2100      	movs	r1, #0
 800608a:	2e00      	cmp	r6, #0
 800608c:	da3a      	bge.n	8006104 <__kernel_rem_pio2+0x5b4>
 800608e:	9b02      	ldr	r3, [sp, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d03d      	beq.n	8006110 <__kernel_rem_pio2+0x5c0>
 8006094:	4602      	mov	r2, r0
 8006096:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800609a:	9c01      	ldr	r4, [sp, #4]
 800609c:	e9c4 2300 	strd	r2, r3, [r4]
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80060a8:	f7fa f906 	bl	80002b8 <__aeabi_dsub>
 80060ac:	ae4c      	add	r6, sp, #304	; 0x130
 80060ae:	2401      	movs	r4, #1
 80060b0:	42a5      	cmp	r5, r4
 80060b2:	da30      	bge.n	8006116 <__kernel_rem_pio2+0x5c6>
 80060b4:	9b02      	ldr	r3, [sp, #8]
 80060b6:	b113      	cbz	r3, 80060be <__kernel_rem_pio2+0x56e>
 80060b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060bc:	4619      	mov	r1, r3
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80060c4:	e00f      	b.n	80060e6 <__kernel_rem_pio2+0x596>
 80060c6:	ab9a      	add	r3, sp, #616	; 0x268
 80060c8:	441c      	add	r4, r3
 80060ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80060ce:	2000      	movs	r0, #0
 80060d0:	2100      	movs	r1, #0
 80060d2:	2d00      	cmp	r5, #0
 80060d4:	da10      	bge.n	80060f8 <__kernel_rem_pio2+0x5a8>
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	b113      	cbz	r3, 80060e0 <__kernel_rem_pio2+0x590>
 80060da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060de:	4619      	mov	r1, r3
 80060e0:	9b01      	ldr	r3, [sp, #4]
 80060e2:	e9c3 0100 	strd	r0, r1, [r3]
 80060e6:	9b06      	ldr	r3, [sp, #24]
 80060e8:	f003 0007 	and.w	r0, r3, #7
 80060ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80060f0:	ecbd 8b02 	vpop	{d8}
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80060fc:	f7fa f8de 	bl	80002bc <__adddf3>
 8006100:	3d01      	subs	r5, #1
 8006102:	e7e6      	b.n	80060d2 <__kernel_rem_pio2+0x582>
 8006104:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006108:	f7fa f8d8 	bl	80002bc <__adddf3>
 800610c:	3e01      	subs	r6, #1
 800610e:	e7bc      	b.n	800608a <__kernel_rem_pio2+0x53a>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	e7c1      	b.n	800609a <__kernel_rem_pio2+0x54a>
 8006116:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800611a:	f7fa f8cf 	bl	80002bc <__adddf3>
 800611e:	3401      	adds	r4, #1
 8006120:	e7c6      	b.n	80060b0 <__kernel_rem_pio2+0x560>
 8006122:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006126:	ed3a 7b02 	vldmdb	sl!, {d7}
 800612a:	4640      	mov	r0, r8
 800612c:	ec53 2b17 	vmov	r2, r3, d7
 8006130:	4649      	mov	r1, r9
 8006132:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006136:	f7fa f8c1 	bl	80002bc <__adddf3>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4606      	mov	r6, r0
 8006140:	460f      	mov	r7, r1
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa f8b7 	bl	80002b8 <__aeabi_dsub>
 800614a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800614e:	f7fa f8b5 	bl	80002bc <__adddf3>
 8006152:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006156:	e9ca 0100 	strd	r0, r1, [sl]
 800615a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800615e:	e770      	b.n	8006042 <__kernel_rem_pio2+0x4f2>
 8006160:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006164:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006168:	4630      	mov	r0, r6
 800616a:	ec53 2b17 	vmov	r2, r3, d7
 800616e:	4639      	mov	r1, r7
 8006170:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006174:	f7fa f8a2 	bl	80002bc <__adddf3>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4680      	mov	r8, r0
 800617e:	4689      	mov	r9, r1
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	f7fa f898 	bl	80002b8 <__aeabi_dsub>
 8006188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800618c:	f7fa f896 	bl	80002bc <__adddf3>
 8006190:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006194:	e9ca 0100 	strd	r0, r1, [sl]
 8006198:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800619c:	e756      	b.n	800604c <__kernel_rem_pio2+0x4fc>
 800619e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80061a2:	f7fa f88b 	bl	80002bc <__adddf3>
 80061a6:	3d01      	subs	r5, #1
 80061a8:	e756      	b.n	8006058 <__kernel_rem_pio2+0x508>
 80061aa:	9b01      	ldr	r3, [sp, #4]
 80061ac:	9a01      	ldr	r2, [sp, #4]
 80061ae:	601f      	str	r7, [r3, #0]
 80061b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80061b4:	605c      	str	r4, [r3, #4]
 80061b6:	609d      	str	r5, [r3, #8]
 80061b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061bc:	60d3      	str	r3, [r2, #12]
 80061be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061c2:	6110      	str	r0, [r2, #16]
 80061c4:	6153      	str	r3, [r2, #20]
 80061c6:	e78e      	b.n	80060e6 <__kernel_rem_pio2+0x596>
 80061c8:	41700000 	.word	0x41700000
 80061cc:	3e700000 	.word	0x3e700000

080061d0 <__kernel_sin>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	ec55 4b10 	vmov	r4, r5, d0
 80061d8:	b085      	sub	sp, #20
 80061da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80061e2:	ed8d 1b00 	vstr	d1, [sp]
 80061e6:	9002      	str	r0, [sp, #8]
 80061e8:	da06      	bge.n	80061f8 <__kernel_sin+0x28>
 80061ea:	ee10 0a10 	vmov	r0, s0
 80061ee:	4629      	mov	r1, r5
 80061f0:	f7fa fcb4 	bl	8000b5c <__aeabi_d2iz>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d051      	beq.n	800629c <__kernel_sin+0xcc>
 80061f8:	4622      	mov	r2, r4
 80061fa:	462b      	mov	r3, r5
 80061fc:	4620      	mov	r0, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	f7fa fa12 	bl	8000628 <__aeabi_dmul>
 8006204:	4682      	mov	sl, r0
 8006206:	468b      	mov	fp, r1
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4620      	mov	r0, r4
 800620e:	4629      	mov	r1, r5
 8006210:	f7fa fa0a 	bl	8000628 <__aeabi_dmul>
 8006214:	a341      	add	r3, pc, #260	; (adr r3, 800631c <__kernel_sin+0x14c>)
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	4680      	mov	r8, r0
 800621c:	4689      	mov	r9, r1
 800621e:	4650      	mov	r0, sl
 8006220:	4659      	mov	r1, fp
 8006222:	f7fa fa01 	bl	8000628 <__aeabi_dmul>
 8006226:	a33f      	add	r3, pc, #252	; (adr r3, 8006324 <__kernel_sin+0x154>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7fa f844 	bl	80002b8 <__aeabi_dsub>
 8006230:	4652      	mov	r2, sl
 8006232:	465b      	mov	r3, fp
 8006234:	f7fa f9f8 	bl	8000628 <__aeabi_dmul>
 8006238:	a33c      	add	r3, pc, #240	; (adr r3, 800632c <__kernel_sin+0x15c>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa f83d 	bl	80002bc <__adddf3>
 8006242:	4652      	mov	r2, sl
 8006244:	465b      	mov	r3, fp
 8006246:	f7fa f9ef 	bl	8000628 <__aeabi_dmul>
 800624a:	a33a      	add	r3, pc, #232	; (adr r3, 8006334 <__kernel_sin+0x164>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f832 	bl	80002b8 <__aeabi_dsub>
 8006254:	4652      	mov	r2, sl
 8006256:	465b      	mov	r3, fp
 8006258:	f7fa f9e6 	bl	8000628 <__aeabi_dmul>
 800625c:	a337      	add	r3, pc, #220	; (adr r3, 800633c <__kernel_sin+0x16c>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f7fa f82b 	bl	80002bc <__adddf3>
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	4606      	mov	r6, r0
 800626a:	460f      	mov	r7, r1
 800626c:	b9db      	cbnz	r3, 80062a6 <__kernel_sin+0xd6>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4650      	mov	r0, sl
 8006274:	4659      	mov	r1, fp
 8006276:	f7fa f9d7 	bl	8000628 <__aeabi_dmul>
 800627a:	a325      	add	r3, pc, #148	; (adr r3, 8006310 <__kernel_sin+0x140>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7fa f81a 	bl	80002b8 <__aeabi_dsub>
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	f7fa f9ce 	bl	8000628 <__aeabi_dmul>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7fa f812 	bl	80002bc <__adddf3>
 8006298:	4604      	mov	r4, r0
 800629a:	460d      	mov	r5, r1
 800629c:	ec45 4b10 	vmov	d0, r4, r5
 80062a0:	b005      	add	sp, #20
 80062a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a6:	2200      	movs	r2, #0
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <__kernel_sin+0x148>)
 80062aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062ae:	f7fa f9bb 	bl	8000628 <__aeabi_dmul>
 80062b2:	4632      	mov	r2, r6
 80062b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b8:	463b      	mov	r3, r7
 80062ba:	4640      	mov	r0, r8
 80062bc:	4649      	mov	r1, r9
 80062be:	f7fa f9b3 	bl	8000628 <__aeabi_dmul>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ca:	f7f9 fff5 	bl	80002b8 <__aeabi_dsub>
 80062ce:	4652      	mov	r2, sl
 80062d0:	465b      	mov	r3, fp
 80062d2:	f7fa f9a9 	bl	8000628 <__aeabi_dmul>
 80062d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062da:	f7f9 ffed 	bl	80002b8 <__aeabi_dsub>
 80062de:	a30c      	add	r3, pc, #48	; (adr r3, 8006310 <__kernel_sin+0x140>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	4606      	mov	r6, r0
 80062e6:	460f      	mov	r7, r1
 80062e8:	4640      	mov	r0, r8
 80062ea:	4649      	mov	r1, r9
 80062ec:	f7fa f99c 	bl	8000628 <__aeabi_dmul>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4630      	mov	r0, r6
 80062f6:	4639      	mov	r1, r7
 80062f8:	f7f9 ffe0 	bl	80002bc <__adddf3>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4620      	mov	r0, r4
 8006302:	4629      	mov	r1, r5
 8006304:	f7f9 ffd8 	bl	80002b8 <__aeabi_dsub>
 8006308:	e7c6      	b.n	8006298 <__kernel_sin+0xc8>
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w
 8006310:	55555549 	.word	0x55555549
 8006314:	3fc55555 	.word	0x3fc55555
 8006318:	3fe00000 	.word	0x3fe00000
 800631c:	5acfd57c 	.word	0x5acfd57c
 8006320:	3de5d93a 	.word	0x3de5d93a
 8006324:	8a2b9ceb 	.word	0x8a2b9ceb
 8006328:	3e5ae5e6 	.word	0x3e5ae5e6
 800632c:	57b1fe7d 	.word	0x57b1fe7d
 8006330:	3ec71de3 	.word	0x3ec71de3
 8006334:	19c161d5 	.word	0x19c161d5
 8006338:	3f2a01a0 	.word	0x3f2a01a0
 800633c:	1110f8a6 	.word	0x1110f8a6
 8006340:	3f811111 	.word	0x3f811111
 8006344:	00000000 	.word	0x00000000

08006348 <floor>:
 8006348:	ec51 0b10 	vmov	r0, r1, d0
 800634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006354:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006358:	2e13      	cmp	r6, #19
 800635a:	460c      	mov	r4, r1
 800635c:	ee10 5a10 	vmov	r5, s0
 8006360:	4680      	mov	r8, r0
 8006362:	dc34      	bgt.n	80063ce <floor+0x86>
 8006364:	2e00      	cmp	r6, #0
 8006366:	da16      	bge.n	8006396 <floor+0x4e>
 8006368:	a335      	add	r3, pc, #212	; (adr r3, 8006440 <floor+0xf8>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7f9 ffa5 	bl	80002bc <__adddf3>
 8006372:	2200      	movs	r2, #0
 8006374:	2300      	movs	r3, #0
 8006376:	f7fa fbe7 	bl	8000b48 <__aeabi_dcmpgt>
 800637a:	b148      	cbz	r0, 8006390 <floor+0x48>
 800637c:	2c00      	cmp	r4, #0
 800637e:	da59      	bge.n	8006434 <floor+0xec>
 8006380:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006384:	4a30      	ldr	r2, [pc, #192]	; (8006448 <floor+0x100>)
 8006386:	432b      	orrs	r3, r5
 8006388:	2500      	movs	r5, #0
 800638a:	42ab      	cmp	r3, r5
 800638c:	bf18      	it	ne
 800638e:	4614      	movne	r4, r2
 8006390:	4621      	mov	r1, r4
 8006392:	4628      	mov	r0, r5
 8006394:	e025      	b.n	80063e2 <floor+0x9a>
 8006396:	4f2d      	ldr	r7, [pc, #180]	; (800644c <floor+0x104>)
 8006398:	4137      	asrs	r7, r6
 800639a:	ea01 0307 	and.w	r3, r1, r7
 800639e:	4303      	orrs	r3, r0
 80063a0:	d01f      	beq.n	80063e2 <floor+0x9a>
 80063a2:	a327      	add	r3, pc, #156	; (adr r3, 8006440 <floor+0xf8>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f7f9 ff88 	bl	80002bc <__adddf3>
 80063ac:	2200      	movs	r2, #0
 80063ae:	2300      	movs	r3, #0
 80063b0:	f7fa fbca 	bl	8000b48 <__aeabi_dcmpgt>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0eb      	beq.n	8006390 <floor+0x48>
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	bfbe      	ittt	lt
 80063bc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80063c0:	fa43 f606 	asrlt.w	r6, r3, r6
 80063c4:	19a4      	addlt	r4, r4, r6
 80063c6:	ea24 0407 	bic.w	r4, r4, r7
 80063ca:	2500      	movs	r5, #0
 80063cc:	e7e0      	b.n	8006390 <floor+0x48>
 80063ce:	2e33      	cmp	r6, #51	; 0x33
 80063d0:	dd0b      	ble.n	80063ea <floor+0xa2>
 80063d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80063d6:	d104      	bne.n	80063e2 <floor+0x9a>
 80063d8:	ee10 2a10 	vmov	r2, s0
 80063dc:	460b      	mov	r3, r1
 80063de:	f7f9 ff6d 	bl	80002bc <__adddf3>
 80063e2:	ec41 0b10 	vmov	d0, r0, r1
 80063e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80063ee:	f04f 33ff 	mov.w	r3, #4294967295
 80063f2:	fa23 f707 	lsr.w	r7, r3, r7
 80063f6:	4207      	tst	r7, r0
 80063f8:	d0f3      	beq.n	80063e2 <floor+0x9a>
 80063fa:	a311      	add	r3, pc, #68	; (adr r3, 8006440 <floor+0xf8>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f7f9 ff5c 	bl	80002bc <__adddf3>
 8006404:	2200      	movs	r2, #0
 8006406:	2300      	movs	r3, #0
 8006408:	f7fa fb9e 	bl	8000b48 <__aeabi_dcmpgt>
 800640c:	2800      	cmp	r0, #0
 800640e:	d0bf      	beq.n	8006390 <floor+0x48>
 8006410:	2c00      	cmp	r4, #0
 8006412:	da02      	bge.n	800641a <floor+0xd2>
 8006414:	2e14      	cmp	r6, #20
 8006416:	d103      	bne.n	8006420 <floor+0xd8>
 8006418:	3401      	adds	r4, #1
 800641a:	ea25 0507 	bic.w	r5, r5, r7
 800641e:	e7b7      	b.n	8006390 <floor+0x48>
 8006420:	2301      	movs	r3, #1
 8006422:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006426:	fa03 f606 	lsl.w	r6, r3, r6
 800642a:	4435      	add	r5, r6
 800642c:	4545      	cmp	r5, r8
 800642e:	bf38      	it	cc
 8006430:	18e4      	addcc	r4, r4, r3
 8006432:	e7f2      	b.n	800641a <floor+0xd2>
 8006434:	2500      	movs	r5, #0
 8006436:	462c      	mov	r4, r5
 8006438:	e7aa      	b.n	8006390 <floor+0x48>
 800643a:	bf00      	nop
 800643c:	f3af 8000 	nop.w
 8006440:	8800759c 	.word	0x8800759c
 8006444:	7e37e43c 	.word	0x7e37e43c
 8006448:	bff00000 	.word	0xbff00000
 800644c:	000fffff 	.word	0x000fffff

08006450 <matherr>:
 8006450:	2000      	movs	r0, #0
 8006452:	4770      	bx	lr
 8006454:	0000      	movs	r0, r0
	...

08006458 <scalbn>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	ec55 4b10 	vmov	r4, r5, d0
 800645e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006462:	4606      	mov	r6, r0
 8006464:	462b      	mov	r3, r5
 8006466:	b9aa      	cbnz	r2, 8006494 <scalbn+0x3c>
 8006468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800646c:	4323      	orrs	r3, r4
 800646e:	d03b      	beq.n	80064e8 <scalbn+0x90>
 8006470:	4b31      	ldr	r3, [pc, #196]	; (8006538 <scalbn+0xe0>)
 8006472:	4629      	mov	r1, r5
 8006474:	2200      	movs	r2, #0
 8006476:	ee10 0a10 	vmov	r0, s0
 800647a:	f7fa f8d5 	bl	8000628 <__aeabi_dmul>
 800647e:	4b2f      	ldr	r3, [pc, #188]	; (800653c <scalbn+0xe4>)
 8006480:	429e      	cmp	r6, r3
 8006482:	4604      	mov	r4, r0
 8006484:	460d      	mov	r5, r1
 8006486:	da12      	bge.n	80064ae <scalbn+0x56>
 8006488:	a327      	add	r3, pc, #156	; (adr r3, 8006528 <scalbn+0xd0>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f7fa f8cb 	bl	8000628 <__aeabi_dmul>
 8006492:	e009      	b.n	80064a8 <scalbn+0x50>
 8006494:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006498:	428a      	cmp	r2, r1
 800649a:	d10c      	bne.n	80064b6 <scalbn+0x5e>
 800649c:	ee10 2a10 	vmov	r2, s0
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7f9 ff0a 	bl	80002bc <__adddf3>
 80064a8:	4604      	mov	r4, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	e01c      	b.n	80064e8 <scalbn+0x90>
 80064ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80064b2:	460b      	mov	r3, r1
 80064b4:	3a36      	subs	r2, #54	; 0x36
 80064b6:	4432      	add	r2, r6
 80064b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80064bc:	428a      	cmp	r2, r1
 80064be:	dd0b      	ble.n	80064d8 <scalbn+0x80>
 80064c0:	ec45 4b11 	vmov	d1, r4, r5
 80064c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006530 <scalbn+0xd8>
 80064c8:	f000 f83c 	bl	8006544 <copysign>
 80064cc:	a318      	add	r3, pc, #96	; (adr r3, 8006530 <scalbn+0xd8>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	ec51 0b10 	vmov	r0, r1, d0
 80064d6:	e7da      	b.n	800648e <scalbn+0x36>
 80064d8:	2a00      	cmp	r2, #0
 80064da:	dd08      	ble.n	80064ee <scalbn+0x96>
 80064dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80064e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80064e8:	ec45 4b10 	vmov	d0, r4, r5
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
 80064ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80064f2:	da0d      	bge.n	8006510 <scalbn+0xb8>
 80064f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80064f8:	429e      	cmp	r6, r3
 80064fa:	ec45 4b11 	vmov	d1, r4, r5
 80064fe:	dce1      	bgt.n	80064c4 <scalbn+0x6c>
 8006500:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006528 <scalbn+0xd0>
 8006504:	f000 f81e 	bl	8006544 <copysign>
 8006508:	a307      	add	r3, pc, #28	; (adr r3, 8006528 <scalbn+0xd0>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	e7e0      	b.n	80064d2 <scalbn+0x7a>
 8006510:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006514:	3236      	adds	r2, #54	; 0x36
 8006516:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800651a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800651e:	4620      	mov	r0, r4
 8006520:	4629      	mov	r1, r5
 8006522:	2200      	movs	r2, #0
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <scalbn+0xe8>)
 8006526:	e7b2      	b.n	800648e <scalbn+0x36>
 8006528:	c2f8f359 	.word	0xc2f8f359
 800652c:	01a56e1f 	.word	0x01a56e1f
 8006530:	8800759c 	.word	0x8800759c
 8006534:	7e37e43c 	.word	0x7e37e43c
 8006538:	43500000 	.word	0x43500000
 800653c:	ffff3cb0 	.word	0xffff3cb0
 8006540:	3c900000 	.word	0x3c900000

08006544 <copysign>:
 8006544:	ec51 0b10 	vmov	r0, r1, d0
 8006548:	ee11 0a90 	vmov	r0, s3
 800654c:	ee10 2a10 	vmov	r2, s0
 8006550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006554:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006558:	ea41 0300 	orr.w	r3, r1, r0
 800655c:	ec43 2b10 	vmov	d0, r2, r3
 8006560:	4770      	bx	lr
	...

08006564 <_init>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	bf00      	nop
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr

08006570 <_fini>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr
