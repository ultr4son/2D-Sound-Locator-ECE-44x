
Locator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015798  08007038  08007038  00017038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c7d0  0801c7d0  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  0801c7d0  0801c7d0  0002c7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c7d8  0801c7d8  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c7d8  0801c7d8  0002c7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c7dc  0801c7dc  0002c7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801c7e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a68  20000070  0801c850  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ad8  0801c850  00036ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ae4  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002adc  00000000  00000000  00045b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00048660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  000495f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002485c  00000000  00000000  0004a428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c603  00000000  00000000  0006ec84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dabdc  00000000  00000000  0007b287  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f4  00000000  00000000  00155e63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aec  00000000  00000000  00155f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000ee  00000000  00000000  0015aa44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800701c 	.word	0x0800701c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800701c 	.word	0x0800701c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b972 	b.w	8000ee8 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9e08      	ldr	r6, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	4688      	mov	r8, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14b      	bne.n	8000cc2 <__udivmoddi4+0xa6>
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	4615      	mov	r5, r2
 8000c2e:	d967      	bls.n	8000d00 <__udivmoddi4+0xe4>
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b14a      	cbz	r2, 8000c4a <__udivmoddi4+0x2e>
 8000c36:	f1c2 0720 	rsb	r7, r2, #32
 8000c3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c42:	4095      	lsls	r5, r2
 8000c44:	ea47 0803 	orr.w	r8, r7, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4e:	0c23      	lsrs	r3, r4, #16
 8000c50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c54:	fa1f fc85 	uxth.w	ip, r5
 8000c58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c60:	fb07 f10c 	mul.w	r1, r7, ip
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x60>
 8000c68:	18eb      	adds	r3, r5, r3
 8000c6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6e:	f080 811b 	bcs.w	8000ea8 <__udivmoddi4+0x28c>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 8118 	bls.w	8000ea8 <__udivmoddi4+0x28c>
 8000c78:	3f02      	subs	r7, #2
 8000c7a:	442b      	add	r3, r5
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c90:	45a4      	cmp	ip, r4
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x8c>
 8000c94:	192c      	adds	r4, r5, r4
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x290>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x290>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	442c      	add	r4, r5
 8000ca8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cac:	eba4 040c 	sub.w	r4, r4, ip
 8000cb0:	2700      	movs	r7, #0
 8000cb2:	b11e      	cbz	r6, 8000cbc <__udivmoddi4+0xa0>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cbc:	4639      	mov	r1, r7
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xbe>
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	f000 80eb 	beq.w	8000ea2 <__udivmoddi4+0x286>
 8000ccc:	2700      	movs	r7, #0
 8000cce:	e9c6 0100 	strd	r0, r1, [r6]
 8000cd2:	4638      	mov	r0, r7
 8000cd4:	4639      	mov	r1, r7
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f783 	clz	r7, r3
 8000cde:	2f00      	cmp	r7, #0
 8000ce0:	d147      	bne.n	8000d72 <__udivmoddi4+0x156>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd0>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80fa 	bhi.w	8000ee0 <__udivmoddi4+0x2c4>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4698      	mov	r8, r3
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa0>
 8000cfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa0>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xe8>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 808f 	bne.w	8000e2c <__udivmoddi4+0x210>
 8000d0e:	1b49      	subs	r1, r1, r5
 8000d10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d14:	fa1f f885 	uxth.w	r8, r5
 8000d18:	2701      	movs	r7, #1
 8000d1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1e:	0c23      	lsrs	r3, r4, #16
 8000d20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb08 f10c 	mul.w	r1, r8, ip
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0x124>
 8000d30:	18eb      	adds	r3, r5, r3
 8000d32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x122>
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2bc>
 8000d3e:	4684      	mov	ip, r0
 8000d40:	1a59      	subs	r1, r3, r1
 8000d42:	b2a3      	uxth	r3, r4
 8000d44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d50:	fb08 f800 	mul.w	r8, r8, r0
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x14c>
 8000d58:	192c      	adds	r4, r5, r4
 8000d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x14a>
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	f200 80b6 	bhi.w	8000ed2 <__udivmoddi4+0x2b6>
 8000d66:	4618      	mov	r0, r3
 8000d68:	eba4 0408 	sub.w	r4, r4, r8
 8000d6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d70:	e79f      	b.n	8000cb2 <__udivmoddi4+0x96>
 8000d72:	f1c7 0c20 	rsb	ip, r7, #32
 8000d76:	40bb      	lsls	r3, r7
 8000d78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d80:	fa01 f407 	lsl.w	r4, r1, r7
 8000d84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d90:	4325      	orrs	r5, r4
 8000d92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d96:	0c2c      	lsrs	r4, r5, #16
 8000d98:	fb08 3319 	mls	r3, r8, r9, r3
 8000d9c:	fa1f fa8e 	uxth.w	sl, lr
 8000da0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da4:	fb09 f40a 	mul.w	r4, r9, sl
 8000da8:	429c      	cmp	r4, r3
 8000daa:	fa02 f207 	lsl.w	r2, r2, r7
 8000dae:	fa00 f107 	lsl.w	r1, r0, r7
 8000db2:	d90b      	bls.n	8000dcc <__udivmoddi4+0x1b0>
 8000db4:	eb1e 0303 	adds.w	r3, lr, r3
 8000db8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbc:	f080 8087 	bcs.w	8000ece <__udivmoddi4+0x2b2>
 8000dc0:	429c      	cmp	r4, r3
 8000dc2:	f240 8084 	bls.w	8000ece <__udivmoddi4+0x2b2>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4473      	add	r3, lr
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	b2ad      	uxth	r5, r5
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ddc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000de0:	45a2      	cmp	sl, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1da>
 8000de4:	eb1e 0404 	adds.w	r4, lr, r4
 8000de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dec:	d26b      	bcs.n	8000ec6 <__udivmoddi4+0x2aa>
 8000dee:	45a2      	cmp	sl, r4
 8000df0:	d969      	bls.n	8000ec6 <__udivmoddi4+0x2aa>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4474      	add	r4, lr
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	eba4 040a 	sub.w	r4, r4, sl
 8000e02:	454c      	cmp	r4, r9
 8000e04:	46c2      	mov	sl, r8
 8000e06:	464b      	mov	r3, r9
 8000e08:	d354      	bcc.n	8000eb4 <__udivmoddi4+0x298>
 8000e0a:	d051      	beq.n	8000eb0 <__udivmoddi4+0x294>
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d069      	beq.n	8000ee4 <__udivmoddi4+0x2c8>
 8000e10:	ebb1 050a 	subs.w	r5, r1, sl
 8000e14:	eb64 0403 	sbc.w	r4, r4, r3
 8000e18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e1c:	40fd      	lsrs	r5, r7
 8000e1e:	40fc      	lsrs	r4, r7
 8000e20:	ea4c 0505 	orr.w	r5, ip, r5
 8000e24:	e9c6 5400 	strd	r5, r4, [r6]
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f703 	lsr.w	r7, r0, r3
 8000e34:	4095      	lsls	r5, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e42:	4338      	orrs	r0, r7
 8000e44:	0c01      	lsrs	r1, r0, #16
 8000e46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e4a:	fa1f f885 	uxth.w	r8, r5
 8000e4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e56:	fb07 f308 	mul.w	r3, r7, r8
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x256>
 8000e62:	1869      	adds	r1, r5, r1
 8000e64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e68:	d22f      	bcs.n	8000eca <__udivmoddi4+0x2ae>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d92d      	bls.n	8000eca <__udivmoddi4+0x2ae>
 8000e6e:	3f02      	subs	r7, #2
 8000e70:	4429      	add	r1, r5
 8000e72:	1acb      	subs	r3, r1, r3
 8000e74:	b281      	uxth	r1, r0
 8000e76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb00 f308 	mul.w	r3, r0, r8
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x27e>
 8000e8a:	1869      	adds	r1, r5, r1
 8000e8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e90:	d217      	bcs.n	8000ec2 <__udivmoddi4+0x2a6>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d915      	bls.n	8000ec2 <__udivmoddi4+0x2a6>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4429      	add	r1, r5
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ea0:	e73b      	b.n	8000d1a <__udivmoddi4+0xfe>
 8000ea2:	4637      	mov	r7, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e709      	b.n	8000cbc <__udivmoddi4+0xa0>
 8000ea8:	4607      	mov	r7, r0
 8000eaa:	e6e7      	b.n	8000c7c <__udivmoddi4+0x60>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x8c>
 8000eb0:	4541      	cmp	r1, r8
 8000eb2:	d2ab      	bcs.n	8000e0c <__udivmoddi4+0x1f0>
 8000eb4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	e7a4      	b.n	8000e0c <__udivmoddi4+0x1f0>
 8000ec2:	4660      	mov	r0, ip
 8000ec4:	e7e9      	b.n	8000e9a <__udivmoddi4+0x27e>
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	e795      	b.n	8000df6 <__udivmoddi4+0x1da>
 8000eca:	4667      	mov	r7, ip
 8000ecc:	e7d1      	b.n	8000e72 <__udivmoddi4+0x256>
 8000ece:	4681      	mov	r9, r0
 8000ed0:	e77c      	b.n	8000dcc <__udivmoddi4+0x1b0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	442c      	add	r4, r5
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0x14c>
 8000ed8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000edc:	442b      	add	r3, r5
 8000ede:	e72f      	b.n	8000d40 <__udivmoddi4+0x124>
 8000ee0:	4638      	mov	r0, r7
 8000ee2:	e708      	b.n	8000cf6 <__udivmoddi4+0xda>
 8000ee4:	4637      	mov	r7, r6
 8000ee6:	e6e9      	b.n	8000cbc <__udivmoddi4+0xa0>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	0000      	movs	r0, r0
	...

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 ff1d 	bl	8001d34 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_cfft_init_f32(&fft_instance, 1024);
 8000efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efe:	485c      	ldr	r0, [pc, #368]	; (8001070 <main+0x180>)
 8000f00:	f004 f910 	bl	8005124 <arm_cfft_init_f32>

  for(int i = 0; i < SIN_SAMPLES; i++) {
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e077      	b.n	8000ffa <main+0x10a>
	  sin_signal[i] = (uint32_t) ((sin(2 * M_PI * SIN_FREQUENCY * (double)i / SIN_SAMPLES) + 1) * (double) ((0xFFF + 1) / 2));
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fb22 	bl	8000554 <__aeabi_i2d>
 8000f10:	a353      	add	r3, pc, #332	; (adr r3, 8001060 <main+0x170>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff fb87 	bl	8000628 <__aeabi_dmul>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460c      	mov	r4, r1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	4621      	mov	r1, r4
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	4b53      	ldr	r3, [pc, #332]	; (8001074 <main+0x184>)
 8000f28:	f7ff fca8 	bl	800087c <__aeabi_ddiv>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	ec44 3b17 	vmov	d7, r3, r4
 8000f34:	eeb0 0a47 	vmov.f32	s0, s14
 8000f38:	eef0 0a67 	vmov.f32	s1, s15
 8000f3c:	f005 f85c 	bl	8005ff8 <sin>
 8000f40:	ec51 0b10 	vmov	r0, r1, d0
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <main+0x188>)
 8000f4a:	f7ff f9b7 	bl	80002bc <__adddf3>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460c      	mov	r4, r1
 8000f52:	4618      	mov	r0, r3
 8000f54:	4621      	mov	r1, r4
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b46      	ldr	r3, [pc, #280]	; (8001074 <main+0x184>)
 8000f5c:	f7ff fb64 	bl	8000628 <__aeabi_dmul>
 8000f60:	4603      	mov	r3, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	4618      	mov	r0, r3
 8000f66:	4621      	mov	r1, r4
 8000f68:	f7ff fe20 	bl	8000bac <__aeabi_d2uiz>
 8000f6c:	4601      	mov	r1, r0
 8000f6e:	4a43      	ldr	r2, [pc, #268]	; (800107c <main+0x18c>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  sin_offset[i] = (uint32_t) ((sin(2 * M_PI * SIN_FREQUENCY * (double)i / SIN_SAMPLES + M_PI / 32) + 1) * (double) ((0xFFF + 1) / 2));
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff faec 	bl	8000554 <__aeabi_i2d>
 8000f7c:	a338      	add	r3, pc, #224	; (adr r3, 8001060 <main+0x170>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fb51 	bl	8000628 <__aeabi_dmul>
 8000f86:	4603      	mov	r3, r0
 8000f88:	460c      	mov	r4, r1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <main+0x184>)
 8000f94:	f7ff fc72 	bl	800087c <__aeabi_ddiv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	4621      	mov	r1, r4
 8000fa0:	a331      	add	r3, pc, #196	; (adr r3, 8001068 <main+0x178>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff f989 	bl	80002bc <__adddf3>
 8000faa:	4603      	mov	r3, r0
 8000fac:	460c      	mov	r4, r1
 8000fae:	ec44 3b17 	vmov	d7, r3, r4
 8000fb2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb6:	eef0 0a67 	vmov.f32	s1, s15
 8000fba:	f005 f81d 	bl	8005ff8 <sin>
 8000fbe:	ec51 0b10 	vmov	r0, r1, d0
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <main+0x188>)
 8000fc8:	f7ff f978 	bl	80002bc <__adddf3>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	460c      	mov	r4, r1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	4621      	mov	r1, r4
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <main+0x184>)
 8000fda:	f7ff fb25 	bl	8000628 <__aeabi_dmul>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	f7ff fde1 	bl	8000bac <__aeabi_d2uiz>
 8000fea:	4601      	mov	r1, r0
 8000fec:	4a24      	ldr	r2, [pc, #144]	; (8001080 <main+0x190>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < SIN_SAMPLES; i++) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001000:	db83      	blt.n	8000f0a <main+0x1a>
//  int idx = (int)(1.0 / (SIN_SAMPLES / SAMPLES));

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f845 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 fa73 	bl	80014f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800100a:	f000 fa49 	bl	80014a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800100e:	f000 fa1d 	bl	800144c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001012:	f000 f8ab 	bl	800116c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001016:	f000 f8fb 	bl	8001210 <MX_ADC2_Init>
  MX_DAC_Init();
 800101a:	f000 f94b 	bl	80012b4 <MX_DAC_Init>
  MX_TIM2_Init();
 800101e:	f000 f97d 	bl	800131c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001022:	f000 f9c7 	bl	80013b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sin_signal, SIN_SAMPLES, DAC_ALIGN_12B_R);
 8001026:	2300      	movs	r3, #0
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <main+0x18c>)
 8001030:	2100      	movs	r1, #0
 8001032:	4814      	ldr	r0, [pc, #80]	; (8001084 <main+0x194>)
 8001034:	f001 fbee 	bl	8002814 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, sin_offset, SIN_SAMPLES, DAC_ALIGN_12B_R);
 8001038:	2300      	movs	r3, #0
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <main+0x190>)
 8001042:	2110      	movs	r1, #16
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <main+0x194>)
 8001046:	f001 fbe5 	bl	8002814 <HAL_DAC_Start_DMA>
//  HAL_ADC_Start(&hadc2);
//  HAL_ADCEx_MultiModeStart_DMA(&hadc1, &ADC_samples, SAMPLES * 4);

  HAL_TIM_Base_Start(&htim2);
 800104a:	480f      	ldr	r0, [pc, #60]	; (8001088 <main+0x198>)
 800104c:	f002 ffc5 	bl	8003fda <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <main+0x19c>)
 8001052:	f002 ffe6 	bl	8004022 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint16_t i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	807b      	strh	r3, [r7, #2]

  while (1)
 800105a:	e7fe      	b.n	800105a <main+0x16a>
 800105c:	f3af 8000 	nop.w
 8001060:	54442d18 	.word	0x54442d18
 8001064:	401921fb 	.word	0x401921fb
 8001068:	54442d18 	.word	0x54442d18
 800106c:	3fb921fb 	.word	0x3fb921fb
 8001070:	200042c0 	.word	0x200042c0
 8001074:	40a00000 	.word	0x40a00000
 8001078:	3ff00000 	.word	0x3ff00000
 800107c:	20001924 	.word	0x20001924
 8001080:	200042d0 	.word	0x200042d0
 8001084:	200039cc 	.word	0x200039cc
 8001088:	200039e0 	.word	0x200039e0
 800108c:	2000089c 	.word	0x2000089c

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2234      	movs	r2, #52	; 0x34
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 f8bc 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <SystemClock_Config+0xd4>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	4a29      	ldr	r2, [pc, #164]	; (8001164 <SystemClock_Config+0xd4>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <SystemClock_Config+0xd4>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <SystemClock_Config+0xd8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <SystemClock_Config+0xd8>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <SystemClock_Config+0xd8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f8:	2310      	movs	r3, #16
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001104:	2310      	movs	r3, #16
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001108:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800110c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800110e:	2304      	movs	r3, #4
 8001110:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001112:	2302      	movs	r3, #2
 8001114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fcd6 	bl	8003ad0 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800112a:	f000 fb21 	bl	8001770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fa06 	bl	800355c <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001156:	f000 fb0b 	bl	8001770 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_ADC1_Init+0x98>)
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <MX_ADC1_Init+0x9c>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_ADC1_Init+0x98>)
 8001186:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_ADC1_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_ADC1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_ADC1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_ADC1_Init+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_ADC1_Init+0xa0>)
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_ADC1_Init+0x98>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ce:	f000 fe23 	bl	8001e18 <HAL_ADC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 faca 	bl	8001770 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ee:	f000 ffaf 	bl	8002150 <HAL_ADC_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011f8:	f000 faba 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20003984 	.word	0x20003984
 8001208:	40012000 	.word	0x40012000
 800120c:	0f000001 	.word	0x0f000001

08001210 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	463b      	mov	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <MX_ADC2_Init+0x9c>)
 8001226:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_ADC2_Init+0x98>)
 800122a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_ADC2_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_ADC2_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <MX_ADC2_Init+0xa0>)
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_ADC2_Init+0x98>)
 800125e:	2201      	movs	r2, #1
 8001260:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_ADC2_Init+0x98>)
 800126c:	2201      	movs	r2, #1
 800126e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001272:	f000 fdd1 	bl	8001e18 <HAL_ADC_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800127c:	f000 fa78 	bl	8001770 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001280:	2306      	movs	r3, #6
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_ADC2_Init+0x98>)
 8001292:	f000 ff5d 	bl	8002150 <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800129c:	f000 fa68 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200008dc 	.word	0x200008dc
 80012ac:	40012100 	.word	0x40012100
 80012b0:	0f000001 	.word	0x0f000001

080012b4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_DAC_Init+0x60>)
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <MX_DAC_Init+0x64>)
 80012c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012c8:	4812      	ldr	r0, [pc, #72]	; (8001314 <MX_DAC_Init+0x60>)
 80012ca:	f001 fa80 	bl	80027ce <HAL_DAC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012d4:	f000 fa4c 	bl	8001770 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80012d8:	2324      	movs	r3, #36	; 0x24
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <MX_DAC_Init+0x60>)
 80012e8:	f001 fb60 	bl	80029ac <HAL_DAC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012f2:	f000 fa3d 	bl	8001770 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	2210      	movs	r2, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_DAC_Init+0x60>)
 80012fe:	f001 fb55 	bl	80029ac <HAL_DAC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001308:	f000 fa32 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200039cc 	.word	0x200039cc
 8001318:	40007400 	.word	0x40007400

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM2_Init+0x94>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_TIM2_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 186;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001350:	22ba      	movs	r2, #186	; 0xba
 8001352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_TIM2_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001362:	f002 fe0f 	bl	8003f84 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800136c:	f000 fa00 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_TIM2_Init+0x94>)
 800137e:	f002 ff7c 	bl	800427a <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001388:	f000 f9f2 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800138c:	2320      	movs	r3, #32
 800138e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_TIM2_Init+0x94>)
 800139a:	f003 f987 	bl	80046ac <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f000 f9e4 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200039e0 	.word	0x200039e0

080013b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM4_Init+0x90>)
 80013d2:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <MX_TIM4_Init+0x94>)
 80013d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_TIM4_Init+0x90>)
 80013d8:	220a      	movs	r2, #10
 80013da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM4_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM4_Init+0x90>)
 80013e4:	222a      	movs	r2, #42	; 0x2a
 80013e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_TIM4_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM4_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_TIM4_Init+0x90>)
 80013f6:	f002 fdc5 	bl	8003f84 <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001400:	f000 f9b6 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM4_Init+0x90>)
 8001412:	f002 ff32 	bl	800427a <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800141c:	f000 f9a8 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM4_Init+0x90>)
 800142e:	f003 f93d 	bl	80046ac <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001438:	f000 f99a 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000089c 	.word	0x2000089c
 8001448:	40000800 	.word	0x40000800

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART2_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001484:	f003 f9a2 	bl	80047cc <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f000 f96f 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20003a20 	.word	0x20003a20
 800149c:	40004400 	.word	0x40004400

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_DMA_Init+0x4c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <MX_DMA_Init+0x4c>)
 80014b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_DMA_Init+0x4c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2010      	movs	r0, #16
 80014c8:	f001 f94b 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014cc:	2010      	movs	r0, #16
 80014ce:	f001 f964 	bl	800279a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2011      	movs	r0, #17
 80014d8:	f001 f943 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014dc:	2011      	movs	r0, #17
 80014de:	f001 f95c 	bl	800279a <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <MX_GPIO_Init+0xa8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <MX_GPIO_Init+0xa8>)
 800152c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <MX_GPIO_Init+0xa8>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_GPIO_Init+0xa8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <MX_GPIO_Init+0xac>)
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_GPIO_Init+0xb0>)
 800158c:	f001 fe54 	bl	8003238 <HAL_GPIO_Init>

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	10210000 	.word	0x10210000
 80015a0:	40020800 	.word	0x40020800

080015a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *data, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d00a      	beq.n	80015cc <_write+0x28>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d007      	beq.n	80015cc <_write+0x28>
   {
      errno = EBADF;
 80015bc:	f003 fe04 	bl	80051c8 <__errno>
 80015c0:	4602      	mov	r2, r0
 80015c2:	2309      	movs	r3, #9
 80015c4:	6013      	str	r3, [r2, #0]
      return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e00f      	b.n	80015ec <_write+0x48>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	b29a      	uxth	r2, r3
   HAL_StatusTypeDef status =
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <_write+0x50>)
 80015d8:	f003 f945 	bl	8004866 <HAL_UART_Transmit>
 80015dc:	4603      	mov	r3, r0
 80015de:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <_write+0x46>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	e000      	b.n	80015ec <_write+0x48>
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20003a20 	.word	0x20003a20

080015f8 <PollChannel>:

void PollChannel(ADC_HandleTypeDef* hadcA, ADC_HandleTypeDef* hadcB, uint32_t channelA, uint32_t channelB, uint32_t* aValue, uint32_t* bValue) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]

	sConfig.Channel = channelA;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	613b      	str	r3, [r7, #16]
	sConfig.Rank = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]

	HAL_ADC_ConfigChannel(hadcA, &sConfig);
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fd92 	bl	8002150 <HAL_ADC_ConfigChannel>

	sConfig.Channel = channelB;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	613b      	str	r3, [r7, #16]
	sConfig.Rank = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]

	HAL_ADC_ConfigChannel(hadcB, &sConfig);
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4619      	mov	r1, r3
 800163e:	68b8      	ldr	r0, [r7, #8]
 8001640:	f000 fd86 	bl	8002150 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(hadcA);
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 fc2b 	bl	8001ea0 <HAL_ADC_Start>
	HAL_ADC_Start(hadcB);
 800164a:	68b8      	ldr	r0, [r7, #8]
 800164c:	f000 fc28 	bl	8001ea0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadcA, 1000);
 8001650:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fce9 	bl	800202c <HAL_ADC_PollForConversion>
	HAL_ADC_PollForConversion(hadcB, 1000);
 800165a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f000 fce4 	bl	800202c <HAL_ADC_PollForConversion>
	*aValue = HAL_ADC_GetValue(hadcA);
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 fd65 	bl	8002134 <HAL_ADC_GetValue>
 800166a:	4602      	mov	r2, r0
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	601a      	str	r2, [r3, #0]
	*bValue = HAL_ADC_GetValue(hadcB);
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f000 fd5f 	bl	8002134 <HAL_ADC_GetValue>
 8001676:	4602      	mov	r2, r0
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af02      	add	r7, sp, #8
 800168a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a2e      	ldr	r2, [pc, #184]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d155      	bne.n	8001740 <HAL_TIM_PeriodElapsedCallback+0xbc>
		uint32_t top_sample;
		uint32_t bottom_sample;
		uint32_t right_sample;
		uint32_t left_sample;

		PollChannel(&hadc1, &hadc2, ADC_CHANNEL_0, ADC_CHANNEL_6, &top_sample, &bottom_sample);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2306      	movs	r3, #6
 80016a2:	2200      	movs	r2, #0
 80016a4:	4929      	ldr	r1, [pc, #164]	; (800174c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80016a6:	482a      	ldr	r0, [pc, #168]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80016a8:	f7ff ffa6 	bl	80015f8 <PollChannel>
		PollChannel(&hadc1, &hadc2, ADC_CHANNEL_1, ADC_CHANNEL_7, &right_sample, &left_sample);
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2307      	movs	r3, #7
 80016ba:	2201      	movs	r2, #1
 80016bc:	4923      	ldr	r1, [pc, #140]	; (800174c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80016be:	4824      	ldr	r0, [pc, #144]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80016c0:	f7ff ff9a 	bl	80015f8 <PollChannel>
		printf("%d: %d %d %d %d\n\r", si, top_sample, bottom_sample, right_sample, left_sample);
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	693c      	ldr	r4, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	9201      	str	r2, [sp, #4]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	4623      	mov	r3, r4
 80016d6:	4602      	mov	r2, r0
 80016d8:	481f      	ldr	r0, [pc, #124]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80016da:	f003 fda7 	bl	800522c <iprintf>
		ADC_top[si] = top_sample;
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b291      	uxth	r1, r2
 80016e6:	4a1d      	ldr	r2, [pc, #116]	; (800175c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80016e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_bottom[si] = bottom_sample;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b291      	uxth	r1, r2
 80016f4:	4a1a      	ldr	r2, [pc, #104]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80016f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_right[si] = right_sample;
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b291      	uxth	r1, r2
 8001702:	4a18      	ldr	r2, [pc, #96]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001704:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_left[si] = left_sample;
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b291      	uxth	r1, r2
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		si = (si + 1) % SAMPLES;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	425a      	negs	r2, r3
 800171e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001722:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001726:	bf58      	it	pl
 8001728:	4253      	negpl	r3, r2
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800172c:	6013      	str	r3, [r2, #0]
		if(si == SAMPLES - 1) {
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001736:	4293      	cmp	r3, r2
 8001738:	d102      	bne.n	8001740 <HAL_TIM_PeriodElapsedCallback+0xbc>
			printf("done\n\r");
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800173c:	f003 fd76 	bl	800522c <iprintf>
		}

	}
}
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	2000089c 	.word	0x2000089c
 800174c:	200008dc 	.word	0x200008dc
 8001750:	20003984 	.word	0x20003984
 8001754:	2000008c 	.word	0x2000008c
 8001758:	08007038 	.word	0x08007038
 800175c:	20001124 	.word	0x20001124
 8001760:	200062d0 	.word	0x200062d0
 8001764:	20000924 	.word	0x20000924
 8001768:	2000009c 	.word	0x2000009c
 800176c:	0800704c 	.word	0x0800704c

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001776:	e7fe      	b.n	8001776 <Error_Handler+0x6>

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_MspInit+0x4c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_MspInit+0x4c>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_MspInit+0x4c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_MspInit+0x4c>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017b6:	2007      	movs	r0, #7
 80017b8:	f000 ffc8 	bl	800274c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2e      	ldr	r2, [pc, #184]	; (80018a0 <HAL_ADC_MspInit+0xd8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d128      	bne.n	800183c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a25      	ldr	r2, [pc, #148]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001822:	2303      	movs	r3, #3
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	481c      	ldr	r0, [pc, #112]	; (80018a8 <HAL_ADC_MspInit+0xe0>)
 8001836:	f001 fcff 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800183a:	e02c      	b.n	8001896 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1a      	ldr	r2, [pc, #104]	; (80018ac <HAL_ADC_MspInit+0xe4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d127      	bne.n	8001896 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 8001850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_ADC_MspInit+0xdc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_ADC_MspInit+0xe0>)
 8001892:	f001 fcd1 	bl	8003238 <HAL_GPIO_Init>
}
 8001896:	bf00      	nop
 8001898:	3730      	adds	r7, #48	; 0x30
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40012000 	.word	0x40012000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40012100 	.word	0x40012100

080018b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <HAL_DAC_MspInit+0x140>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	f040 808a 	bne.w	80019e8 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_DAC_MspInit+0x144>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <HAL_DAC_MspInit+0x144>)
 80018de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_DAC_MspInit+0x144>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_DAC_MspInit+0x144>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a3e      	ldr	r2, [pc, #248]	; (80019f4 <HAL_DAC_MspInit+0x144>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <HAL_DAC_MspInit+0x144>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800190c:	2330      	movs	r3, #48	; 0x30
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001910:	2303      	movs	r3, #3
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4836      	ldr	r0, [pc, #216]	; (80019f8 <HAL_DAC_MspInit+0x148>)
 8001920:	f001 fc8a 	bl	8003238 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001926:	4a36      	ldr	r2, [pc, #216]	; (8001a00 <HAL_DAC_MspInit+0x150>)
 8001928:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 800192c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001930:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001932:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001934:	2240      	movs	r2, #64	; 0x40
 8001936:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001944:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800194c:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001950:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001954:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800196a:	4824      	ldr	r0, [pc, #144]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 800196c:	f001 f8f6 	bl	8002b5c <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001976:	f7ff fefb 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <HAL_DAC_MspInit+0x14c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 8001988:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_DAC_MspInit+0x158>)
 800198a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 800198e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001992:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 8001996:	2240      	movs	r2, #64	; 0x40
 8001998:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ae:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019be:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019ce:	f001 f8c5 	bl	8002b5c <HAL_DMA_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80019d8:	f7ff feca 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_DAC_MspInit+0x154>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40007400 	.word	0x40007400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	20003924 	.word	0x20003924
 8001a00:	40026088 	.word	0x40026088
 8001a04:	20004260 	.word	0x20004260
 8001a08:	400260a0 	.word	0x400260a0

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d10e      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_TIM_Base_MspInit+0x70>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <HAL_TIM_Base_MspInit+0x70>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_TIM_Base_MspInit+0x70>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a3a:	e01a      	b.n	8001a72 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <HAL_TIM_Base_MspInit+0x74>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d115      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_TIM_Base_MspInit+0x70>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_Base_MspInit+0x70>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_TIM_Base_MspInit+0x70>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	201e      	movs	r0, #30
 8001a68:	f000 fe7b 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a6c:	201e      	movs	r0, #30
 8001a6e:	f000 fe94 	bl	800279a <HAL_NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40000800 	.word	0x40000800

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_UART_MspInit+0x84>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12b      	bne.n	8001afe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ade:	230c      	movs	r3, #12
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aee:	2307      	movs	r3, #7
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_UART_MspInit+0x8c>)
 8001afa:	f001 fb9d 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f93a 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <DMA1_Stream5_IRQHandler+0x10>)
 8001b6e:	f001 f8fb 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20003924 	.word	0x20003924

08001b7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA1_Stream6_IRQHandler+0x10>)
 8001b82:	f001 f8f1 	bl	8002d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20004260 	.word	0x20004260

08001b90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TIM4_IRQHandler+0x10>)
 8001b96:	f002 fa68 	bl	800406a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000089c 	.word	0x2000089c

08001ba4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e00a      	b.n	8001bcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bb6:	f3af 8000 	nop.w
 8001bba:	4601      	mov	r1, r0
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	b2ca      	uxtb	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	dbf0      	blt.n	8001bb6 <_read+0x12>
	}

return len;
 8001bd4:	687b      	ldr	r3, [r7, #4]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
	return -1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c06:	605a      	str	r2, [r3, #4]
	return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_isatty>:

int _isatty(int file)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
	return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c50:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <_sbrk+0x5c>)
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <_sbrk+0x60>)
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <_sbrk+0x64>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <_sbrk+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d207      	bcs.n	8001c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c78:	f003 faa6 	bl	80051c8 <__errno>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	230c      	movs	r3, #12
 8001c80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	e009      	b.n	8001c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <_sbrk+0x64>)
 8001c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20020000 	.word	0x20020000
 8001ca8:	00000400 	.word	0x00000400
 8001cac:	20000090 	.word	0x20000090
 8001cb0:	20006ad8 	.word	0x20006ad8

08001cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <SystemInit+0x28>)
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <SystemInit+0x28>)
 8001cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SystemInit+0x28>)
 8001cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cce:	609a      	str	r2, [r3, #8]
#endif
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ce4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ce6:	e003      	b.n	8001cf0 <LoopCopyDataInit>

08001ce8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cee:	3104      	adds	r1, #4

08001cf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cf0:	480b      	ldr	r0, [pc, #44]	; (8001d20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cf8:	d3f6      	bcc.n	8001ce8 <CopyDataInit>
  ldr  r2, =_sbss
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cfc:	e002      	b.n	8001d04 <LoopFillZerobss>

08001cfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d00:	f842 3b04 	str.w	r3, [r2], #4

08001d04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d08:	d3f9      	bcc.n	8001cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d0a:	f7ff ffd3 	bl	8001cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0e:	f003 fa61 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d12:	f7ff f8ed 	bl	8000ef0 <main>
  bx  lr    
 8001d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d1c:	0801c7e0 	.word	0x0801c7e0
  ldr  r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d24:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001d28:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001d2c:	20006ad8 	.word	0x20006ad8

08001d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d30:	e7fe      	b.n	8001d30 <ADC_IRQHandler>
	...

08001d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <HAL_Init+0x40>)
 8001d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_Init+0x40>)
 8001d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_Init+0x40>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f000 fcf5 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 f808 	bl	8001d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d68:	f7ff fd06 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x54>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x58>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fd0d 	bl	80027b6 <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00e      	b.n	8001dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	d80a      	bhi.n	8001dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f000 fcd5 	bl	8002762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <HAL_InitTick+0x5c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20006ad0 	.word	0x20006ad0

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20006ad0 	.word	0x20006ad0

08001e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e033      	b.n	8001e96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fcc6 	bl	80017c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d118      	bne.n	8001e88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e5e:	f023 0302 	bic.w	r3, r3, #2
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 faa2 	bl	80023b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
 8001e86:	e001      	b.n	8001e8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Start+0x1a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e0a5      	b.n	8002006 <HAL_ADC_Start+0x166>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d018      	beq.n	8001f02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_ADC_Start+0x174>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <HAL_ADC_Start+0x178>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0c9a      	lsrs	r2, r3, #18
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f9      	bne.n	8001ef6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d179      	bne.n	8002004 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4e:	d106      	bne.n	8001f5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	f023 0206 	bic.w	r2, r3, #6
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_ADC_Start+0x17c>)
 8001f6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d12a      	bne.n	8001fdc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a25      	ldr	r2, [pc, #148]	; (8002020 <HAL_ADC_Start+0x180>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d015      	beq.n	8001fbc <HAL_ADC_Start+0x11c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_ADC_Start+0x184>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d105      	bne.n	8001fa6 <HAL_ADC_Start+0x106>
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_ADC_Start+0x17c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_ADC_Start+0x188>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d129      	bne.n	8002004 <HAL_ADC_Start+0x164>
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_ADC_Start+0x17c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d823      	bhi.n	8002004 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11c      	bne.n	8002004 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	e013      	b.n	8002004 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_ADC_Start+0x180>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10e      	bne.n	8002004 <HAL_ADC_Start+0x164>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002002:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000
 8002018:	431bde83 	.word	0x431bde83
 800201c:	40012300 	.word	0x40012300
 8002020:	40012000 	.word	0x40012000
 8002024:	40012100 	.word	0x40012100
 8002028:	40012200 	.word	0x40012200

0800202c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002048:	d113      	bne.n	8002072 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002058:	d10b      	bne.n	8002072 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e05c      	b.n	800212c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002072:	f7ff fec5 	bl	8001e00 <HAL_GetTick>
 8002076:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002078:	e01a      	b.n	80020b0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d016      	beq.n	80020b0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_ADC_PollForConversion+0x6c>
 8002088:	f7ff feba 	bl	8001e00 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d20b      	bcs.n	80020b0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e03d      	b.n	800212c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d1dd      	bne.n	800207a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0212 	mvn.w	r2, #18
 80020c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d123      	bne.n	800212a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11f      	bne.n	800212a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002102:	2b00      	cmp	r3, #0
 8002104:	d111      	bne.n	800212a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1c>
 8002168:	2302      	movs	r3, #2
 800216a:	e113      	b.n	8002394 <HAL_ADC_ConfigChannel+0x244>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d925      	bls.n	80021c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68d9      	ldr	r1, [r3, #12]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	3b1e      	subs	r3, #30
 8002192:	2207      	movs	r2, #7
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43da      	mvns	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	400a      	ands	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68d9      	ldr	r1, [r3, #12]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	4603      	mov	r3, r0
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4403      	add	r3, r0
 80021ba:	3b1e      	subs	r3, #30
 80021bc:	409a      	lsls	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	e022      	b.n	800220e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	2207      	movs	r2, #7
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	400a      	ands	r2, r1
 80021ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6919      	ldr	r1, [r3, #16]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4403      	add	r3, r0
 8002204:	409a      	lsls	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d824      	bhi.n	8002260 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b05      	subs	r3, #5
 8002228:	221f      	movs	r2, #31
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	400a      	ands	r2, r1
 8002236:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	4618      	mov	r0, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b05      	subs	r3, #5
 8002252:	fa00 f203 	lsl.w	r2, r0, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	635a      	str	r2, [r3, #52]	; 0x34
 800225e:	e04c      	b.n	80022fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d824      	bhi.n	80022b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	3b23      	subs	r3, #35	; 0x23
 800227a:	221f      	movs	r2, #31
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43da      	mvns	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	400a      	ands	r2, r1
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b23      	subs	r3, #35	; 0x23
 80022a4:	fa00 f203 	lsl.w	r2, r0, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
 80022b0:	e023      	b.n	80022fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b41      	subs	r3, #65	; 0x41
 80022c4:	221f      	movs	r2, #31
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	400a      	ands	r2, r1
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	3b41      	subs	r3, #65	; 0x41
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_ADC_ConfigChannel+0x250>)
 80022fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <HAL_ADC_ConfigChannel+0x254>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d10f      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x1d8>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b12      	cmp	r3, #18
 800230e:	d10b      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <HAL_ADC_ConfigChannel+0x254>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12b      	bne.n	800238a <HAL_ADC_ConfigChannel+0x23a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <HAL_ADC_ConfigChannel+0x258>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d003      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x1f4>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b11      	cmp	r3, #17
 8002342:	d122      	bne.n	800238a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <HAL_ADC_ConfigChannel+0x258>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d111      	bne.n	800238a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_ADC_ConfigChannel+0x25c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a11      	ldr	r2, [pc, #68]	; (80023b0 <HAL_ADC_ConfigChannel+0x260>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	0c9a      	lsrs	r2, r3, #18
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800237c:	e002      	b.n	8002384 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3b01      	subs	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40012300 	.word	0x40012300
 80023a4:	40012000 	.word	0x40012000
 80023a8:	10000012 	.word	0x10000012
 80023ac:	20000000 	.word	0x20000000
 80023b0:	431bde83 	.word	0x431bde83

080023b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023bc:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <ADC_Init+0x1f0>)
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	021a      	lsls	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <ADC_Init+0x1f4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800245a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800247c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e00f      	b.n	80024b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0202 	bic.w	r2, r2, #2
 80024c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e1b      	ldrb	r3, [r3, #24]
 80024cc:	005a      	lsls	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	3b01      	subs	r3, #1
 800250c:	035a      	lsls	r2, r3, #13
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	e007      	b.n	8002528 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002526:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	3b01      	subs	r3, #1
 8002544:	051a      	lsls	r2, r3, #20
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800255c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256a:	025a      	lsls	r2, r3, #9
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	029a      	lsls	r2, r3, #10
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40012300 	.word	0x40012300
 80025a8:	0f000001 	.word	0x0f000001

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	; (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	; (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f7ff ff8e 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff29 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002774:	f7ff ff3e 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7ff ff8e 	bl	80026a0 <NVIC_EncodePriority>
 8002784:	4602      	mov	r2, r0
 8002786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff5d 	bl	800264c <__NVIC_SetPriority>
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff31 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffa2 	bl	8002708 <SysTick_Config>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e014      	b.n	800280a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	791b      	ldrb	r3, [r3, #4]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff f85d 	bl	80018b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	795b      	ldrb	r3, [r3, #5]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_DAC_Start_DMA+0x1e>
 800282e:	2302      	movs	r3, #2
 8002830:	e08e      	b.n	8002950 <HAL_DAC_Start_DMA+0x13c>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2202      	movs	r2, #2
 800283c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d12a      	bne.n	800289a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a43      	ldr	r2, [pc, #268]	; (8002958 <HAL_DAC_Start_DMA+0x144>)
 800284a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a42      	ldr	r2, [pc, #264]	; (800295c <HAL_DAC_Start_DMA+0x148>)
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a41      	ldr	r2, [pc, #260]	; (8002960 <HAL_DAC_Start_DMA+0x14c>)
 800285a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800286a:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d009      	beq.n	8002886 <HAL_DAC_Start_DMA+0x72>
 8002872:	2b08      	cmp	r3, #8
 8002874:	d00c      	beq.n	8002890 <HAL_DAC_Start_DMA+0x7c>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d000      	beq.n	800287c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800287a:	e039      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3308      	adds	r3, #8
 8002882:	617b      	str	r3, [r7, #20]
        break;
 8002884:	e034      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	617b      	str	r3, [r7, #20]
        break;
 800288e:	e02f      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3310      	adds	r3, #16
 8002896:	617b      	str	r3, [r7, #20]
        break;
 8002898:	e02a      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a31      	ldr	r2, [pc, #196]	; (8002964 <HAL_DAC_Start_DMA+0x150>)
 80028a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_DAC_Start_DMA+0x154>)
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4a2f      	ldr	r2, [pc, #188]	; (800296c <HAL_DAC_Start_DMA+0x158>)
 80028b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028c0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d009      	beq.n	80028dc <HAL_DAC_Start_DMA+0xc8>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00c      	beq.n	80028e6 <HAL_DAC_Start_DMA+0xd2>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d000      	beq.n	80028d2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80028d0:	e00e      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3314      	adds	r3, #20
 80028d8:	617b      	str	r3, [r7, #20]
        break;
 80028da:	e009      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3318      	adds	r3, #24
 80028e2:	617b      	str	r3, [r7, #20]
        break;
 80028e4:	e004      	b.n	80028f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	331c      	adds	r3, #28
 80028ec:	617b      	str	r3, [r7, #20]
        break;
 80028ee:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002904:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6898      	ldr	r0, [r3, #8]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	f000 f9d2 	bl	8002cb8 <HAL_DMA_Start_IT>
 8002914:	e00e      	b.n	8002934 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002924:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68d8      	ldr	r0, [r3, #12]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	f000 f9c2 	bl	8002cb8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	2201      	movs	r2, #1
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	08002a47 	.word	0x08002a47
 800295c:	08002a69 	.word	0x08002a69
 8002960:	08002a85 	.word	0x08002a85
 8002964:	08002aef 	.word	0x08002aef
 8002968:	08002b11 	.word	0x08002b11
 800296c:	08002b2d 	.word	0x08002b2d

08002970 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	795b      	ldrb	r3, [r3, #5]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_DAC_ConfigChannel+0x20>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e036      	b.n	8002a3a <HAL_DAC_ConfigChannel+0x8e>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80029e0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4013      	ands	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	22c0      	movs	r2, #192	; 0xc0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff ff8b 	bl	8002970 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	711a      	strb	r2, [r3, #4]
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ff84 	bl	8002984 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f043 0204 	orr.w	r2, r3, #4
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff ff7a 	bl	8002998 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	711a      	strb	r2, [r3, #4]
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff ffd8 	bl	8002ab2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	711a      	strb	r2, [r3, #4]
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff ffd1 	bl	8002ac6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f043 0204 	orr.w	r2, r3, #4
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff ffc7 	bl	8002ada <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	711a      	strb	r2, [r3, #4]
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff f94a 	bl	8001e00 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e099      	b.n	8002cac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b98:	e00f      	b.n	8002bba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9a:	f7ff f931 	bl	8001e00 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d908      	bls.n	8002bba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e078      	b.n	8002cac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e8      	bne.n	8002b9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_DMA_Init+0x158>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d107      	bne.n	8002c24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0307 	bic.w	r3, r3, #7
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d117      	bne.n	8002c7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fa6f 	bl	8003144 <DMA_CheckFifoParam>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e016      	b.n	8002cac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fa26 	bl	80030d8 <DMA_CalcBaseAndBitshift>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	223f      	movs	r2, #63	; 0x3f
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	f010803f 	.word	0xf010803f

08002cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Start_IT+0x26>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e040      	b.n	8002d60 <HAL_DMA_Start_IT+0xa8>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d12f      	bne.n	8002d52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f9b8 	bl	800307c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	223f      	movs	r2, #63	; 0x3f
 8002d12:	409a      	lsls	r2, r3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0216 	orr.w	r2, r2, #22
 8002d26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0208 	orr.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e005      	b.n	8002d5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d74:	4b92      	ldr	r3, [pc, #584]	; (8002fc0 <HAL_DMA_IRQHandler+0x258>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a92      	ldr	r2, [pc, #584]	; (8002fc4 <HAL_DMA_IRQHandler+0x25c>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2208      	movs	r2, #8
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0204 	bic.w	r2, r2, #4
 8002dba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2201      	movs	r2, #1
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0202 	orr.w	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	2204      	movs	r2, #4
 8002e10:	409a      	lsls	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	2210      	movs	r2, #16
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d043      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03c      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	2210      	movs	r2, #16
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d024      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
 8002e96:	e01f      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e016      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0208 	bic.w	r2, r2, #8
 8002ec6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2220      	movs	r2, #32
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 808e 	beq.w	8003006 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8086 	beq.w	8003006 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	2220      	movs	r2, #32
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d136      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0216 	bic.w	r2, r2, #22
 8002f20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_DMA_IRQHandler+0x1da>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0208 	bic.w	r2, r2, #8
 8002f50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	223f      	movs	r2, #63	; 0x3f
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d07d      	beq.n	8003072 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
        }
        return;
 8002f7e:	e078      	b.n	8003072 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01c      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d108      	bne.n	8002fae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d030      	beq.n	8003006 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
 8002fac:	e02b      	b.n	8003006 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d027      	beq.n	8003006 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
 8002fbe:	e022      	b.n	8003006 <HAL_DMA_IRQHandler+0x29e>
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0210 	bic.w	r2, r2, #16
 8002fe4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	2b00      	cmp	r3, #0
 800300c:	d032      	beq.n	8003074 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d022      	beq.n	8003060 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2205      	movs	r2, #5
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3301      	adds	r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	429a      	cmp	r2, r3
 800303c:	d307      	bcc.n	800304e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f2      	bne.n	8003032 <HAL_DMA_IRQHandler+0x2ca>
 800304c:	e000      	b.n	8003050 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800304e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
 8003070:	e000      	b.n	8003074 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003072:	bf00      	nop
    }
  }
}
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop

0800307c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003098:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d108      	bne.n	80030bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ba:	e007      	b.n	80030cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3b10      	subs	r3, #16
 80030e8:	4a14      	ldr	r2, [pc, #80]	; (800313c <DMA_CalcBaseAndBitshift+0x64>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f2:	4a13      	ldr	r2, [pc, #76]	; (8003140 <DMA_CalcBaseAndBitshift+0x68>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d909      	bls.n	800311a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	659a      	str	r2, [r3, #88]	; 0x58
 8003118:	e007      	b.n	800312a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	aaaaaaab 	.word	0xaaaaaaab
 8003140:	0800706c 	.word	0x0800706c

08003144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11f      	bne.n	800319e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d855      	bhi.n	8003210 <DMA_CheckFifoParam+0xcc>
 8003164:	a201      	add	r2, pc, #4	; (adr r2, 800316c <DMA_CheckFifoParam+0x28>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318f 	.word	0x0800318f
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003211 	.word	0x08003211
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d045      	beq.n	8003214 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318c:	e042      	b.n	8003214 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003196:	d13f      	bne.n	8003218 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319c:	e03c      	b.n	8003218 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a6:	d121      	bne.n	80031ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d836      	bhi.n	800321c <DMA_CheckFifoParam+0xd8>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <DMA_CheckFifoParam+0x70>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031cb 	.word	0x080031cb
 80031bc:	080031c5 	.word	0x080031c5
 80031c0:	080031dd 	.word	0x080031dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e02f      	b.n	800322a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d024      	beq.n	8003220 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e021      	b.n	8003220 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031e4:	d11e      	bne.n	8003224 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ea:	e01b      	b.n	8003224 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d902      	bls.n	80031f8 <DMA_CheckFifoParam+0xb4>
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d003      	beq.n	80031fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031f6:	e018      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      break;
 80031fc:	e015      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00e      	beq.n	8003228 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      break;
 800320e:	e00b      	b.n	8003228 <DMA_CheckFifoParam+0xe4>
      break;
 8003210:	bf00      	nop
 8003212:	e00a      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 8003214:	bf00      	nop
 8003216:	e008      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 8003218:	bf00      	nop
 800321a:	e006      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 800321c:	bf00      	nop
 800321e:	e004      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 8003220:	bf00      	nop
 8003222:	e002      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;   
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <DMA_CheckFifoParam+0xe6>
      break;
 8003228:	bf00      	nop
    }
  } 
  
  return status; 
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e165      	b.n	8003520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	f040 8154 	bne.w	800351a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d00b      	beq.n	8003292 <HAL_GPIO_Init+0x5a>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003286:	2b11      	cmp	r3, #17
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b12      	cmp	r3, #18
 8003290:	d130      	bne.n	80032f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c8:	2201      	movs	r2, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 0201 	and.w	r2, r3, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0xfc>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b12      	cmp	r3, #18
 8003332:	d123      	bne.n	800337c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	08da      	lsrs	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3208      	adds	r2, #8
 800333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3208      	adds	r2, #8
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0203 	and.w	r2, r3, #3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80ae 	beq.w	800351a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <HAL_GPIO_Init+0x2fc>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	4a5b      	ldr	r2, [pc, #364]	; (8003534 <HAL_GPIO_Init+0x2fc>)
 80033c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	4b59      	ldr	r3, [pc, #356]	; (8003534 <HAL_GPIO_Init+0x2fc>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033da:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_GPIO_Init+0x300>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	220f      	movs	r2, #15
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4e      	ldr	r2, [pc, #312]	; (800353c <HAL_GPIO_Init+0x304>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d025      	beq.n	8003452 <HAL_GPIO_Init+0x21a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4d      	ldr	r2, [pc, #308]	; (8003540 <HAL_GPIO_Init+0x308>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01f      	beq.n	800344e <HAL_GPIO_Init+0x216>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4c      	ldr	r2, [pc, #304]	; (8003544 <HAL_GPIO_Init+0x30c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d019      	beq.n	800344a <HAL_GPIO_Init+0x212>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a4b      	ldr	r2, [pc, #300]	; (8003548 <HAL_GPIO_Init+0x310>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_GPIO_Init+0x20e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a4a      	ldr	r2, [pc, #296]	; (800354c <HAL_GPIO_Init+0x314>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00d      	beq.n	8003442 <HAL_GPIO_Init+0x20a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a49      	ldr	r2, [pc, #292]	; (8003550 <HAL_GPIO_Init+0x318>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x206>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a48      	ldr	r2, [pc, #288]	; (8003554 <HAL_GPIO_Init+0x31c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_GPIO_Init+0x202>
 8003436:	2306      	movs	r3, #6
 8003438:	e00c      	b.n	8003454 <HAL_GPIO_Init+0x21c>
 800343a:	2307      	movs	r3, #7
 800343c:	e00a      	b.n	8003454 <HAL_GPIO_Init+0x21c>
 800343e:	2305      	movs	r3, #5
 8003440:	e008      	b.n	8003454 <HAL_GPIO_Init+0x21c>
 8003442:	2304      	movs	r3, #4
 8003444:	e006      	b.n	8003454 <HAL_GPIO_Init+0x21c>
 8003446:	2303      	movs	r3, #3
 8003448:	e004      	b.n	8003454 <HAL_GPIO_Init+0x21c>
 800344a:	2302      	movs	r3, #2
 800344c:	e002      	b.n	8003454 <HAL_GPIO_Init+0x21c>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_GPIO_Init+0x21c>
 8003452:	2300      	movs	r3, #0
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	f002 0203 	and.w	r2, r2, #3
 800345a:	0092      	lsls	r2, r2, #2
 800345c:	4093      	lsls	r3, r2
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003464:	4934      	ldr	r1, [pc, #208]	; (8003538 <HAL_GPIO_Init+0x300>)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3302      	adds	r3, #2
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003472:	4b39      	ldr	r3, [pc, #228]	; (8003558 <HAL_GPIO_Init+0x320>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003496:	4a30      	ldr	r2, [pc, #192]	; (8003558 <HAL_GPIO_Init+0x320>)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_GPIO_Init+0x320>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <HAL_GPIO_Init+0x320>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_GPIO_Init+0x320>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ea:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_GPIO_Init+0x320>)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_GPIO_Init+0x320>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003514:	4a10      	ldr	r2, [pc, #64]	; (8003558 <HAL_GPIO_Init+0x320>)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3301      	adds	r3, #1
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	f67f ae96 	bls.w	8003254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003528:	bf00      	nop
 800352a:	3724      	adds	r7, #36	; 0x24
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40023800 	.word	0x40023800
 8003538:	40013800 	.word	0x40013800
 800353c:	40020000 	.word	0x40020000
 8003540:	40020400 	.word	0x40020400
 8003544:	40020800 	.word	0x40020800
 8003548:	40020c00 	.word	0x40020c00
 800354c:	40021000 	.word	0x40021000
 8003550:	40021400 	.word	0x40021400
 8003554:	40021800 	.word	0x40021800
 8003558:	40013c00 	.word	0x40013c00

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0cc      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b68      	ldr	r3, [pc, #416]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d90c      	bls.n	8003598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b63      	ldr	r3, [pc, #396]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b8      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c8:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a52      	ldr	r2, [pc, #328]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	494d      	ldr	r1, [pc, #308]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d044      	beq.n	800367c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d119      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e07f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d003      	beq.n	800361a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003616:	2b03      	cmp	r3, #3
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e067      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363a:	4b37      	ldr	r3, [pc, #220]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4934      	ldr	r1, [pc, #208]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800364c:	f7fe fbd8 	bl	8001e00 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fe fbd4 	bl	8001e00 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e04f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d20c      	bcs.n	80036a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e032      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4916      	ldr	r1, [pc, #88]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	490e      	ldr	r1, [pc, #56]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036e2:	f000 f855 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 80036e6:	4601      	mov	r1, r0
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	5cd3      	ldrb	r3, [r2, r3]
 80036f6:	fa21 f303 	lsr.w	r3, r1, r3
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fb38 	bl	8001d78 <HAL_InitTick>

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00
 8003718:	40023800 	.word	0x40023800
 800371c:	08007054 	.word	0x08007054
 8003720:	20000000 	.word	0x20000000
 8003724:	20000004 	.word	0x20000004

08003728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCC_GetHCLKFreq+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000000 	.word	0x20000000

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003744:	f7ff fff0 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003748:	4601      	mov	r1, r0
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	0a9b      	lsrs	r3, r3, #10
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4a03      	ldr	r2, [pc, #12]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	08007064 	.word	0x08007064

08003768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800376c:	f7ff ffdc 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003770:	4601      	mov	r1, r0
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0b5b      	lsrs	r3, r3, #13
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4a03      	ldr	r2, [pc, #12]	; (800378c <HAL_RCC_GetPCLK2Freq+0x24>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	08007064 	.word	0x08007064

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037aa:	4bc6      	ldr	r3, [pc, #792]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b0c      	cmp	r3, #12
 80037b4:	f200 817e 	bhi.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x324>
 80037b8:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <HAL_RCC_GetSysClockFreq+0x30>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	08003ab5 	.word	0x08003ab5
 80037c8:	08003ab5 	.word	0x08003ab5
 80037cc:	08003ab5 	.word	0x08003ab5
 80037d0:	080037fb 	.word	0x080037fb
 80037d4:	08003ab5 	.word	0x08003ab5
 80037d8:	08003ab5 	.word	0x08003ab5
 80037dc:	08003ab5 	.word	0x08003ab5
 80037e0:	08003801 	.word	0x08003801
 80037e4:	08003ab5 	.word	0x08003ab5
 80037e8:	08003ab5 	.word	0x08003ab5
 80037ec:	08003ab5 	.word	0x08003ab5
 80037f0:	0800395d 	.word	0x0800395d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4bb4      	ldr	r3, [pc, #720]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x338>)
 80037f6:	613b      	str	r3, [r7, #16]
       break;
 80037f8:	e15f      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037fa:	4bb4      	ldr	r3, [pc, #720]	; (8003acc <HAL_RCC_GetSysClockFreq+0x33c>)
 80037fc:	613b      	str	r3, [r7, #16]
      break;
 80037fe:	e15c      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003800:	4bb0      	ldr	r3, [pc, #704]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003808:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800380a:	4bae      	ldr	r3, [pc, #696]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04a      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003816:	4bab      	ldr	r3, [pc, #684]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	f04f 0400 	mov.w	r4, #0
 8003820:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	ea03 0501 	and.w	r5, r3, r1
 800382c:	ea04 0602 	and.w	r6, r4, r2
 8003830:	4629      	mov	r1, r5
 8003832:	4632      	mov	r2, r6
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	f04f 0400 	mov.w	r4, #0
 800383c:	0154      	lsls	r4, r2, #5
 800383e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003842:	014b      	lsls	r3, r1, #5
 8003844:	4619      	mov	r1, r3
 8003846:	4622      	mov	r2, r4
 8003848:	1b49      	subs	r1, r1, r5
 800384a:	eb62 0206 	sbc.w	r2, r2, r6
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	f04f 0400 	mov.w	r4, #0
 8003856:	0194      	lsls	r4, r2, #6
 8003858:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800385c:	018b      	lsls	r3, r1, #6
 800385e:	1a5b      	subs	r3, r3, r1
 8003860:	eb64 0402 	sbc.w	r4, r4, r2
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	00e2      	lsls	r2, r4, #3
 800386e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003872:	00d9      	lsls	r1, r3, #3
 8003874:	460b      	mov	r3, r1
 8003876:	4614      	mov	r4, r2
 8003878:	195b      	adds	r3, r3, r5
 800387a:	eb44 0406 	adc.w	r4, r4, r6
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	0262      	lsls	r2, r4, #9
 8003888:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800388c:	0259      	lsls	r1, r3, #9
 800388e:	460b      	mov	r3, r1
 8003890:	4614      	mov	r4, r2
 8003892:	4618      	mov	r0, r3
 8003894:	4621      	mov	r1, r4
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f04f 0400 	mov.w	r4, #0
 800389c:	461a      	mov	r2, r3
 800389e:	4623      	mov	r3, r4
 80038a0:	f7fd f9a4 	bl	8000bec <__aeabi_uldivmod>
 80038a4:	4603      	mov	r3, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e049      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ac:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	f04f 0400 	mov.w	r4, #0
 80038b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	ea03 0501 	and.w	r5, r3, r1
 80038c2:	ea04 0602 	and.w	r6, r4, r2
 80038c6:	4629      	mov	r1, r5
 80038c8:	4632      	mov	r2, r6
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	f04f 0400 	mov.w	r4, #0
 80038d2:	0154      	lsls	r4, r2, #5
 80038d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038d8:	014b      	lsls	r3, r1, #5
 80038da:	4619      	mov	r1, r3
 80038dc:	4622      	mov	r2, r4
 80038de:	1b49      	subs	r1, r1, r5
 80038e0:	eb62 0206 	sbc.w	r2, r2, r6
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	0194      	lsls	r4, r2, #6
 80038ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038f2:	018b      	lsls	r3, r1, #6
 80038f4:	1a5b      	subs	r3, r3, r1
 80038f6:	eb64 0402 	sbc.w	r4, r4, r2
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	00e2      	lsls	r2, r4, #3
 8003904:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003908:	00d9      	lsls	r1, r3, #3
 800390a:	460b      	mov	r3, r1
 800390c:	4614      	mov	r4, r2
 800390e:	195b      	adds	r3, r3, r5
 8003910:	eb44 0406 	adc.w	r4, r4, r6
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	02a2      	lsls	r2, r4, #10
 800391e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003922:	0299      	lsls	r1, r3, #10
 8003924:	460b      	mov	r3, r1
 8003926:	4614      	mov	r4, r2
 8003928:	4618      	mov	r0, r3
 800392a:	4621      	mov	r1, r4
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f04f 0400 	mov.w	r4, #0
 8003932:	461a      	mov	r2, r3
 8003934:	4623      	mov	r3, r4
 8003936:	f7fd f959 	bl	8000bec <__aeabi_uldivmod>
 800393a:	4603      	mov	r3, r0
 800393c:	460c      	mov	r4, r1
 800393e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003940:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	613b      	str	r3, [r7, #16]
      break;
 800395a:	e0ae      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800395c:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003964:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003966:	4b57      	ldr	r3, [pc, #348]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d04a      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003972:	4b54      	ldr	r3, [pc, #336]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	ea03 0501 	and.w	r5, r3, r1
 8003988:	ea04 0602 	and.w	r6, r4, r2
 800398c:	4629      	mov	r1, r5
 800398e:	4632      	mov	r2, r6
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	f04f 0400 	mov.w	r4, #0
 8003998:	0154      	lsls	r4, r2, #5
 800399a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800399e:	014b      	lsls	r3, r1, #5
 80039a0:	4619      	mov	r1, r3
 80039a2:	4622      	mov	r2, r4
 80039a4:	1b49      	subs	r1, r1, r5
 80039a6:	eb62 0206 	sbc.w	r2, r2, r6
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	f04f 0400 	mov.w	r4, #0
 80039b2:	0194      	lsls	r4, r2, #6
 80039b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039b8:	018b      	lsls	r3, r1, #6
 80039ba:	1a5b      	subs	r3, r3, r1
 80039bc:	eb64 0402 	sbc.w	r4, r4, r2
 80039c0:	f04f 0100 	mov.w	r1, #0
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	00e2      	lsls	r2, r4, #3
 80039ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039ce:	00d9      	lsls	r1, r3, #3
 80039d0:	460b      	mov	r3, r1
 80039d2:	4614      	mov	r4, r2
 80039d4:	195b      	adds	r3, r3, r5
 80039d6:	eb44 0406 	adc.w	r4, r4, r6
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	0262      	lsls	r2, r4, #9
 80039e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80039e8:	0259      	lsls	r1, r3, #9
 80039ea:	460b      	mov	r3, r1
 80039ec:	4614      	mov	r4, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	4621      	mov	r1, r4
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f04f 0400 	mov.w	r4, #0
 80039f8:	461a      	mov	r2, r3
 80039fa:	4623      	mov	r3, r4
 80039fc:	f7fd f8f6 	bl	8000bec <__aeabi_uldivmod>
 8003a00:	4603      	mov	r3, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e049      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a08:	4b2e      	ldr	r3, [pc, #184]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	f04f 0400 	mov.w	r4, #0
 8003a12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	ea03 0501 	and.w	r5, r3, r1
 8003a1e:	ea04 0602 	and.w	r6, r4, r2
 8003a22:	4629      	mov	r1, r5
 8003a24:	4632      	mov	r2, r6
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	f04f 0400 	mov.w	r4, #0
 8003a2e:	0154      	lsls	r4, r2, #5
 8003a30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a34:	014b      	lsls	r3, r1, #5
 8003a36:	4619      	mov	r1, r3
 8003a38:	4622      	mov	r2, r4
 8003a3a:	1b49      	subs	r1, r1, r5
 8003a3c:	eb62 0206 	sbc.w	r2, r2, r6
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	0194      	lsls	r4, r2, #6
 8003a4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a4e:	018b      	lsls	r3, r1, #6
 8003a50:	1a5b      	subs	r3, r3, r1
 8003a52:	eb64 0402 	sbc.w	r4, r4, r2
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	00e2      	lsls	r2, r4, #3
 8003a60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a64:	00d9      	lsls	r1, r3, #3
 8003a66:	460b      	mov	r3, r1
 8003a68:	4614      	mov	r4, r2
 8003a6a:	195b      	adds	r3, r3, r5
 8003a6c:	eb44 0406 	adc.w	r4, r4, r6
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	02a2      	lsls	r2, r4, #10
 8003a7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a7e:	0299      	lsls	r1, r3, #10
 8003a80:	460b      	mov	r3, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	4621      	mov	r1, r4
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f04f 0400 	mov.w	r4, #0
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4623      	mov	r3, r4
 8003a92:	f7fd f8ab 	bl	8000bec <__aeabi_uldivmod>
 8003a96:	4603      	mov	r3, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0f1b      	lsrs	r3, r3, #28
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	613b      	str	r3, [r7, #16]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x338>)
 8003ab6:	613b      	str	r3, [r7, #16]
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	693b      	ldr	r3, [r7, #16]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	007a1200 	.word	0x007a1200

08003ad0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8083 	beq.w	8003bf0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003aea:	4b95      	ldr	r3, [pc, #596]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d019      	beq.n	8003b2a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003af6:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d106      	bne.n	8003b10 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b02:	4b8f      	ldr	r3, [pc, #572]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b0e:	d00c      	beq.n	8003b2a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b10:	4b8b      	ldr	r3, [pc, #556]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d112      	bne.n	8003b42 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1c:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b28:	d10b      	bne.n	8003b42 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2a:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d05b      	beq.n	8003bee <HAL_RCC_OscConfig+0x11e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d157      	bne.n	8003bee <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e216      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x8a>
 8003b4c:	4b7c      	ldr	r3, [pc, #496]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a7b      	ldr	r2, [pc, #492]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e01d      	b.n	8003b96 <HAL_RCC_OscConfig+0xc6>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b62:	d10c      	bne.n	8003b7e <HAL_RCC_OscConfig+0xae>
 8003b64:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a75      	ldr	r2, [pc, #468]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b73      	ldr	r3, [pc, #460]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a72      	ldr	r2, [pc, #456]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	e00b      	b.n	8003b96 <HAL_RCC_OscConfig+0xc6>
 8003b7e:	4b70      	ldr	r3, [pc, #448]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a6f      	ldr	r2, [pc, #444]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b6d      	ldr	r3, [pc, #436]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6c      	ldr	r2, [pc, #432]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d013      	beq.n	8003bc6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f92f 	bl	8001e00 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba6:	f7fe f92b 	bl	8001e00 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1db      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb8:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0xd6>
 8003bc4:	e014      	b.n	8003bf0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fe f91b 	bl	8001e00 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bce:	f7fe f917 	bl	8001e00 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b64      	cmp	r3, #100	; 0x64
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e1c7      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be0:	4b57      	ldr	r3, [pc, #348]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0xfe>
 8003bec:	e000      	b.n	8003bf0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d06f      	beq.n	8003cdc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d017      	beq.n	8003c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c08:	4b4d      	ldr	r3, [pc, #308]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d105      	bne.n	8003c20 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c14:	4b4a      	ldr	r3, [pc, #296]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00b      	beq.n	8003c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c20:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d11c      	bne.n	8003c66 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2c:	4b44      	ldr	r3, [pc, #272]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d116      	bne.n	8003c66 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c38:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_OscConfig+0x180>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e18f      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4938      	ldr	r1, [pc, #224]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c64:	e03a      	b.n	8003cdc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d020      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe f8c4 	bl	8001e00 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe f8c0 	bl	8001e00 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e170      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8e:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4925      	ldr	r1, [pc, #148]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
 8003cae:	e015      	b.n	8003cdc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fe f8a3 	bl	8001e00 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fe f89f 	bl	8001e00 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e14f      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d037      	beq.n	8003d58 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d016      	beq.n	8003d1e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf0:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_RCC_OscConfig+0x278>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fe f883 	bl	8001e00 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fe f87f 	bl	8001e00 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e12f      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x22e>
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_RCC_OscConfig+0x278>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fe f86c 	bl	8001e00 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2a:	e00f      	b.n	8003d4c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fe f868 	bl	8001e00 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d908      	bls.n	8003d4c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e118      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	42470000 	.word	0x42470000
 8003d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	4b8a      	ldr	r3, [pc, #552]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e9      	bne.n	8003d2c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8097 	beq.w	8003e94 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b83      	ldr	r3, [pc, #524]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a7e      	ldr	r2, [pc, #504]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b7c      	ldr	r3, [pc, #496]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b79      	ldr	r3, [pc, #484]	; (8003f7c <HAL_RCC_OscConfig+0x4ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da2:	4b76      	ldr	r3, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x4ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a75      	ldr	r2, [pc, #468]	; (8003f7c <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fe f827 	bl	8001e00 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fe f823 	bl	8001e00 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0d3      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b6c      	ldr	r3, [pc, #432]	; (8003f7c <HAL_RCC_OscConfig+0x4ac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <HAL_RCC_OscConfig+0x31a>
 8003ddc:	4b66      	ldr	r3, [pc, #408]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a65      	ldr	r2, [pc, #404]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	e01c      	b.n	8003e24 <HAL_RCC_OscConfig+0x354>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x33c>
 8003df2:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a60      	ldr	r2, [pc, #384]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfe:	4b5e      	ldr	r3, [pc, #376]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCC_OscConfig+0x354>
 8003e0c:	4b5a      	ldr	r3, [pc, #360]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a59      	ldr	r2, [pc, #356]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	4b57      	ldr	r3, [pc, #348]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a56      	ldr	r2, [pc, #344]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e1e:	f023 0304 	bic.w	r3, r3, #4
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d015      	beq.n	8003e58 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7fd ffe8 	bl	8001e00 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e34:	f7fd ffe4 	bl	8001e00 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e092      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ee      	beq.n	8003e34 <HAL_RCC_OscConfig+0x364>
 8003e56:	e014      	b.n	8003e82 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fd ffd2 	bl	8001e00 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fd ffce 	bl	8001e00 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e07c      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e76:	4b40      	ldr	r3, [pc, #256]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ee      	bne.n	8003e60 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d068      	beq.n	8003f6e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e9c:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d060      	beq.n	8003f6a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d145      	bne.n	8003f3c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb0:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <HAL_RCC_OscConfig+0x4b0>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd ffa3 	bl	8001e00 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fd ff9f 	bl	8001e00 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e04f      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed0:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	019b      	lsls	r3, r3, #6
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	061b      	lsls	r3, r3, #24
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	071b      	lsls	r3, r3, #28
 8003f08:	491b      	ldr	r1, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <HAL_RCC_OscConfig+0x4b0>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd ff74 	bl	8001e00 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd ff70 	bl	8001e00 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e020      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x44c>
 8003f3a:	e018      	b.n	8003f6e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCC_OscConfig+0x4b0>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fd ff5d 	bl	8001e00 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fd ff59 	bl	8001e00 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e009      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RCC_OscConfig+0x4a8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x47a>
 8003f68:	e001      	b.n	8003f6e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	42470060 	.word	0x42470060

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e01d      	b.n	8003fd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fd2e 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fa38 	bl	8004438 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b06      	cmp	r3, #6
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b06      	cmp	r3, #6
 800404a:	d007      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d122      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d11b      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0202 	mvn.w	r2, #2
 8004096:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f9a5 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 80040b2:	e005      	b.n	80040c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f997 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9a8 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d122      	bne.n	800411a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d11b      	bne.n	800411a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f06f 0204 	mvn.w	r2, #4
 80040ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f97b 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8004106:	e005      	b.n	8004114 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f96d 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f97e 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b08      	cmp	r3, #8
 8004126:	d122      	bne.n	800416e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b08      	cmp	r3, #8
 8004134:	d11b      	bne.n	800416e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f06f 0208 	mvn.w	r2, #8
 800413e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2204      	movs	r2, #4
 8004144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f951 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 800415a:	e005      	b.n	8004168 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f943 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f954 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b10      	cmp	r3, #16
 800417a:	d122      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b10      	cmp	r3, #16
 8004188:	d11b      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f06f 0210 	mvn.w	r2, #16
 8004192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2208      	movs	r2, #8
 8004198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f927 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 80041ae:	e005      	b.n	80041bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f919 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f92a 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10e      	bne.n	80041ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f06f 0201 	mvn.w	r2, #1
 80041e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fd fa4b 	bl	8001684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d10e      	bne.n	800421a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d107      	bne.n	800421a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 facf 	bl	80047b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d10e      	bne.n	8004246 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d107      	bne.n	8004246 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8ef 	bl	8004424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b20      	cmp	r3, #32
 8004252:	d10e      	bne.n	8004272 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d107      	bne.n	8004272 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 0220 	mvn.w	r2, #32
 800426a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fa99 	bl	80047a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_TIM_ConfigClockSource+0x18>
 800428e:	2302      	movs	r3, #2
 8004290:	e0a6      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x166>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d067      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x120>
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d80b      	bhi.n	80042e6 <HAL_TIM_ConfigClockSource+0x6c>
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d073      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x140>
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d802      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x62>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d06f      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80042da:	e078      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d06c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x140>
 80042e0:	2b30      	cmp	r3, #48	; 0x30
 80042e2:	d06a      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x140>
      break;
 80042e4:	e073      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042e6:	2b70      	cmp	r3, #112	; 0x70
 80042e8:	d00d      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x8c>
 80042ea:	2b70      	cmp	r3, #112	; 0x70
 80042ec:	d804      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x7e>
 80042ee:	2b50      	cmp	r3, #80	; 0x50
 80042f0:	d033      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xe0>
 80042f2:	2b60      	cmp	r3, #96	; 0x60
 80042f4:	d041      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80042f6:	e06a      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d066      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0x152>
 80042fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004302:	d017      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004304:	e063      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f000 f9a9 	bl	800466c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004328:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	609a      	str	r2, [r3, #8]
      break;
 8004332:	e04c      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f000 f992 	bl	800466c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004356:	609a      	str	r2, [r3, #8]
      break;
 8004358:	e039      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	461a      	mov	r2, r3
 8004368:	f000 f906 	bl	8004578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2150      	movs	r1, #80	; 0x50
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f95f 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004378:	e029      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	461a      	mov	r2, r3
 8004388:	f000 f925 	bl	80045d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2160      	movs	r1, #96	; 0x60
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f94f 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004398:	e019      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f000 f8e6 	bl	8004578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2140      	movs	r1, #64	; 0x40
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f93f 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 80043b8:	e009      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f000 f936 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 80043ca:	e000      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x154>
      break;
 80043cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a40      	ldr	r2, [pc, #256]	; (800454c <TIM_Base_SetConfig+0x114>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004456:	d00f      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a3d      	ldr	r2, [pc, #244]	; (8004550 <TIM_Base_SetConfig+0x118>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <TIM_Base_SetConfig+0x11c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3b      	ldr	r2, [pc, #236]	; (8004558 <TIM_Base_SetConfig+0x120>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3a      	ldr	r2, [pc, #232]	; (800455c <TIM_Base_SetConfig+0x124>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2f      	ldr	r2, [pc, #188]	; (800454c <TIM_Base_SetConfig+0x114>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02b      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d027      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <TIM_Base_SetConfig+0x118>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d023      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <TIM_Base_SetConfig+0x11c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01f      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <TIM_Base_SetConfig+0x120>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01b      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a29      	ldr	r2, [pc, #164]	; (800455c <TIM_Base_SetConfig+0x124>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d017      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a28      	ldr	r2, [pc, #160]	; (8004560 <TIM_Base_SetConfig+0x128>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a27      	ldr	r2, [pc, #156]	; (8004564 <TIM_Base_SetConfig+0x12c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <TIM_Base_SetConfig+0x130>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a25      	ldr	r2, [pc, #148]	; (800456c <TIM_Base_SetConfig+0x134>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a24      	ldr	r2, [pc, #144]	; (8004570 <TIM_Base_SetConfig+0x138>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a23      	ldr	r2, [pc, #140]	; (8004574 <TIM_Base_SetConfig+0x13c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <TIM_Base_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_Base_SetConfig+0xf8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <TIM_Base_SetConfig+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d103      	bne.n	8004538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	615a      	str	r2, [r3, #20]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40010000 	.word	0x40010000
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40000c00 	.word	0x40000c00
 800455c:	40010400 	.word	0x40010400
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800
 800456c:	40001800 	.word	0x40001800
 8004570:	40001c00 	.word	0x40001c00
 8004574:	40002000 	.word	0x40002000

08004578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 030a 	bic.w	r3, r3, #10
 80045b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b087      	sub	sp, #28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0210 	bic.w	r2, r3, #16
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	031b      	lsls	r3, r3, #12
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004612:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	f043 0307 	orr.w	r3, r3, #7
 8004658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	021a      	lsls	r2, r3, #8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	431a      	orrs	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	609a      	str	r2, [r3, #8]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e05a      	b.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a21      	ldr	r2, [pc, #132]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d022      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d01d      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1d      	ldr	r2, [pc, #116]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d018      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00e      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a17      	ldr	r2, [pc, #92]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10c      	bne.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40010400 	.word	0x40010400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40001800 	.word	0x40001800

080047a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e03f      	b.n	800485e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd f946 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	; 0x24
 80047fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800480e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f90b 	bl	8004a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b088      	sub	sp, #32
 800486a:	af02      	add	r7, sp, #8
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b20      	cmp	r3, #32
 8004884:	f040 8083 	bne.w	800498e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Transmit+0x2e>
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e07b      	b.n	8004990 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Transmit+0x40>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e074      	b.n	8004990 <HAL_UART_Transmit+0x12a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2221      	movs	r2, #33	; 0x21
 80048b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80048bc:	f7fd faa0 	bl	8001e00 <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	88fa      	ldrh	r2, [r7, #6]
 80048cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80048d6:	e042      	b.n	800495e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	d122      	bne.n	8004936 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f84c 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e042      	b.n	8004990 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	3302      	adds	r3, #2
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	e017      	b.n	800495e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	3301      	adds	r3, #1
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	e013      	b.n	800495e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2200      	movs	r2, #0
 800493e:	2180      	movs	r1, #128	; 0x80
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f829 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e01f      	b.n	8004990 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	60ba      	str	r2, [r7, #8]
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1b7      	bne.n	80048d8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	2140      	movs	r1, #64	; 0x40
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f810 	bl	8004998 <UART_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e006      	b.n	8004990 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e000      	b.n	8004990 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800498e:	2302      	movs	r3, #2
  }
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	4613      	mov	r3, r2
 80049a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a8:	e02c      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d028      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049b8:	f7fd fa22 	bl	8001e00 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d21d      	bcs.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e00f      	b.n	8004a24 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d0c3      	beq.n	80049aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a6e:	f023 030c 	bic.w	r3, r3, #12
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9a:	f040 818b 	bne.w	8004db4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4ac1      	ldr	r2, [pc, #772]	; (8004da8 <UART_SetConfig+0x37c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d005      	beq.n	8004ab4 <UART_SetConfig+0x88>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4abf      	ldr	r2, [pc, #764]	; (8004dac <UART_SetConfig+0x380>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	f040 80bd 	bne.w	8004c2e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ab4:	f7fe fe58 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	461d      	mov	r5, r3
 8004abe:	f04f 0600 	mov.w	r6, #0
 8004ac2:	46a8      	mov	r8, r5
 8004ac4:	46b1      	mov	r9, r6
 8004ac6:	eb18 0308 	adds.w	r3, r8, r8
 8004aca:	eb49 0409 	adc.w	r4, r9, r9
 8004ace:	4698      	mov	r8, r3
 8004ad0:	46a1      	mov	r9, r4
 8004ad2:	eb18 0805 	adds.w	r8, r8, r5
 8004ad6:	eb49 0906 	adc.w	r9, r9, r6
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ae6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004aea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004aee:	4688      	mov	r8, r1
 8004af0:	4691      	mov	r9, r2
 8004af2:	eb18 0005 	adds.w	r0, r8, r5
 8004af6:	eb49 0106 	adc.w	r1, r9, r6
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	461d      	mov	r5, r3
 8004b00:	f04f 0600 	mov.w	r6, #0
 8004b04:	196b      	adds	r3, r5, r5
 8004b06:	eb46 0406 	adc.w	r4, r6, r6
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4623      	mov	r3, r4
 8004b0e:	f7fc f86d 	bl	8000bec <__aeabi_uldivmod>
 8004b12:	4603      	mov	r3, r0
 8004b14:	460c      	mov	r4, r1
 8004b16:	461a      	mov	r2, r3
 8004b18:	4ba5      	ldr	r3, [pc, #660]	; (8004db0 <UART_SetConfig+0x384>)
 8004b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	461d      	mov	r5, r3
 8004b28:	f04f 0600 	mov.w	r6, #0
 8004b2c:	46a9      	mov	r9, r5
 8004b2e:	46b2      	mov	sl, r6
 8004b30:	eb19 0309 	adds.w	r3, r9, r9
 8004b34:	eb4a 040a 	adc.w	r4, sl, sl
 8004b38:	4699      	mov	r9, r3
 8004b3a:	46a2      	mov	sl, r4
 8004b3c:	eb19 0905 	adds.w	r9, r9, r5
 8004b40:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b44:	f04f 0100 	mov.w	r1, #0
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b58:	4689      	mov	r9, r1
 8004b5a:	4692      	mov	sl, r2
 8004b5c:	eb19 0005 	adds.w	r0, r9, r5
 8004b60:	eb4a 0106 	adc.w	r1, sl, r6
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	461d      	mov	r5, r3
 8004b6a:	f04f 0600 	mov.w	r6, #0
 8004b6e:	196b      	adds	r3, r5, r5
 8004b70:	eb46 0406 	adc.w	r4, r6, r6
 8004b74:	461a      	mov	r2, r3
 8004b76:	4623      	mov	r3, r4
 8004b78:	f7fc f838 	bl	8000bec <__aeabi_uldivmod>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	461a      	mov	r2, r3
 8004b82:	4b8b      	ldr	r3, [pc, #556]	; (8004db0 <UART_SetConfig+0x384>)
 8004b84:	fba3 1302 	umull	r1, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	2164      	movs	r1, #100	; 0x64
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	3332      	adds	r3, #50	; 0x32
 8004b96:	4a86      	ldr	r2, [pc, #536]	; (8004db0 <UART_SetConfig+0x384>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ba4:	4498      	add	r8, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	461d      	mov	r5, r3
 8004baa:	f04f 0600 	mov.w	r6, #0
 8004bae:	46a9      	mov	r9, r5
 8004bb0:	46b2      	mov	sl, r6
 8004bb2:	eb19 0309 	adds.w	r3, r9, r9
 8004bb6:	eb4a 040a 	adc.w	r4, sl, sl
 8004bba:	4699      	mov	r9, r3
 8004bbc:	46a2      	mov	sl, r4
 8004bbe:	eb19 0905 	adds.w	r9, r9, r5
 8004bc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bc6:	f04f 0100 	mov.w	r1, #0
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bda:	4689      	mov	r9, r1
 8004bdc:	4692      	mov	sl, r2
 8004bde:	eb19 0005 	adds.w	r0, r9, r5
 8004be2:	eb4a 0106 	adc.w	r1, sl, r6
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	461d      	mov	r5, r3
 8004bec:	f04f 0600 	mov.w	r6, #0
 8004bf0:	196b      	adds	r3, r5, r5
 8004bf2:	eb46 0406 	adc.w	r4, r6, r6
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	f7fb fff7 	bl	8000bec <__aeabi_uldivmod>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	461a      	mov	r2, r3
 8004c04:	4b6a      	ldr	r3, [pc, #424]	; (8004db0 <UART_SetConfig+0x384>)
 8004c06:	fba3 1302 	umull	r1, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2164      	movs	r1, #100	; 0x64
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	3332      	adds	r3, #50	; 0x32
 8004c18:	4a65      	ldr	r2, [pc, #404]	; (8004db0 <UART_SetConfig+0x384>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	f003 0207 	and.w	r2, r3, #7
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4442      	add	r2, r8
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	e26f      	b.n	800510e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c2e:	f7fe fd87 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8004c32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	461d      	mov	r5, r3
 8004c38:	f04f 0600 	mov.w	r6, #0
 8004c3c:	46a8      	mov	r8, r5
 8004c3e:	46b1      	mov	r9, r6
 8004c40:	eb18 0308 	adds.w	r3, r8, r8
 8004c44:	eb49 0409 	adc.w	r4, r9, r9
 8004c48:	4698      	mov	r8, r3
 8004c4a:	46a1      	mov	r9, r4
 8004c4c:	eb18 0805 	adds.w	r8, r8, r5
 8004c50:	eb49 0906 	adc.w	r9, r9, r6
 8004c54:	f04f 0100 	mov.w	r1, #0
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c68:	4688      	mov	r8, r1
 8004c6a:	4691      	mov	r9, r2
 8004c6c:	eb18 0005 	adds.w	r0, r8, r5
 8004c70:	eb49 0106 	adc.w	r1, r9, r6
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	461d      	mov	r5, r3
 8004c7a:	f04f 0600 	mov.w	r6, #0
 8004c7e:	196b      	adds	r3, r5, r5
 8004c80:	eb46 0406 	adc.w	r4, r6, r6
 8004c84:	461a      	mov	r2, r3
 8004c86:	4623      	mov	r3, r4
 8004c88:	f7fb ffb0 	bl	8000bec <__aeabi_uldivmod>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <UART_SetConfig+0x384>)
 8004c94:	fba3 2302 	umull	r2, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	461d      	mov	r5, r3
 8004ca2:	f04f 0600 	mov.w	r6, #0
 8004ca6:	46a9      	mov	r9, r5
 8004ca8:	46b2      	mov	sl, r6
 8004caa:	eb19 0309 	adds.w	r3, r9, r9
 8004cae:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb2:	4699      	mov	r9, r3
 8004cb4:	46a2      	mov	sl, r4
 8004cb6:	eb19 0905 	adds.w	r9, r9, r5
 8004cba:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd2:	4689      	mov	r9, r1
 8004cd4:	4692      	mov	sl, r2
 8004cd6:	eb19 0005 	adds.w	r0, r9, r5
 8004cda:	eb4a 0106 	adc.w	r1, sl, r6
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	461d      	mov	r5, r3
 8004ce4:	f04f 0600 	mov.w	r6, #0
 8004ce8:	196b      	adds	r3, r5, r5
 8004cea:	eb46 0406 	adc.w	r4, r6, r6
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	f7fb ff7b 	bl	8000bec <__aeabi_uldivmod>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <UART_SetConfig+0x384>)
 8004cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2164      	movs	r1, #100	; 0x64
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	3332      	adds	r3, #50	; 0x32
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <UART_SetConfig+0x384>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d1e:	4498      	add	r8, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	461d      	mov	r5, r3
 8004d24:	f04f 0600 	mov.w	r6, #0
 8004d28:	46a9      	mov	r9, r5
 8004d2a:	46b2      	mov	sl, r6
 8004d2c:	eb19 0309 	adds.w	r3, r9, r9
 8004d30:	eb4a 040a 	adc.w	r4, sl, sl
 8004d34:	4699      	mov	r9, r3
 8004d36:	46a2      	mov	sl, r4
 8004d38:	eb19 0905 	adds.w	r9, r9, r5
 8004d3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d54:	4689      	mov	r9, r1
 8004d56:	4692      	mov	sl, r2
 8004d58:	eb19 0005 	adds.w	r0, r9, r5
 8004d5c:	eb4a 0106 	adc.w	r1, sl, r6
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	461d      	mov	r5, r3
 8004d66:	f04f 0600 	mov.w	r6, #0
 8004d6a:	196b      	adds	r3, r5, r5
 8004d6c:	eb46 0406 	adc.w	r4, r6, r6
 8004d70:	461a      	mov	r2, r3
 8004d72:	4623      	mov	r3, r4
 8004d74:	f7fb ff3a 	bl	8000bec <__aeabi_uldivmod>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <UART_SetConfig+0x384>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	; 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	3332      	adds	r3, #50	; 0x32
 8004d92:	4a07      	ldr	r2, [pc, #28]	; (8004db0 <UART_SetConfig+0x384>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 0207 	and.w	r2, r3, #7
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4442      	add	r2, r8
 8004da4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004da6:	e1b2      	b.n	800510e <UART_SetConfig+0x6e2>
 8004da8:	40011000 	.word	0x40011000
 8004dac:	40011400 	.word	0x40011400
 8004db0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4ad7      	ldr	r2, [pc, #860]	; (8005118 <UART_SetConfig+0x6ec>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d005      	beq.n	8004dca <UART_SetConfig+0x39e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4ad6      	ldr	r2, [pc, #856]	; (800511c <UART_SetConfig+0x6f0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	f040 80d1 	bne.w	8004f6c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dca:	f7fe fccd 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 8004dce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	469a      	mov	sl, r3
 8004dd4:	f04f 0b00 	mov.w	fp, #0
 8004dd8:	46d0      	mov	r8, sl
 8004dda:	46d9      	mov	r9, fp
 8004ddc:	eb18 0308 	adds.w	r3, r8, r8
 8004de0:	eb49 0409 	adc.w	r4, r9, r9
 8004de4:	4698      	mov	r8, r3
 8004de6:	46a1      	mov	r9, r4
 8004de8:	eb18 080a 	adds.w	r8, r8, sl
 8004dec:	eb49 090b 	adc.w	r9, r9, fp
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dfc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e04:	4688      	mov	r8, r1
 8004e06:	4691      	mov	r9, r2
 8004e08:	eb1a 0508 	adds.w	r5, sl, r8
 8004e0c:	eb4b 0609 	adc.w	r6, fp, r9
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4619      	mov	r1, r3
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	f04f 0400 	mov.w	r4, #0
 8004e22:	0094      	lsls	r4, r2, #2
 8004e24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e28:	008b      	lsls	r3, r1, #2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	4628      	mov	r0, r5
 8004e30:	4631      	mov	r1, r6
 8004e32:	f7fb fedb 	bl	8000bec <__aeabi_uldivmod>
 8004e36:	4603      	mov	r3, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4bb8      	ldr	r3, [pc, #736]	; (8005120 <UART_SetConfig+0x6f4>)
 8004e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	469b      	mov	fp, r3
 8004e4c:	f04f 0c00 	mov.w	ip, #0
 8004e50:	46d9      	mov	r9, fp
 8004e52:	46e2      	mov	sl, ip
 8004e54:	eb19 0309 	adds.w	r3, r9, r9
 8004e58:	eb4a 040a 	adc.w	r4, sl, sl
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	46a2      	mov	sl, r4
 8004e60:	eb19 090b 	adds.w	r9, r9, fp
 8004e64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e7c:	4689      	mov	r9, r1
 8004e7e:	4692      	mov	sl, r2
 8004e80:	eb1b 0509 	adds.w	r5, fp, r9
 8004e84:	eb4c 060a 	adc.w	r6, ip, sl
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	f04f 0400 	mov.w	r4, #0
 8004e9a:	0094      	lsls	r4, r2, #2
 8004e9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ea0:	008b      	lsls	r3, r1, #2
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	f7fb fe9f 	bl	8000bec <__aeabi_uldivmod>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b9a      	ldr	r3, [pc, #616]	; (8005120 <UART_SetConfig+0x6f4>)
 8004eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	2164      	movs	r1, #100	; 0x64
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	3332      	adds	r3, #50	; 0x32
 8004ec8:	4a95      	ldr	r2, [pc, #596]	; (8005120 <UART_SetConfig+0x6f4>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed4:	4498      	add	r8, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	469b      	mov	fp, r3
 8004eda:	f04f 0c00 	mov.w	ip, #0
 8004ede:	46d9      	mov	r9, fp
 8004ee0:	46e2      	mov	sl, ip
 8004ee2:	eb19 0309 	adds.w	r3, r9, r9
 8004ee6:	eb4a 040a 	adc.w	r4, sl, sl
 8004eea:	4699      	mov	r9, r3
 8004eec:	46a2      	mov	sl, r4
 8004eee:	eb19 090b 	adds.w	r9, r9, fp
 8004ef2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ef6:	f04f 0100 	mov.w	r1, #0
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f0a:	4689      	mov	r9, r1
 8004f0c:	4692      	mov	sl, r2
 8004f0e:	eb1b 0509 	adds.w	r5, fp, r9
 8004f12:	eb4c 060a 	adc.w	r6, ip, sl
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	f04f 0400 	mov.w	r4, #0
 8004f28:	0094      	lsls	r4, r2, #2
 8004f2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f2e:	008b      	lsls	r3, r1, #2
 8004f30:	461a      	mov	r2, r3
 8004f32:	4623      	mov	r3, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	4631      	mov	r1, r6
 8004f38:	f7fb fe58 	bl	8000bec <__aeabi_uldivmod>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	461a      	mov	r2, r3
 8004f42:	4b77      	ldr	r3, [pc, #476]	; (8005120 <UART_SetConfig+0x6f4>)
 8004f44:	fba3 1302 	umull	r1, r3, r3, r2
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	2164      	movs	r1, #100	; 0x64
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	3332      	adds	r3, #50	; 0x32
 8004f56:	4a72      	ldr	r2, [pc, #456]	; (8005120 <UART_SetConfig+0x6f4>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f003 020f 	and.w	r2, r3, #15
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4442      	add	r2, r8
 8004f68:	609a      	str	r2, [r3, #8]
 8004f6a:	e0d0      	b.n	800510e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f6c:	f7fe fbe8 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8004f70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	469a      	mov	sl, r3
 8004f76:	f04f 0b00 	mov.w	fp, #0
 8004f7a:	46d0      	mov	r8, sl
 8004f7c:	46d9      	mov	r9, fp
 8004f7e:	eb18 0308 	adds.w	r3, r8, r8
 8004f82:	eb49 0409 	adc.w	r4, r9, r9
 8004f86:	4698      	mov	r8, r3
 8004f88:	46a1      	mov	r9, r4
 8004f8a:	eb18 080a 	adds.w	r8, r8, sl
 8004f8e:	eb49 090b 	adc.w	r9, r9, fp
 8004f92:	f04f 0100 	mov.w	r1, #0
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fa2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fa6:	4688      	mov	r8, r1
 8004fa8:	4691      	mov	r9, r2
 8004faa:	eb1a 0508 	adds.w	r5, sl, r8
 8004fae:	eb4b 0609 	adc.w	r6, fp, r9
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	f04f 0400 	mov.w	r4, #0
 8004fc4:	0094      	lsls	r4, r2, #2
 8004fc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fca:	008b      	lsls	r3, r1, #2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	f7fb fe0a 	bl	8000bec <__aeabi_uldivmod>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b50      	ldr	r3, [pc, #320]	; (8005120 <UART_SetConfig+0x6f4>)
 8004fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	469b      	mov	fp, r3
 8004fee:	f04f 0c00 	mov.w	ip, #0
 8004ff2:	46d9      	mov	r9, fp
 8004ff4:	46e2      	mov	sl, ip
 8004ff6:	eb19 0309 	adds.w	r3, r9, r9
 8004ffa:	eb4a 040a 	adc.w	r4, sl, sl
 8004ffe:	4699      	mov	r9, r3
 8005000:	46a2      	mov	sl, r4
 8005002:	eb19 090b 	adds.w	r9, r9, fp
 8005006:	eb4a 0a0c 	adc.w	sl, sl, ip
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005016:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800501a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800501e:	4689      	mov	r9, r1
 8005020:	4692      	mov	sl, r2
 8005022:	eb1b 0509 	adds.w	r5, fp, r9
 8005026:	eb4c 060a 	adc.w	r6, ip, sl
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4619      	mov	r1, r3
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	f04f 0400 	mov.w	r4, #0
 800503c:	0094      	lsls	r4, r2, #2
 800503e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005042:	008b      	lsls	r3, r1, #2
 8005044:	461a      	mov	r2, r3
 8005046:	4623      	mov	r3, r4
 8005048:	4628      	mov	r0, r5
 800504a:	4631      	mov	r1, r6
 800504c:	f7fb fdce 	bl	8000bec <__aeabi_uldivmod>
 8005050:	4603      	mov	r3, r0
 8005052:	460c      	mov	r4, r1
 8005054:	461a      	mov	r2, r3
 8005056:	4b32      	ldr	r3, [pc, #200]	; (8005120 <UART_SetConfig+0x6f4>)
 8005058:	fba3 1302 	umull	r1, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	2164      	movs	r1, #100	; 0x64
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	3332      	adds	r3, #50	; 0x32
 800506a:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <UART_SetConfig+0x6f4>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005076:	4498      	add	r8, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	469b      	mov	fp, r3
 800507c:	f04f 0c00 	mov.w	ip, #0
 8005080:	46d9      	mov	r9, fp
 8005082:	46e2      	mov	sl, ip
 8005084:	eb19 0309 	adds.w	r3, r9, r9
 8005088:	eb4a 040a 	adc.w	r4, sl, sl
 800508c:	4699      	mov	r9, r3
 800508e:	46a2      	mov	sl, r4
 8005090:	eb19 090b 	adds.w	r9, r9, fp
 8005094:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005098:	f04f 0100 	mov.w	r1, #0
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050ac:	4689      	mov	r9, r1
 80050ae:	4692      	mov	sl, r2
 80050b0:	eb1b 0509 	adds.w	r5, fp, r9
 80050b4:	eb4c 060a 	adc.w	r6, ip, sl
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4619      	mov	r1, r3
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	f04f 0400 	mov.w	r4, #0
 80050ca:	0094      	lsls	r4, r2, #2
 80050cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050d0:	008b      	lsls	r3, r1, #2
 80050d2:	461a      	mov	r2, r3
 80050d4:	4623      	mov	r3, r4
 80050d6:	4628      	mov	r0, r5
 80050d8:	4631      	mov	r1, r6
 80050da:	f7fb fd87 	bl	8000bec <__aeabi_uldivmod>
 80050de:	4603      	mov	r3, r0
 80050e0:	460c      	mov	r4, r1
 80050e2:	461a      	mov	r2, r3
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <UART_SetConfig+0x6f4>)
 80050e6:	fba3 1302 	umull	r1, r3, r3, r2
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	2164      	movs	r1, #100	; 0x64
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	3332      	adds	r3, #50	; 0x32
 80050f8:	4a09      	ldr	r2, [pc, #36]	; (8005120 <UART_SetConfig+0x6f4>)
 80050fa:	fba2 2303 	umull	r2, r3, r2, r3
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	f003 020f 	and.w	r2, r3, #15
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4442      	add	r2, r8
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	e7ff      	b.n	800510e <UART_SetConfig+0x6e2>
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005118:	40011000 	.word	0x40011000
 800511c:	40011400 	.word	0x40011400
 8005120:	51eb851f 	.word	0x51eb851f

08005124 <arm_cfft_init_f32>:
 8005124:	4603      	mov	r3, r0
 8005126:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800512a:	f04f 0000 	mov.w	r0, #0
 800512e:	b410      	push	{r4}
 8005130:	8019      	strh	r1, [r3, #0]
 8005132:	6058      	str	r0, [r3, #4]
 8005134:	d033      	beq.n	800519e <arm_cfft_init_f32+0x7a>
 8005136:	d918      	bls.n	800516a <arm_cfft_init_f32+0x46>
 8005138:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800513c:	d027      	beq.n	800518e <arm_cfft_init_f32+0x6a>
 800513e:	d90c      	bls.n	800515a <arm_cfft_init_f32+0x36>
 8005140:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005144:	d11e      	bne.n	8005184 <arm_cfft_init_f32+0x60>
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <arm_cfft_init_f32+0x80>)
 8005148:	8994      	ldrh	r4, [r2, #12]
 800514a:	819c      	strh	r4, [r3, #12]
 800514c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8005150:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8005154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800515e:	d018      	beq.n	8005192 <arm_cfft_init_f32+0x6e>
 8005160:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005164:	d10e      	bne.n	8005184 <arm_cfft_init_f32+0x60>
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <arm_cfft_init_f32+0x84>)
 8005168:	e7ee      	b.n	8005148 <arm_cfft_init_f32+0x24>
 800516a:	2940      	cmp	r1, #64	; 0x40
 800516c:	d013      	beq.n	8005196 <arm_cfft_init_f32+0x72>
 800516e:	d903      	bls.n	8005178 <arm_cfft_init_f32+0x54>
 8005170:	2980      	cmp	r1, #128	; 0x80
 8005172:	d107      	bne.n	8005184 <arm_cfft_init_f32+0x60>
 8005174:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <arm_cfft_init_f32+0x88>)
 8005176:	e7e7      	b.n	8005148 <arm_cfft_init_f32+0x24>
 8005178:	2910      	cmp	r1, #16
 800517a:	d00e      	beq.n	800519a <arm_cfft_init_f32+0x76>
 800517c:	2920      	cmp	r1, #32
 800517e:	d101      	bne.n	8005184 <arm_cfft_init_f32+0x60>
 8005180:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <arm_cfft_init_f32+0x8c>)
 8005182:	e7e1      	b.n	8005148 <arm_cfft_init_f32+0x24>
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <arm_cfft_init_f32+0x90>)
 8005190:	e7da      	b.n	8005148 <arm_cfft_init_f32+0x24>
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <arm_cfft_init_f32+0x94>)
 8005194:	e7d8      	b.n	8005148 <arm_cfft_init_f32+0x24>
 8005196:	4a09      	ldr	r2, [pc, #36]	; (80051bc <arm_cfft_init_f32+0x98>)
 8005198:	e7d6      	b.n	8005148 <arm_cfft_init_f32+0x24>
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <arm_cfft_init_f32+0x9c>)
 800519c:	e7d4      	b.n	8005148 <arm_cfft_init_f32+0x24>
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <arm_cfft_init_f32+0xa0>)
 80051a0:	e7d2      	b.n	8005148 <arm_cfft_init_f32+0x24>
 80051a2:	bf00      	nop
 80051a4:	080070d4 	.word	0x080070d4
 80051a8:	08007074 	.word	0x08007074
 80051ac:	08007084 	.word	0x08007084
 80051b0:	080070c4 	.word	0x080070c4
 80051b4:	080070a4 	.word	0x080070a4
 80051b8:	080070e4 	.word	0x080070e4
 80051bc:	080070f4 	.word	0x080070f4
 80051c0:	08007094 	.word	0x08007094
 80051c4:	080070b4 	.word	0x080070b4

080051c8 <__errno>:
 80051c8:	4b01      	ldr	r3, [pc, #4]	; (80051d0 <__errno+0x8>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	2000000c 	.word	0x2000000c

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4e0d      	ldr	r6, [pc, #52]	; (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	; (8005210 <__libc_init_array+0x3c>)
 80051da:	1ba4      	subs	r4, r4, r6
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2500      	movs	r5, #0
 80051e0:	42a5      	cmp	r5, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4e0b      	ldr	r6, [pc, #44]	; (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	; (8005218 <__libc_init_array+0x44>)
 80051e8:	f001 ff18 	bl	800701c <_init>
 80051ec:	1ba4      	subs	r4, r4, r6
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2500      	movs	r5, #0
 80051f2:	42a5      	cmp	r5, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051fc:	4798      	blx	r3
 80051fe:	3501      	adds	r5, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005206:	4798      	blx	r3
 8005208:	3501      	adds	r5, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	0801c7d8 	.word	0x0801c7d8
 8005210:	0801c7d8 	.word	0x0801c7d8
 8005214:	0801c7d8 	.word	0x0801c7d8
 8005218:	0801c7dc 	.word	0x0801c7dc

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <iprintf>:
 800522c:	b40f      	push	{r0, r1, r2, r3}
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <iprintf+0x2c>)
 8005230:	b513      	push	{r0, r1, r4, lr}
 8005232:	681c      	ldr	r4, [r3, #0]
 8005234:	b124      	cbz	r4, 8005240 <iprintf+0x14>
 8005236:	69a3      	ldr	r3, [r4, #24]
 8005238:	b913      	cbnz	r3, 8005240 <iprintf+0x14>
 800523a:	4620      	mov	r0, r4
 800523c:	f000 f84e 	bl	80052dc <__sinit>
 8005240:	ab05      	add	r3, sp, #20
 8005242:	9a04      	ldr	r2, [sp, #16]
 8005244:	68a1      	ldr	r1, [r4, #8]
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	4620      	mov	r0, r4
 800524a:	f000 f955 	bl	80054f8 <_vfiprintf_r>
 800524e:	b002      	add	sp, #8
 8005250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005254:	b004      	add	sp, #16
 8005256:	4770      	bx	lr
 8005258:	2000000c 	.word	0x2000000c

0800525c <std>:
 800525c:	2300      	movs	r3, #0
 800525e:	b510      	push	{r4, lr}
 8005260:	4604      	mov	r4, r0
 8005262:	e9c0 3300 	strd	r3, r3, [r0]
 8005266:	6083      	str	r3, [r0, #8]
 8005268:	8181      	strh	r1, [r0, #12]
 800526a:	6643      	str	r3, [r0, #100]	; 0x64
 800526c:	81c2      	strh	r2, [r0, #14]
 800526e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005272:	6183      	str	r3, [r0, #24]
 8005274:	4619      	mov	r1, r3
 8005276:	2208      	movs	r2, #8
 8005278:	305c      	adds	r0, #92	; 0x5c
 800527a:	f7ff ffcf 	bl	800521c <memset>
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <std+0x38>)
 8005280:	6263      	str	r3, [r4, #36]	; 0x24
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <std+0x3c>)
 8005284:	62a3      	str	r3, [r4, #40]	; 0x28
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <std+0x40>)
 8005288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <std+0x44>)
 800528c:	6224      	str	r4, [r4, #32]
 800528e:	6323      	str	r3, [r4, #48]	; 0x30
 8005290:	bd10      	pop	{r4, pc}
 8005292:	bf00      	nop
 8005294:	08005a55 	.word	0x08005a55
 8005298:	08005a77 	.word	0x08005a77
 800529c:	08005aaf 	.word	0x08005aaf
 80052a0:	08005ad3 	.word	0x08005ad3

080052a4 <_cleanup_r>:
 80052a4:	4901      	ldr	r1, [pc, #4]	; (80052ac <_cleanup_r+0x8>)
 80052a6:	f000 b885 	b.w	80053b4 <_fwalk_reent>
 80052aa:	bf00      	nop
 80052ac:	08005dad 	.word	0x08005dad

080052b0 <__sfmoreglue>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	1e4a      	subs	r2, r1, #1
 80052b4:	2568      	movs	r5, #104	; 0x68
 80052b6:	4355      	muls	r5, r2
 80052b8:	460e      	mov	r6, r1
 80052ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052be:	f000 f897 	bl	80053f0 <_malloc_r>
 80052c2:	4604      	mov	r4, r0
 80052c4:	b140      	cbz	r0, 80052d8 <__sfmoreglue+0x28>
 80052c6:	2100      	movs	r1, #0
 80052c8:	e9c0 1600 	strd	r1, r6, [r0]
 80052cc:	300c      	adds	r0, #12
 80052ce:	60a0      	str	r0, [r4, #8]
 80052d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052d4:	f7ff ffa2 	bl	800521c <memset>
 80052d8:	4620      	mov	r0, r4
 80052da:	bd70      	pop	{r4, r5, r6, pc}

080052dc <__sinit>:
 80052dc:	6983      	ldr	r3, [r0, #24]
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	bb33      	cbnz	r3, 8005332 <__sinit+0x56>
 80052e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80052e8:	6503      	str	r3, [r0, #80]	; 0x50
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <__sinit+0x58>)
 80052ec:	4a12      	ldr	r2, [pc, #72]	; (8005338 <__sinit+0x5c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6282      	str	r2, [r0, #40]	; 0x28
 80052f2:	4298      	cmp	r0, r3
 80052f4:	bf04      	itt	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	6183      	streq	r3, [r0, #24]
 80052fa:	f000 f81f 	bl	800533c <__sfp>
 80052fe:	6060      	str	r0, [r4, #4]
 8005300:	4620      	mov	r0, r4
 8005302:	f000 f81b 	bl	800533c <__sfp>
 8005306:	60a0      	str	r0, [r4, #8]
 8005308:	4620      	mov	r0, r4
 800530a:	f000 f817 	bl	800533c <__sfp>
 800530e:	2200      	movs	r2, #0
 8005310:	60e0      	str	r0, [r4, #12]
 8005312:	2104      	movs	r1, #4
 8005314:	6860      	ldr	r0, [r4, #4]
 8005316:	f7ff ffa1 	bl	800525c <std>
 800531a:	2201      	movs	r2, #1
 800531c:	2109      	movs	r1, #9
 800531e:	68a0      	ldr	r0, [r4, #8]
 8005320:	f7ff ff9c 	bl	800525c <std>
 8005324:	2202      	movs	r2, #2
 8005326:	2112      	movs	r1, #18
 8005328:	68e0      	ldr	r0, [r4, #12]
 800532a:	f7ff ff97 	bl	800525c <std>
 800532e:	2301      	movs	r3, #1
 8005330:	61a3      	str	r3, [r4, #24]
 8005332:	bd10      	pop	{r4, pc}
 8005334:	0801c55c 	.word	0x0801c55c
 8005338:	080052a5 	.word	0x080052a5

0800533c <__sfp>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <__sfp+0x70>)
 8005340:	681e      	ldr	r6, [r3, #0]
 8005342:	69b3      	ldr	r3, [r6, #24]
 8005344:	4607      	mov	r7, r0
 8005346:	b913      	cbnz	r3, 800534e <__sfp+0x12>
 8005348:	4630      	mov	r0, r6
 800534a:	f7ff ffc7 	bl	80052dc <__sinit>
 800534e:	3648      	adds	r6, #72	; 0x48
 8005350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005354:	3b01      	subs	r3, #1
 8005356:	d503      	bpl.n	8005360 <__sfp+0x24>
 8005358:	6833      	ldr	r3, [r6, #0]
 800535a:	b133      	cbz	r3, 800536a <__sfp+0x2e>
 800535c:	6836      	ldr	r6, [r6, #0]
 800535e:	e7f7      	b.n	8005350 <__sfp+0x14>
 8005360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005364:	b16d      	cbz	r5, 8005382 <__sfp+0x46>
 8005366:	3468      	adds	r4, #104	; 0x68
 8005368:	e7f4      	b.n	8005354 <__sfp+0x18>
 800536a:	2104      	movs	r1, #4
 800536c:	4638      	mov	r0, r7
 800536e:	f7ff ff9f 	bl	80052b0 <__sfmoreglue>
 8005372:	6030      	str	r0, [r6, #0]
 8005374:	2800      	cmp	r0, #0
 8005376:	d1f1      	bne.n	800535c <__sfp+0x20>
 8005378:	230c      	movs	r3, #12
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4604      	mov	r4, r0
 800537e:	4620      	mov	r0, r4
 8005380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <__sfp+0x74>)
 8005384:	6665      	str	r5, [r4, #100]	; 0x64
 8005386:	e9c4 5500 	strd	r5, r5, [r4]
 800538a:	60a5      	str	r5, [r4, #8]
 800538c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005390:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005394:	2208      	movs	r2, #8
 8005396:	4629      	mov	r1, r5
 8005398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800539c:	f7ff ff3e 	bl	800521c <memset>
 80053a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053a8:	e7e9      	b.n	800537e <__sfp+0x42>
 80053aa:	bf00      	nop
 80053ac:	0801c55c 	.word	0x0801c55c
 80053b0:	ffff0001 	.word	0xffff0001

080053b4 <_fwalk_reent>:
 80053b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	4680      	mov	r8, r0
 80053ba:	4689      	mov	r9, r1
 80053bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053c0:	2600      	movs	r6, #0
 80053c2:	b914      	cbnz	r4, 80053ca <_fwalk_reent+0x16>
 80053c4:	4630      	mov	r0, r6
 80053c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80053ce:	3f01      	subs	r7, #1
 80053d0:	d501      	bpl.n	80053d6 <_fwalk_reent+0x22>
 80053d2:	6824      	ldr	r4, [r4, #0]
 80053d4:	e7f5      	b.n	80053c2 <_fwalk_reent+0xe>
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d907      	bls.n	80053ec <_fwalk_reent+0x38>
 80053dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053e0:	3301      	adds	r3, #1
 80053e2:	d003      	beq.n	80053ec <_fwalk_reent+0x38>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4640      	mov	r0, r8
 80053e8:	47c8      	blx	r9
 80053ea:	4306      	orrs	r6, r0
 80053ec:	3568      	adds	r5, #104	; 0x68
 80053ee:	e7ee      	b.n	80053ce <_fwalk_reent+0x1a>

080053f0 <_malloc_r>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	1ccd      	adds	r5, r1, #3
 80053f4:	f025 0503 	bic.w	r5, r5, #3
 80053f8:	3508      	adds	r5, #8
 80053fa:	2d0c      	cmp	r5, #12
 80053fc:	bf38      	it	cc
 80053fe:	250c      	movcc	r5, #12
 8005400:	2d00      	cmp	r5, #0
 8005402:	4606      	mov	r6, r0
 8005404:	db01      	blt.n	800540a <_malloc_r+0x1a>
 8005406:	42a9      	cmp	r1, r5
 8005408:	d903      	bls.n	8005412 <_malloc_r+0x22>
 800540a:	230c      	movs	r3, #12
 800540c:	6033      	str	r3, [r6, #0]
 800540e:	2000      	movs	r0, #0
 8005410:	bd70      	pop	{r4, r5, r6, pc}
 8005412:	f000 fd6b 	bl	8005eec <__malloc_lock>
 8005416:	4a21      	ldr	r2, [pc, #132]	; (800549c <_malloc_r+0xac>)
 8005418:	6814      	ldr	r4, [r2, #0]
 800541a:	4621      	mov	r1, r4
 800541c:	b991      	cbnz	r1, 8005444 <_malloc_r+0x54>
 800541e:	4c20      	ldr	r4, [pc, #128]	; (80054a0 <_malloc_r+0xb0>)
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	b91b      	cbnz	r3, 800542c <_malloc_r+0x3c>
 8005424:	4630      	mov	r0, r6
 8005426:	f000 fb05 	bl	8005a34 <_sbrk_r>
 800542a:	6020      	str	r0, [r4, #0]
 800542c:	4629      	mov	r1, r5
 800542e:	4630      	mov	r0, r6
 8005430:	f000 fb00 	bl	8005a34 <_sbrk_r>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d124      	bne.n	8005482 <_malloc_r+0x92>
 8005438:	230c      	movs	r3, #12
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	4630      	mov	r0, r6
 800543e:	f000 fd56 	bl	8005eee <__malloc_unlock>
 8005442:	e7e4      	b.n	800540e <_malloc_r+0x1e>
 8005444:	680b      	ldr	r3, [r1, #0]
 8005446:	1b5b      	subs	r3, r3, r5
 8005448:	d418      	bmi.n	800547c <_malloc_r+0x8c>
 800544a:	2b0b      	cmp	r3, #11
 800544c:	d90f      	bls.n	800546e <_malloc_r+0x7e>
 800544e:	600b      	str	r3, [r1, #0]
 8005450:	50cd      	str	r5, [r1, r3]
 8005452:	18cc      	adds	r4, r1, r3
 8005454:	4630      	mov	r0, r6
 8005456:	f000 fd4a 	bl	8005eee <__malloc_unlock>
 800545a:	f104 000b 	add.w	r0, r4, #11
 800545e:	1d23      	adds	r3, r4, #4
 8005460:	f020 0007 	bic.w	r0, r0, #7
 8005464:	1ac3      	subs	r3, r0, r3
 8005466:	d0d3      	beq.n	8005410 <_malloc_r+0x20>
 8005468:	425a      	negs	r2, r3
 800546a:	50e2      	str	r2, [r4, r3]
 800546c:	e7d0      	b.n	8005410 <_malloc_r+0x20>
 800546e:	428c      	cmp	r4, r1
 8005470:	684b      	ldr	r3, [r1, #4]
 8005472:	bf16      	itet	ne
 8005474:	6063      	strne	r3, [r4, #4]
 8005476:	6013      	streq	r3, [r2, #0]
 8005478:	460c      	movne	r4, r1
 800547a:	e7eb      	b.n	8005454 <_malloc_r+0x64>
 800547c:	460c      	mov	r4, r1
 800547e:	6849      	ldr	r1, [r1, #4]
 8005480:	e7cc      	b.n	800541c <_malloc_r+0x2c>
 8005482:	1cc4      	adds	r4, r0, #3
 8005484:	f024 0403 	bic.w	r4, r4, #3
 8005488:	42a0      	cmp	r0, r4
 800548a:	d005      	beq.n	8005498 <_malloc_r+0xa8>
 800548c:	1a21      	subs	r1, r4, r0
 800548e:	4630      	mov	r0, r6
 8005490:	f000 fad0 	bl	8005a34 <_sbrk_r>
 8005494:	3001      	adds	r0, #1
 8005496:	d0cf      	beq.n	8005438 <_malloc_r+0x48>
 8005498:	6025      	str	r5, [r4, #0]
 800549a:	e7db      	b.n	8005454 <_malloc_r+0x64>
 800549c:	20000094 	.word	0x20000094
 80054a0:	20000098 	.word	0x20000098

080054a4 <__sfputc_r>:
 80054a4:	6893      	ldr	r3, [r2, #8]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	b410      	push	{r4}
 80054ac:	6093      	str	r3, [r2, #8]
 80054ae:	da08      	bge.n	80054c2 <__sfputc_r+0x1e>
 80054b0:	6994      	ldr	r4, [r2, #24]
 80054b2:	42a3      	cmp	r3, r4
 80054b4:	db01      	blt.n	80054ba <__sfputc_r+0x16>
 80054b6:	290a      	cmp	r1, #10
 80054b8:	d103      	bne.n	80054c2 <__sfputc_r+0x1e>
 80054ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054be:	f000 bb0d 	b.w	8005adc <__swbuf_r>
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	1c58      	adds	r0, r3, #1
 80054c6:	6010      	str	r0, [r2, #0]
 80054c8:	7019      	strb	r1, [r3, #0]
 80054ca:	4608      	mov	r0, r1
 80054cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <__sfputs_r>:
 80054d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d4:	4606      	mov	r6, r0
 80054d6:	460f      	mov	r7, r1
 80054d8:	4614      	mov	r4, r2
 80054da:	18d5      	adds	r5, r2, r3
 80054dc:	42ac      	cmp	r4, r5
 80054de:	d101      	bne.n	80054e4 <__sfputs_r+0x12>
 80054e0:	2000      	movs	r0, #0
 80054e2:	e007      	b.n	80054f4 <__sfputs_r+0x22>
 80054e4:	463a      	mov	r2, r7
 80054e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7ff ffda 	bl	80054a4 <__sfputc_r>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d1f3      	bne.n	80054dc <__sfputs_r+0xa>
 80054f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054f8 <_vfiprintf_r>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	460c      	mov	r4, r1
 80054fe:	b09d      	sub	sp, #116	; 0x74
 8005500:	4617      	mov	r7, r2
 8005502:	461d      	mov	r5, r3
 8005504:	4606      	mov	r6, r0
 8005506:	b118      	cbz	r0, 8005510 <_vfiprintf_r+0x18>
 8005508:	6983      	ldr	r3, [r0, #24]
 800550a:	b90b      	cbnz	r3, 8005510 <_vfiprintf_r+0x18>
 800550c:	f7ff fee6 	bl	80052dc <__sinit>
 8005510:	4b7c      	ldr	r3, [pc, #496]	; (8005704 <_vfiprintf_r+0x20c>)
 8005512:	429c      	cmp	r4, r3
 8005514:	d158      	bne.n	80055c8 <_vfiprintf_r+0xd0>
 8005516:	6874      	ldr	r4, [r6, #4]
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	0718      	lsls	r0, r3, #28
 800551c:	d55e      	bpl.n	80055dc <_vfiprintf_r+0xe4>
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05b      	beq.n	80055dc <_vfiprintf_r+0xe4>
 8005524:	2300      	movs	r3, #0
 8005526:	9309      	str	r3, [sp, #36]	; 0x24
 8005528:	2320      	movs	r3, #32
 800552a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800552e:	2330      	movs	r3, #48	; 0x30
 8005530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005534:	9503      	str	r5, [sp, #12]
 8005536:	f04f 0b01 	mov.w	fp, #1
 800553a:	46b8      	mov	r8, r7
 800553c:	4645      	mov	r5, r8
 800553e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005542:	b10b      	cbz	r3, 8005548 <_vfiprintf_r+0x50>
 8005544:	2b25      	cmp	r3, #37	; 0x25
 8005546:	d154      	bne.n	80055f2 <_vfiprintf_r+0xfa>
 8005548:	ebb8 0a07 	subs.w	sl, r8, r7
 800554c:	d00b      	beq.n	8005566 <_vfiprintf_r+0x6e>
 800554e:	4653      	mov	r3, sl
 8005550:	463a      	mov	r2, r7
 8005552:	4621      	mov	r1, r4
 8005554:	4630      	mov	r0, r6
 8005556:	f7ff ffbc 	bl	80054d2 <__sfputs_r>
 800555a:	3001      	adds	r0, #1
 800555c:	f000 80c2 	beq.w	80056e4 <_vfiprintf_r+0x1ec>
 8005560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005562:	4453      	add	r3, sl
 8005564:	9309      	str	r3, [sp, #36]	; 0x24
 8005566:	f898 3000 	ldrb.w	r3, [r8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80ba 	beq.w	80056e4 <_vfiprintf_r+0x1ec>
 8005570:	2300      	movs	r3, #0
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	9307      	str	r3, [sp, #28]
 800557e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005582:	931a      	str	r3, [sp, #104]	; 0x68
 8005584:	46a8      	mov	r8, r5
 8005586:	2205      	movs	r2, #5
 8005588:	f818 1b01 	ldrb.w	r1, [r8], #1
 800558c:	485e      	ldr	r0, [pc, #376]	; (8005708 <_vfiprintf_r+0x210>)
 800558e:	f7fa fe3f 	bl	8000210 <memchr>
 8005592:	9b04      	ldr	r3, [sp, #16]
 8005594:	bb78      	cbnz	r0, 80055f6 <_vfiprintf_r+0xfe>
 8005596:	06d9      	lsls	r1, r3, #27
 8005598:	bf44      	itt	mi
 800559a:	2220      	movmi	r2, #32
 800559c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055a0:	071a      	lsls	r2, r3, #28
 80055a2:	bf44      	itt	mi
 80055a4:	222b      	movmi	r2, #43	; 0x2b
 80055a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055aa:	782a      	ldrb	r2, [r5, #0]
 80055ac:	2a2a      	cmp	r2, #42	; 0x2a
 80055ae:	d02a      	beq.n	8005606 <_vfiprintf_r+0x10e>
 80055b0:	9a07      	ldr	r2, [sp, #28]
 80055b2:	46a8      	mov	r8, r5
 80055b4:	2000      	movs	r0, #0
 80055b6:	250a      	movs	r5, #10
 80055b8:	4641      	mov	r1, r8
 80055ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055be:	3b30      	subs	r3, #48	; 0x30
 80055c0:	2b09      	cmp	r3, #9
 80055c2:	d969      	bls.n	8005698 <_vfiprintf_r+0x1a0>
 80055c4:	b360      	cbz	r0, 8005620 <_vfiprintf_r+0x128>
 80055c6:	e024      	b.n	8005612 <_vfiprintf_r+0x11a>
 80055c8:	4b50      	ldr	r3, [pc, #320]	; (800570c <_vfiprintf_r+0x214>)
 80055ca:	429c      	cmp	r4, r3
 80055cc:	d101      	bne.n	80055d2 <_vfiprintf_r+0xda>
 80055ce:	68b4      	ldr	r4, [r6, #8]
 80055d0:	e7a2      	b.n	8005518 <_vfiprintf_r+0x20>
 80055d2:	4b4f      	ldr	r3, [pc, #316]	; (8005710 <_vfiprintf_r+0x218>)
 80055d4:	429c      	cmp	r4, r3
 80055d6:	bf08      	it	eq
 80055d8:	68f4      	ldreq	r4, [r6, #12]
 80055da:	e79d      	b.n	8005518 <_vfiprintf_r+0x20>
 80055dc:	4621      	mov	r1, r4
 80055de:	4630      	mov	r0, r6
 80055e0:	f000 fae0 	bl	8005ba4 <__swsetup_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d09d      	beq.n	8005524 <_vfiprintf_r+0x2c>
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	b01d      	add	sp, #116	; 0x74
 80055ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f2:	46a8      	mov	r8, r5
 80055f4:	e7a2      	b.n	800553c <_vfiprintf_r+0x44>
 80055f6:	4a44      	ldr	r2, [pc, #272]	; (8005708 <_vfiprintf_r+0x210>)
 80055f8:	1a80      	subs	r0, r0, r2
 80055fa:	fa0b f000 	lsl.w	r0, fp, r0
 80055fe:	4318      	orrs	r0, r3
 8005600:	9004      	str	r0, [sp, #16]
 8005602:	4645      	mov	r5, r8
 8005604:	e7be      	b.n	8005584 <_vfiprintf_r+0x8c>
 8005606:	9a03      	ldr	r2, [sp, #12]
 8005608:	1d11      	adds	r1, r2, #4
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	9103      	str	r1, [sp, #12]
 800560e:	2a00      	cmp	r2, #0
 8005610:	db01      	blt.n	8005616 <_vfiprintf_r+0x11e>
 8005612:	9207      	str	r2, [sp, #28]
 8005614:	e004      	b.n	8005620 <_vfiprintf_r+0x128>
 8005616:	4252      	negs	r2, r2
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	9207      	str	r2, [sp, #28]
 800561e:	9304      	str	r3, [sp, #16]
 8005620:	f898 3000 	ldrb.w	r3, [r8]
 8005624:	2b2e      	cmp	r3, #46	; 0x2e
 8005626:	d10e      	bne.n	8005646 <_vfiprintf_r+0x14e>
 8005628:	f898 3001 	ldrb.w	r3, [r8, #1]
 800562c:	2b2a      	cmp	r3, #42	; 0x2a
 800562e:	d138      	bne.n	80056a2 <_vfiprintf_r+0x1aa>
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	9203      	str	r2, [sp, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfb8      	it	lt
 800563c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005640:	f108 0802 	add.w	r8, r8, #2
 8005644:	9305      	str	r3, [sp, #20]
 8005646:	4d33      	ldr	r5, [pc, #204]	; (8005714 <_vfiprintf_r+0x21c>)
 8005648:	f898 1000 	ldrb.w	r1, [r8]
 800564c:	2203      	movs	r2, #3
 800564e:	4628      	mov	r0, r5
 8005650:	f7fa fdde 	bl	8000210 <memchr>
 8005654:	b140      	cbz	r0, 8005668 <_vfiprintf_r+0x170>
 8005656:	2340      	movs	r3, #64	; 0x40
 8005658:	1b40      	subs	r0, r0, r5
 800565a:	fa03 f000 	lsl.w	r0, r3, r0
 800565e:	9b04      	ldr	r3, [sp, #16]
 8005660:	4303      	orrs	r3, r0
 8005662:	f108 0801 	add.w	r8, r8, #1
 8005666:	9304      	str	r3, [sp, #16]
 8005668:	f898 1000 	ldrb.w	r1, [r8]
 800566c:	482a      	ldr	r0, [pc, #168]	; (8005718 <_vfiprintf_r+0x220>)
 800566e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005672:	2206      	movs	r2, #6
 8005674:	f108 0701 	add.w	r7, r8, #1
 8005678:	f7fa fdca 	bl	8000210 <memchr>
 800567c:	2800      	cmp	r0, #0
 800567e:	d037      	beq.n	80056f0 <_vfiprintf_r+0x1f8>
 8005680:	4b26      	ldr	r3, [pc, #152]	; (800571c <_vfiprintf_r+0x224>)
 8005682:	bb1b      	cbnz	r3, 80056cc <_vfiprintf_r+0x1d4>
 8005684:	9b03      	ldr	r3, [sp, #12]
 8005686:	3307      	adds	r3, #7
 8005688:	f023 0307 	bic.w	r3, r3, #7
 800568c:	3308      	adds	r3, #8
 800568e:	9303      	str	r3, [sp, #12]
 8005690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005692:	444b      	add	r3, r9
 8005694:	9309      	str	r3, [sp, #36]	; 0x24
 8005696:	e750      	b.n	800553a <_vfiprintf_r+0x42>
 8005698:	fb05 3202 	mla	r2, r5, r2, r3
 800569c:	2001      	movs	r0, #1
 800569e:	4688      	mov	r8, r1
 80056a0:	e78a      	b.n	80055b8 <_vfiprintf_r+0xc0>
 80056a2:	2300      	movs	r3, #0
 80056a4:	f108 0801 	add.w	r8, r8, #1
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	4619      	mov	r1, r3
 80056ac:	250a      	movs	r5, #10
 80056ae:	4640      	mov	r0, r8
 80056b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056b4:	3a30      	subs	r2, #48	; 0x30
 80056b6:	2a09      	cmp	r2, #9
 80056b8:	d903      	bls.n	80056c2 <_vfiprintf_r+0x1ca>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0c3      	beq.n	8005646 <_vfiprintf_r+0x14e>
 80056be:	9105      	str	r1, [sp, #20]
 80056c0:	e7c1      	b.n	8005646 <_vfiprintf_r+0x14e>
 80056c2:	fb05 2101 	mla	r1, r5, r1, r2
 80056c6:	2301      	movs	r3, #1
 80056c8:	4680      	mov	r8, r0
 80056ca:	e7f0      	b.n	80056ae <_vfiprintf_r+0x1b6>
 80056cc:	ab03      	add	r3, sp, #12
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4622      	mov	r2, r4
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <_vfiprintf_r+0x228>)
 80056d4:	a904      	add	r1, sp, #16
 80056d6:	4630      	mov	r0, r6
 80056d8:	f3af 8000 	nop.w
 80056dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056e0:	4681      	mov	r9, r0
 80056e2:	d1d5      	bne.n	8005690 <_vfiprintf_r+0x198>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	065b      	lsls	r3, r3, #25
 80056e8:	f53f af7e 	bmi.w	80055e8 <_vfiprintf_r+0xf0>
 80056ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ee:	e77d      	b.n	80055ec <_vfiprintf_r+0xf4>
 80056f0:	ab03      	add	r3, sp, #12
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	4622      	mov	r2, r4
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <_vfiprintf_r+0x228>)
 80056f8:	a904      	add	r1, sp, #16
 80056fa:	4630      	mov	r0, r6
 80056fc:	f000 f888 	bl	8005810 <_printf_i>
 8005700:	e7ec      	b.n	80056dc <_vfiprintf_r+0x1e4>
 8005702:	bf00      	nop
 8005704:	0801c580 	.word	0x0801c580
 8005708:	0801c5c0 	.word	0x0801c5c0
 800570c:	0801c5a0 	.word	0x0801c5a0
 8005710:	0801c560 	.word	0x0801c560
 8005714:	0801c5c6 	.word	0x0801c5c6
 8005718:	0801c5ca 	.word	0x0801c5ca
 800571c:	00000000 	.word	0x00000000
 8005720:	080054d3 	.word	0x080054d3

08005724 <_printf_common>:
 8005724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005728:	4691      	mov	r9, r2
 800572a:	461f      	mov	r7, r3
 800572c:	688a      	ldr	r2, [r1, #8]
 800572e:	690b      	ldr	r3, [r1, #16]
 8005730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005734:	4293      	cmp	r3, r2
 8005736:	bfb8      	it	lt
 8005738:	4613      	movlt	r3, r2
 800573a:	f8c9 3000 	str.w	r3, [r9]
 800573e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005742:	4606      	mov	r6, r0
 8005744:	460c      	mov	r4, r1
 8005746:	b112      	cbz	r2, 800574e <_printf_common+0x2a>
 8005748:	3301      	adds	r3, #1
 800574a:	f8c9 3000 	str.w	r3, [r9]
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	0699      	lsls	r1, r3, #26
 8005752:	bf42      	ittt	mi
 8005754:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005758:	3302      	addmi	r3, #2
 800575a:	f8c9 3000 	strmi.w	r3, [r9]
 800575e:	6825      	ldr	r5, [r4, #0]
 8005760:	f015 0506 	ands.w	r5, r5, #6
 8005764:	d107      	bne.n	8005776 <_printf_common+0x52>
 8005766:	f104 0a19 	add.w	sl, r4, #25
 800576a:	68e3      	ldr	r3, [r4, #12]
 800576c:	f8d9 2000 	ldr.w	r2, [r9]
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	42ab      	cmp	r3, r5
 8005774:	dc28      	bgt.n	80057c8 <_printf_common+0xa4>
 8005776:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	3300      	adds	r3, #0
 800577e:	bf18      	it	ne
 8005780:	2301      	movne	r3, #1
 8005782:	0692      	lsls	r2, r2, #26
 8005784:	d42d      	bmi.n	80057e2 <_printf_common+0xbe>
 8005786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800578a:	4639      	mov	r1, r7
 800578c:	4630      	mov	r0, r6
 800578e:	47c0      	blx	r8
 8005790:	3001      	adds	r0, #1
 8005792:	d020      	beq.n	80057d6 <_printf_common+0xb2>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	68e5      	ldr	r5, [r4, #12]
 8005798:	f8d9 2000 	ldr.w	r2, [r9]
 800579c:	f003 0306 	and.w	r3, r3, #6
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	bf08      	it	eq
 80057a4:	1aad      	subeq	r5, r5, r2
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	6922      	ldr	r2, [r4, #16]
 80057aa:	bf0c      	ite	eq
 80057ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057b0:	2500      	movne	r5, #0
 80057b2:	4293      	cmp	r3, r2
 80057b4:	bfc4      	itt	gt
 80057b6:	1a9b      	subgt	r3, r3, r2
 80057b8:	18ed      	addgt	r5, r5, r3
 80057ba:	f04f 0900 	mov.w	r9, #0
 80057be:	341a      	adds	r4, #26
 80057c0:	454d      	cmp	r5, r9
 80057c2:	d11a      	bne.n	80057fa <_printf_common+0xd6>
 80057c4:	2000      	movs	r0, #0
 80057c6:	e008      	b.n	80057da <_printf_common+0xb6>
 80057c8:	2301      	movs	r3, #1
 80057ca:	4652      	mov	r2, sl
 80057cc:	4639      	mov	r1, r7
 80057ce:	4630      	mov	r0, r6
 80057d0:	47c0      	blx	r8
 80057d2:	3001      	adds	r0, #1
 80057d4:	d103      	bne.n	80057de <_printf_common+0xba>
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295
 80057da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057de:	3501      	adds	r5, #1
 80057e0:	e7c3      	b.n	800576a <_printf_common+0x46>
 80057e2:	18e1      	adds	r1, r4, r3
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	2030      	movs	r0, #48	; 0x30
 80057e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057ec:	4422      	add	r2, r4
 80057ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057f6:	3302      	adds	r3, #2
 80057f8:	e7c5      	b.n	8005786 <_printf_common+0x62>
 80057fa:	2301      	movs	r3, #1
 80057fc:	4622      	mov	r2, r4
 80057fe:	4639      	mov	r1, r7
 8005800:	4630      	mov	r0, r6
 8005802:	47c0      	blx	r8
 8005804:	3001      	adds	r0, #1
 8005806:	d0e6      	beq.n	80057d6 <_printf_common+0xb2>
 8005808:	f109 0901 	add.w	r9, r9, #1
 800580c:	e7d8      	b.n	80057c0 <_printf_common+0x9c>
	...

08005810 <_printf_i>:
 8005810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005814:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005818:	460c      	mov	r4, r1
 800581a:	7e09      	ldrb	r1, [r1, #24]
 800581c:	b085      	sub	sp, #20
 800581e:	296e      	cmp	r1, #110	; 0x6e
 8005820:	4617      	mov	r7, r2
 8005822:	4606      	mov	r6, r0
 8005824:	4698      	mov	r8, r3
 8005826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005828:	f000 80b3 	beq.w	8005992 <_printf_i+0x182>
 800582c:	d822      	bhi.n	8005874 <_printf_i+0x64>
 800582e:	2963      	cmp	r1, #99	; 0x63
 8005830:	d036      	beq.n	80058a0 <_printf_i+0x90>
 8005832:	d80a      	bhi.n	800584a <_printf_i+0x3a>
 8005834:	2900      	cmp	r1, #0
 8005836:	f000 80b9 	beq.w	80059ac <_printf_i+0x19c>
 800583a:	2958      	cmp	r1, #88	; 0x58
 800583c:	f000 8083 	beq.w	8005946 <_printf_i+0x136>
 8005840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005844:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005848:	e032      	b.n	80058b0 <_printf_i+0xa0>
 800584a:	2964      	cmp	r1, #100	; 0x64
 800584c:	d001      	beq.n	8005852 <_printf_i+0x42>
 800584e:	2969      	cmp	r1, #105	; 0x69
 8005850:	d1f6      	bne.n	8005840 <_printf_i+0x30>
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	6813      	ldr	r3, [r2, #0]
 8005856:	0605      	lsls	r5, r0, #24
 8005858:	f103 0104 	add.w	r1, r3, #4
 800585c:	d52a      	bpl.n	80058b4 <_printf_i+0xa4>
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6011      	str	r1, [r2, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	da03      	bge.n	800586e <_printf_i+0x5e>
 8005866:	222d      	movs	r2, #45	; 0x2d
 8005868:	425b      	negs	r3, r3
 800586a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800586e:	486f      	ldr	r0, [pc, #444]	; (8005a2c <_printf_i+0x21c>)
 8005870:	220a      	movs	r2, #10
 8005872:	e039      	b.n	80058e8 <_printf_i+0xd8>
 8005874:	2973      	cmp	r1, #115	; 0x73
 8005876:	f000 809d 	beq.w	80059b4 <_printf_i+0x1a4>
 800587a:	d808      	bhi.n	800588e <_printf_i+0x7e>
 800587c:	296f      	cmp	r1, #111	; 0x6f
 800587e:	d020      	beq.n	80058c2 <_printf_i+0xb2>
 8005880:	2970      	cmp	r1, #112	; 0x70
 8005882:	d1dd      	bne.n	8005840 <_printf_i+0x30>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	f043 0320 	orr.w	r3, r3, #32
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	e003      	b.n	8005896 <_printf_i+0x86>
 800588e:	2975      	cmp	r1, #117	; 0x75
 8005890:	d017      	beq.n	80058c2 <_printf_i+0xb2>
 8005892:	2978      	cmp	r1, #120	; 0x78
 8005894:	d1d4      	bne.n	8005840 <_printf_i+0x30>
 8005896:	2378      	movs	r3, #120	; 0x78
 8005898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800589c:	4864      	ldr	r0, [pc, #400]	; (8005a30 <_printf_i+0x220>)
 800589e:	e055      	b.n	800594c <_printf_i+0x13c>
 80058a0:	6813      	ldr	r3, [r2, #0]
 80058a2:	1d19      	adds	r1, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6011      	str	r1, [r2, #0]
 80058a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b0:	2301      	movs	r3, #1
 80058b2:	e08c      	b.n	80059ce <_printf_i+0x1be>
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6011      	str	r1, [r2, #0]
 80058b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058bc:	bf18      	it	ne
 80058be:	b21b      	sxthne	r3, r3
 80058c0:	e7cf      	b.n	8005862 <_printf_i+0x52>
 80058c2:	6813      	ldr	r3, [r2, #0]
 80058c4:	6825      	ldr	r5, [r4, #0]
 80058c6:	1d18      	adds	r0, r3, #4
 80058c8:	6010      	str	r0, [r2, #0]
 80058ca:	0628      	lsls	r0, r5, #24
 80058cc:	d501      	bpl.n	80058d2 <_printf_i+0xc2>
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	e002      	b.n	80058d8 <_printf_i+0xc8>
 80058d2:	0668      	lsls	r0, r5, #25
 80058d4:	d5fb      	bpl.n	80058ce <_printf_i+0xbe>
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	4854      	ldr	r0, [pc, #336]	; (8005a2c <_printf_i+0x21c>)
 80058da:	296f      	cmp	r1, #111	; 0x6f
 80058dc:	bf14      	ite	ne
 80058de:	220a      	movne	r2, #10
 80058e0:	2208      	moveq	r2, #8
 80058e2:	2100      	movs	r1, #0
 80058e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058e8:	6865      	ldr	r5, [r4, #4]
 80058ea:	60a5      	str	r5, [r4, #8]
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	f2c0 8095 	blt.w	8005a1c <_printf_i+0x20c>
 80058f2:	6821      	ldr	r1, [r4, #0]
 80058f4:	f021 0104 	bic.w	r1, r1, #4
 80058f8:	6021      	str	r1, [r4, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d13d      	bne.n	800597a <_printf_i+0x16a>
 80058fe:	2d00      	cmp	r5, #0
 8005900:	f040 808e 	bne.w	8005a20 <_printf_i+0x210>
 8005904:	4665      	mov	r5, ip
 8005906:	2a08      	cmp	r2, #8
 8005908:	d10b      	bne.n	8005922 <_printf_i+0x112>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	07db      	lsls	r3, r3, #31
 800590e:	d508      	bpl.n	8005922 <_printf_i+0x112>
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	bfde      	ittt	le
 8005918:	2330      	movle	r3, #48	; 0x30
 800591a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800591e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005922:	ebac 0305 	sub.w	r3, ip, r5
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	f8cd 8000 	str.w	r8, [sp]
 800592c:	463b      	mov	r3, r7
 800592e:	aa03      	add	r2, sp, #12
 8005930:	4621      	mov	r1, r4
 8005932:	4630      	mov	r0, r6
 8005934:	f7ff fef6 	bl	8005724 <_printf_common>
 8005938:	3001      	adds	r0, #1
 800593a:	d14d      	bne.n	80059d8 <_printf_i+0x1c8>
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	b005      	add	sp, #20
 8005942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005946:	4839      	ldr	r0, [pc, #228]	; (8005a2c <_printf_i+0x21c>)
 8005948:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800594c:	6813      	ldr	r3, [r2, #0]
 800594e:	6821      	ldr	r1, [r4, #0]
 8005950:	1d1d      	adds	r5, r3, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6015      	str	r5, [r2, #0]
 8005956:	060a      	lsls	r2, r1, #24
 8005958:	d50b      	bpl.n	8005972 <_printf_i+0x162>
 800595a:	07ca      	lsls	r2, r1, #31
 800595c:	bf44      	itt	mi
 800595e:	f041 0120 	orrmi.w	r1, r1, #32
 8005962:	6021      	strmi	r1, [r4, #0]
 8005964:	b91b      	cbnz	r3, 800596e <_printf_i+0x15e>
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	f022 0220 	bic.w	r2, r2, #32
 800596c:	6022      	str	r2, [r4, #0]
 800596e:	2210      	movs	r2, #16
 8005970:	e7b7      	b.n	80058e2 <_printf_i+0xd2>
 8005972:	064d      	lsls	r5, r1, #25
 8005974:	bf48      	it	mi
 8005976:	b29b      	uxthmi	r3, r3
 8005978:	e7ef      	b.n	800595a <_printf_i+0x14a>
 800597a:	4665      	mov	r5, ip
 800597c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005980:	fb02 3311 	mls	r3, r2, r1, r3
 8005984:	5cc3      	ldrb	r3, [r0, r3]
 8005986:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800598a:	460b      	mov	r3, r1
 800598c:	2900      	cmp	r1, #0
 800598e:	d1f5      	bne.n	800597c <_printf_i+0x16c>
 8005990:	e7b9      	b.n	8005906 <_printf_i+0xf6>
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	6825      	ldr	r5, [r4, #0]
 8005996:	6961      	ldr	r1, [r4, #20]
 8005998:	1d18      	adds	r0, r3, #4
 800599a:	6010      	str	r0, [r2, #0]
 800599c:	0628      	lsls	r0, r5, #24
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	d501      	bpl.n	80059a6 <_printf_i+0x196>
 80059a2:	6019      	str	r1, [r3, #0]
 80059a4:	e002      	b.n	80059ac <_printf_i+0x19c>
 80059a6:	066a      	lsls	r2, r5, #25
 80059a8:	d5fb      	bpl.n	80059a2 <_printf_i+0x192>
 80059aa:	8019      	strh	r1, [r3, #0]
 80059ac:	2300      	movs	r3, #0
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	4665      	mov	r5, ip
 80059b2:	e7b9      	b.n	8005928 <_printf_i+0x118>
 80059b4:	6813      	ldr	r3, [r2, #0]
 80059b6:	1d19      	adds	r1, r3, #4
 80059b8:	6011      	str	r1, [r2, #0]
 80059ba:	681d      	ldr	r5, [r3, #0]
 80059bc:	6862      	ldr	r2, [r4, #4]
 80059be:	2100      	movs	r1, #0
 80059c0:	4628      	mov	r0, r5
 80059c2:	f7fa fc25 	bl	8000210 <memchr>
 80059c6:	b108      	cbz	r0, 80059cc <_printf_i+0x1bc>
 80059c8:	1b40      	subs	r0, r0, r5
 80059ca:	6060      	str	r0, [r4, #4]
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	6123      	str	r3, [r4, #16]
 80059d0:	2300      	movs	r3, #0
 80059d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d6:	e7a7      	b.n	8005928 <_printf_i+0x118>
 80059d8:	6923      	ldr	r3, [r4, #16]
 80059da:	462a      	mov	r2, r5
 80059dc:	4639      	mov	r1, r7
 80059de:	4630      	mov	r0, r6
 80059e0:	47c0      	blx	r8
 80059e2:	3001      	adds	r0, #1
 80059e4:	d0aa      	beq.n	800593c <_printf_i+0x12c>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	079b      	lsls	r3, r3, #30
 80059ea:	d413      	bmi.n	8005a14 <_printf_i+0x204>
 80059ec:	68e0      	ldr	r0, [r4, #12]
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	4298      	cmp	r0, r3
 80059f2:	bfb8      	it	lt
 80059f4:	4618      	movlt	r0, r3
 80059f6:	e7a3      	b.n	8005940 <_printf_i+0x130>
 80059f8:	2301      	movs	r3, #1
 80059fa:	464a      	mov	r2, r9
 80059fc:	4639      	mov	r1, r7
 80059fe:	4630      	mov	r0, r6
 8005a00:	47c0      	blx	r8
 8005a02:	3001      	adds	r0, #1
 8005a04:	d09a      	beq.n	800593c <_printf_i+0x12c>
 8005a06:	3501      	adds	r5, #1
 8005a08:	68e3      	ldr	r3, [r4, #12]
 8005a0a:	9a03      	ldr	r2, [sp, #12]
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	42ab      	cmp	r3, r5
 8005a10:	dcf2      	bgt.n	80059f8 <_printf_i+0x1e8>
 8005a12:	e7eb      	b.n	80059ec <_printf_i+0x1dc>
 8005a14:	2500      	movs	r5, #0
 8005a16:	f104 0919 	add.w	r9, r4, #25
 8005a1a:	e7f5      	b.n	8005a08 <_printf_i+0x1f8>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ac      	bne.n	800597a <_printf_i+0x16a>
 8005a20:	7803      	ldrb	r3, [r0, #0]
 8005a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a2a:	e76c      	b.n	8005906 <_printf_i+0xf6>
 8005a2c:	0801c5d1 	.word	0x0801c5d1
 8005a30:	0801c5e2 	.word	0x0801c5e2

08005a34 <_sbrk_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4c06      	ldr	r4, [pc, #24]	; (8005a50 <_sbrk_r+0x1c>)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	6023      	str	r3, [r4, #0]
 8005a40:	f7fc f902 	bl	8001c48 <_sbrk>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_sbrk_r+0x1a>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_sbrk_r+0x1a>
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	20006ad4 	.word	0x20006ad4

08005a54 <__sread>:
 8005a54:	b510      	push	{r4, lr}
 8005a56:	460c      	mov	r4, r1
 8005a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5c:	f000 fa96 	bl	8005f8c <_read_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	bfab      	itete	ge
 8005a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a66:	89a3      	ldrhlt	r3, [r4, #12]
 8005a68:	181b      	addge	r3, r3, r0
 8005a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a6e:	bfac      	ite	ge
 8005a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a72:	81a3      	strhlt	r3, [r4, #12]
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <__swrite>:
 8005a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7a:	461f      	mov	r7, r3
 8005a7c:	898b      	ldrh	r3, [r1, #12]
 8005a7e:	05db      	lsls	r3, r3, #23
 8005a80:	4605      	mov	r5, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	4616      	mov	r6, r2
 8005a86:	d505      	bpl.n	8005a94 <__swrite+0x1e>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	f000 f9b6 	bl	8005e00 <_lseek_r>
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	4632      	mov	r2, r6
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aaa:	f000 b869 	b.w	8005b80 <_write_r>

08005aae <__sseek>:
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab6:	f000 f9a3 	bl	8005e00 <_lseek_r>
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	bf15      	itete	ne
 8005ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aca:	81a3      	strheq	r3, [r4, #12]
 8005acc:	bf18      	it	ne
 8005ace:	81a3      	strhne	r3, [r4, #12]
 8005ad0:	bd10      	pop	{r4, pc}

08005ad2 <__sclose>:
 8005ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad6:	f000 b8d3 	b.w	8005c80 <_close_r>
	...

08005adc <__swbuf_r>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	460e      	mov	r6, r1
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	b118      	cbz	r0, 8005aee <__swbuf_r+0x12>
 8005ae6:	6983      	ldr	r3, [r0, #24]
 8005ae8:	b90b      	cbnz	r3, 8005aee <__swbuf_r+0x12>
 8005aea:	f7ff fbf7 	bl	80052dc <__sinit>
 8005aee:	4b21      	ldr	r3, [pc, #132]	; (8005b74 <__swbuf_r+0x98>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d12a      	bne.n	8005b4a <__swbuf_r+0x6e>
 8005af4:	686c      	ldr	r4, [r5, #4]
 8005af6:	69a3      	ldr	r3, [r4, #24]
 8005af8:	60a3      	str	r3, [r4, #8]
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	071a      	lsls	r2, r3, #28
 8005afe:	d52e      	bpl.n	8005b5e <__swbuf_r+0x82>
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	b363      	cbz	r3, 8005b5e <__swbuf_r+0x82>
 8005b04:	6923      	ldr	r3, [r4, #16]
 8005b06:	6820      	ldr	r0, [r4, #0]
 8005b08:	1ac0      	subs	r0, r0, r3
 8005b0a:	6963      	ldr	r3, [r4, #20]
 8005b0c:	b2f6      	uxtb	r6, r6
 8005b0e:	4283      	cmp	r3, r0
 8005b10:	4637      	mov	r7, r6
 8005b12:	dc04      	bgt.n	8005b1e <__swbuf_r+0x42>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f948 	bl	8005dac <_fflush_r>
 8005b1c:	bb28      	cbnz	r0, 8005b6a <__swbuf_r+0x8e>
 8005b1e:	68a3      	ldr	r3, [r4, #8]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	60a3      	str	r3, [r4, #8]
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	6022      	str	r2, [r4, #0]
 8005b2a:	701e      	strb	r6, [r3, #0]
 8005b2c:	6963      	ldr	r3, [r4, #20]
 8005b2e:	3001      	adds	r0, #1
 8005b30:	4283      	cmp	r3, r0
 8005b32:	d004      	beq.n	8005b3e <__swbuf_r+0x62>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	07db      	lsls	r3, r3, #31
 8005b38:	d519      	bpl.n	8005b6e <__swbuf_r+0x92>
 8005b3a:	2e0a      	cmp	r6, #10
 8005b3c:	d117      	bne.n	8005b6e <__swbuf_r+0x92>
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	f000 f933 	bl	8005dac <_fflush_r>
 8005b46:	b190      	cbz	r0, 8005b6e <__swbuf_r+0x92>
 8005b48:	e00f      	b.n	8005b6a <__swbuf_r+0x8e>
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <__swbuf_r+0x9c>)
 8005b4c:	429c      	cmp	r4, r3
 8005b4e:	d101      	bne.n	8005b54 <__swbuf_r+0x78>
 8005b50:	68ac      	ldr	r4, [r5, #8]
 8005b52:	e7d0      	b.n	8005af6 <__swbuf_r+0x1a>
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <__swbuf_r+0xa0>)
 8005b56:	429c      	cmp	r4, r3
 8005b58:	bf08      	it	eq
 8005b5a:	68ec      	ldreq	r4, [r5, #12]
 8005b5c:	e7cb      	b.n	8005af6 <__swbuf_r+0x1a>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	f000 f81f 	bl	8005ba4 <__swsetup_r>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d0cc      	beq.n	8005b04 <__swbuf_r+0x28>
 8005b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8005b6e:	4638      	mov	r0, r7
 8005b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b72:	bf00      	nop
 8005b74:	0801c580 	.word	0x0801c580
 8005b78:	0801c5a0 	.word	0x0801c5a0
 8005b7c:	0801c560 	.word	0x0801c560

08005b80 <_write_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4c07      	ldr	r4, [pc, #28]	; (8005ba0 <_write_r+0x20>)
 8005b84:	4605      	mov	r5, r0
 8005b86:	4608      	mov	r0, r1
 8005b88:	4611      	mov	r1, r2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f7fb fd08 	bl	80015a4 <_write>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_write_r+0x1e>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_write_r+0x1e>
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	20006ad4 	.word	0x20006ad4

08005ba4 <__swsetup_r>:
 8005ba4:	4b32      	ldr	r3, [pc, #200]	; (8005c70 <__swsetup_r+0xcc>)
 8005ba6:	b570      	push	{r4, r5, r6, lr}
 8005ba8:	681d      	ldr	r5, [r3, #0]
 8005baa:	4606      	mov	r6, r0
 8005bac:	460c      	mov	r4, r1
 8005bae:	b125      	cbz	r5, 8005bba <__swsetup_r+0x16>
 8005bb0:	69ab      	ldr	r3, [r5, #24]
 8005bb2:	b913      	cbnz	r3, 8005bba <__swsetup_r+0x16>
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f7ff fb91 	bl	80052dc <__sinit>
 8005bba:	4b2e      	ldr	r3, [pc, #184]	; (8005c74 <__swsetup_r+0xd0>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	d10f      	bne.n	8005be0 <__swsetup_r+0x3c>
 8005bc0:	686c      	ldr	r4, [r5, #4]
 8005bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	0715      	lsls	r5, r2, #28
 8005bca:	d42c      	bmi.n	8005c26 <__swsetup_r+0x82>
 8005bcc:	06d0      	lsls	r0, r2, #27
 8005bce:	d411      	bmi.n	8005bf4 <__swsetup_r+0x50>
 8005bd0:	2209      	movs	r2, #9
 8005bd2:	6032      	str	r2, [r6, #0]
 8005bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295
 8005bde:	e03e      	b.n	8005c5e <__swsetup_r+0xba>
 8005be0:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <__swsetup_r+0xd4>)
 8005be2:	429c      	cmp	r4, r3
 8005be4:	d101      	bne.n	8005bea <__swsetup_r+0x46>
 8005be6:	68ac      	ldr	r4, [r5, #8]
 8005be8:	e7eb      	b.n	8005bc2 <__swsetup_r+0x1e>
 8005bea:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <__swsetup_r+0xd8>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	bf08      	it	eq
 8005bf0:	68ec      	ldreq	r4, [r5, #12]
 8005bf2:	e7e6      	b.n	8005bc2 <__swsetup_r+0x1e>
 8005bf4:	0751      	lsls	r1, r2, #29
 8005bf6:	d512      	bpl.n	8005c1e <__swsetup_r+0x7a>
 8005bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bfa:	b141      	cbz	r1, 8005c0e <__swsetup_r+0x6a>
 8005bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c00:	4299      	cmp	r1, r3
 8005c02:	d002      	beq.n	8005c0a <__swsetup_r+0x66>
 8005c04:	4630      	mov	r0, r6
 8005c06:	f000 f973 	bl	8005ef0 <_free_r>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c14:	81a3      	strh	r3, [r4, #12]
 8005c16:	2300      	movs	r3, #0
 8005c18:	6063      	str	r3, [r4, #4]
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f043 0308 	orr.w	r3, r3, #8
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	b94b      	cbnz	r3, 8005c3e <__swsetup_r+0x9a>
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c34:	d003      	beq.n	8005c3e <__swsetup_r+0x9a>
 8005c36:	4621      	mov	r1, r4
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 f917 	bl	8005e6c <__smakebuf_r>
 8005c3e:	89a2      	ldrh	r2, [r4, #12]
 8005c40:	f012 0301 	ands.w	r3, r2, #1
 8005c44:	d00c      	beq.n	8005c60 <__swsetup_r+0xbc>
 8005c46:	2300      	movs	r3, #0
 8005c48:	60a3      	str	r3, [r4, #8]
 8005c4a:	6963      	ldr	r3, [r4, #20]
 8005c4c:	425b      	negs	r3, r3
 8005c4e:	61a3      	str	r3, [r4, #24]
 8005c50:	6923      	ldr	r3, [r4, #16]
 8005c52:	b953      	cbnz	r3, 8005c6a <__swsetup_r+0xc6>
 8005c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c5c:	d1ba      	bne.n	8005bd4 <__swsetup_r+0x30>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	0792      	lsls	r2, r2, #30
 8005c62:	bf58      	it	pl
 8005c64:	6963      	ldrpl	r3, [r4, #20]
 8005c66:	60a3      	str	r3, [r4, #8]
 8005c68:	e7f2      	b.n	8005c50 <__swsetup_r+0xac>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e7f7      	b.n	8005c5e <__swsetup_r+0xba>
 8005c6e:	bf00      	nop
 8005c70:	2000000c 	.word	0x2000000c
 8005c74:	0801c580 	.word	0x0801c580
 8005c78:	0801c5a0 	.word	0x0801c5a0
 8005c7c:	0801c560 	.word	0x0801c560

08005c80 <_close_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4c06      	ldr	r4, [pc, #24]	; (8005c9c <_close_r+0x1c>)
 8005c84:	2300      	movs	r3, #0
 8005c86:	4605      	mov	r5, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	6023      	str	r3, [r4, #0]
 8005c8c:	f7fb ffa7 	bl	8001bde <_close>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d102      	bne.n	8005c9a <_close_r+0x1a>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	b103      	cbz	r3, 8005c9a <_close_r+0x1a>
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	20006ad4 	.word	0x20006ad4

08005ca0 <__sflush_r>:
 8005ca0:	898a      	ldrh	r2, [r1, #12]
 8005ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	0710      	lsls	r0, r2, #28
 8005caa:	460c      	mov	r4, r1
 8005cac:	d458      	bmi.n	8005d60 <__sflush_r+0xc0>
 8005cae:	684b      	ldr	r3, [r1, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	dc05      	bgt.n	8005cc0 <__sflush_r+0x20>
 8005cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dc02      	bgt.n	8005cc0 <__sflush_r+0x20>
 8005cba:	2000      	movs	r0, #0
 8005cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cc2:	2e00      	cmp	r6, #0
 8005cc4:	d0f9      	beq.n	8005cba <__sflush_r+0x1a>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ccc:	682f      	ldr	r7, [r5, #0]
 8005cce:	6a21      	ldr	r1, [r4, #32]
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	d032      	beq.n	8005d3a <__sflush_r+0x9a>
 8005cd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	075a      	lsls	r2, r3, #29
 8005cda:	d505      	bpl.n	8005ce8 <__sflush_r+0x48>
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	1ac0      	subs	r0, r0, r3
 8005ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ce2:	b10b      	cbz	r3, 8005ce8 <__sflush_r+0x48>
 8005ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ce6:	1ac0      	subs	r0, r0, r3
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4602      	mov	r2, r0
 8005cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cee:	6a21      	ldr	r1, [r4, #32]
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b0      	blx	r6
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	d106      	bne.n	8005d08 <__sflush_r+0x68>
 8005cfa:	6829      	ldr	r1, [r5, #0]
 8005cfc:	291d      	cmp	r1, #29
 8005cfe:	d848      	bhi.n	8005d92 <__sflush_r+0xf2>
 8005d00:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <__sflush_r+0x108>)
 8005d02:	40ca      	lsrs	r2, r1
 8005d04:	07d6      	lsls	r6, r2, #31
 8005d06:	d544      	bpl.n	8005d92 <__sflush_r+0xf2>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	6062      	str	r2, [r4, #4]
 8005d0c:	04d9      	lsls	r1, r3, #19
 8005d0e:	6922      	ldr	r2, [r4, #16]
 8005d10:	6022      	str	r2, [r4, #0]
 8005d12:	d504      	bpl.n	8005d1e <__sflush_r+0x7e>
 8005d14:	1c42      	adds	r2, r0, #1
 8005d16:	d101      	bne.n	8005d1c <__sflush_r+0x7c>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b903      	cbnz	r3, 8005d1e <__sflush_r+0x7e>
 8005d1c:	6560      	str	r0, [r4, #84]	; 0x54
 8005d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d20:	602f      	str	r7, [r5, #0]
 8005d22:	2900      	cmp	r1, #0
 8005d24:	d0c9      	beq.n	8005cba <__sflush_r+0x1a>
 8005d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	d002      	beq.n	8005d34 <__sflush_r+0x94>
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f8de 	bl	8005ef0 <_free_r>
 8005d34:	2000      	movs	r0, #0
 8005d36:	6360      	str	r0, [r4, #52]	; 0x34
 8005d38:	e7c0      	b.n	8005cbc <__sflush_r+0x1c>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b0      	blx	r6
 8005d40:	1c41      	adds	r1, r0, #1
 8005d42:	d1c8      	bne.n	8005cd6 <__sflush_r+0x36>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0c5      	beq.n	8005cd6 <__sflush_r+0x36>
 8005d4a:	2b1d      	cmp	r3, #29
 8005d4c:	d001      	beq.n	8005d52 <__sflush_r+0xb2>
 8005d4e:	2b16      	cmp	r3, #22
 8005d50:	d101      	bne.n	8005d56 <__sflush_r+0xb6>
 8005d52:	602f      	str	r7, [r5, #0]
 8005d54:	e7b1      	b.n	8005cba <__sflush_r+0x1a>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5c:	81a3      	strh	r3, [r4, #12]
 8005d5e:	e7ad      	b.n	8005cbc <__sflush_r+0x1c>
 8005d60:	690f      	ldr	r7, [r1, #16]
 8005d62:	2f00      	cmp	r7, #0
 8005d64:	d0a9      	beq.n	8005cba <__sflush_r+0x1a>
 8005d66:	0793      	lsls	r3, r2, #30
 8005d68:	680e      	ldr	r6, [r1, #0]
 8005d6a:	bf08      	it	eq
 8005d6c:	694b      	ldreq	r3, [r1, #20]
 8005d6e:	600f      	str	r7, [r1, #0]
 8005d70:	bf18      	it	ne
 8005d72:	2300      	movne	r3, #0
 8005d74:	eba6 0807 	sub.w	r8, r6, r7
 8005d78:	608b      	str	r3, [r1, #8]
 8005d7a:	f1b8 0f00 	cmp.w	r8, #0
 8005d7e:	dd9c      	ble.n	8005cba <__sflush_r+0x1a>
 8005d80:	4643      	mov	r3, r8
 8005d82:	463a      	mov	r2, r7
 8005d84:	6a21      	ldr	r1, [r4, #32]
 8005d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b0      	blx	r6
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	dc06      	bgt.n	8005d9e <__sflush_r+0xfe>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9c:	e78e      	b.n	8005cbc <__sflush_r+0x1c>
 8005d9e:	4407      	add	r7, r0
 8005da0:	eba8 0800 	sub.w	r8, r8, r0
 8005da4:	e7e9      	b.n	8005d7a <__sflush_r+0xda>
 8005da6:	bf00      	nop
 8005da8:	20400001 	.word	0x20400001

08005dac <_fflush_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b1db      	cbz	r3, 8005dee <_fflush_r+0x42>
 8005db6:	b118      	cbz	r0, 8005dc0 <_fflush_r+0x14>
 8005db8:	6983      	ldr	r3, [r0, #24]
 8005dba:	b90b      	cbnz	r3, 8005dc0 <_fflush_r+0x14>
 8005dbc:	f7ff fa8e 	bl	80052dc <__sinit>
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <_fflush_r+0x48>)
 8005dc2:	429c      	cmp	r4, r3
 8005dc4:	d109      	bne.n	8005dda <_fflush_r+0x2e>
 8005dc6:	686c      	ldr	r4, [r5, #4]
 8005dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dcc:	b17b      	cbz	r3, 8005dee <_fflush_r+0x42>
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd6:	f7ff bf63 	b.w	8005ca0 <__sflush_r>
 8005dda:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <_fflush_r+0x4c>)
 8005ddc:	429c      	cmp	r4, r3
 8005dde:	d101      	bne.n	8005de4 <_fflush_r+0x38>
 8005de0:	68ac      	ldr	r4, [r5, #8]
 8005de2:	e7f1      	b.n	8005dc8 <_fflush_r+0x1c>
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <_fflush_r+0x50>)
 8005de6:	429c      	cmp	r4, r3
 8005de8:	bf08      	it	eq
 8005dea:	68ec      	ldreq	r4, [r5, #12]
 8005dec:	e7ec      	b.n	8005dc8 <_fflush_r+0x1c>
 8005dee:	2000      	movs	r0, #0
 8005df0:	bd38      	pop	{r3, r4, r5, pc}
 8005df2:	bf00      	nop
 8005df4:	0801c580 	.word	0x0801c580
 8005df8:	0801c5a0 	.word	0x0801c5a0
 8005dfc:	0801c560 	.word	0x0801c560

08005e00 <_lseek_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4c07      	ldr	r4, [pc, #28]	; (8005e20 <_lseek_r+0x20>)
 8005e04:	4605      	mov	r5, r0
 8005e06:	4608      	mov	r0, r1
 8005e08:	4611      	mov	r1, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f7fb ff0c 	bl	8001c2c <_lseek>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_lseek_r+0x1e>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_lseek_r+0x1e>
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20006ad4 	.word	0x20006ad4

08005e24 <__swhatbuf_r>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	460e      	mov	r6, r1
 8005e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	b096      	sub	sp, #88	; 0x58
 8005e30:	4614      	mov	r4, r2
 8005e32:	461d      	mov	r5, r3
 8005e34:	da07      	bge.n	8005e46 <__swhatbuf_r+0x22>
 8005e36:	2300      	movs	r3, #0
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	89b3      	ldrh	r3, [r6, #12]
 8005e3c:	061a      	lsls	r2, r3, #24
 8005e3e:	d410      	bmi.n	8005e62 <__swhatbuf_r+0x3e>
 8005e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e44:	e00e      	b.n	8005e64 <__swhatbuf_r+0x40>
 8005e46:	466a      	mov	r2, sp
 8005e48:	f000 f8b2 	bl	8005fb0 <_fstat_r>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	dbf2      	blt.n	8005e36 <__swhatbuf_r+0x12>
 8005e50:	9a01      	ldr	r2, [sp, #4]
 8005e52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e5a:	425a      	negs	r2, r3
 8005e5c:	415a      	adcs	r2, r3
 8005e5e:	602a      	str	r2, [r5, #0]
 8005e60:	e7ee      	b.n	8005e40 <__swhatbuf_r+0x1c>
 8005e62:	2340      	movs	r3, #64	; 0x40
 8005e64:	2000      	movs	r0, #0
 8005e66:	6023      	str	r3, [r4, #0]
 8005e68:	b016      	add	sp, #88	; 0x58
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}

08005e6c <__smakebuf_r>:
 8005e6c:	898b      	ldrh	r3, [r1, #12]
 8005e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e70:	079d      	lsls	r5, r3, #30
 8005e72:	4606      	mov	r6, r0
 8005e74:	460c      	mov	r4, r1
 8005e76:	d507      	bpl.n	8005e88 <__smakebuf_r+0x1c>
 8005e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	6123      	str	r3, [r4, #16]
 8005e80:	2301      	movs	r3, #1
 8005e82:	6163      	str	r3, [r4, #20]
 8005e84:	b002      	add	sp, #8
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	ab01      	add	r3, sp, #4
 8005e8a:	466a      	mov	r2, sp
 8005e8c:	f7ff ffca 	bl	8005e24 <__swhatbuf_r>
 8005e90:	9900      	ldr	r1, [sp, #0]
 8005e92:	4605      	mov	r5, r0
 8005e94:	4630      	mov	r0, r6
 8005e96:	f7ff faab 	bl	80053f0 <_malloc_r>
 8005e9a:	b948      	cbnz	r0, 8005eb0 <__smakebuf_r+0x44>
 8005e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea0:	059a      	lsls	r2, r3, #22
 8005ea2:	d4ef      	bmi.n	8005e84 <__smakebuf_r+0x18>
 8005ea4:	f023 0303 	bic.w	r3, r3, #3
 8005ea8:	f043 0302 	orr.w	r3, r3, #2
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	e7e3      	b.n	8005e78 <__smakebuf_r+0xc>
 8005eb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <__smakebuf_r+0x7c>)
 8005eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	6020      	str	r0, [r4, #0]
 8005eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebc:	81a3      	strh	r3, [r4, #12]
 8005ebe:	9b00      	ldr	r3, [sp, #0]
 8005ec0:	6163      	str	r3, [r4, #20]
 8005ec2:	9b01      	ldr	r3, [sp, #4]
 8005ec4:	6120      	str	r0, [r4, #16]
 8005ec6:	b15b      	cbz	r3, 8005ee0 <__smakebuf_r+0x74>
 8005ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f881 	bl	8005fd4 <_isatty_r>
 8005ed2:	b128      	cbz	r0, 8005ee0 <__smakebuf_r+0x74>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	f023 0303 	bic.w	r3, r3, #3
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	81a3      	strh	r3, [r4, #12]
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	431d      	orrs	r5, r3
 8005ee4:	81a5      	strh	r5, [r4, #12]
 8005ee6:	e7cd      	b.n	8005e84 <__smakebuf_r+0x18>
 8005ee8:	080052a5 	.word	0x080052a5

08005eec <__malloc_lock>:
 8005eec:	4770      	bx	lr

08005eee <__malloc_unlock>:
 8005eee:	4770      	bx	lr

08005ef0 <_free_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d045      	beq.n	8005f84 <_free_r+0x94>
 8005ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005efc:	1f0c      	subs	r4, r1, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfb8      	it	lt
 8005f02:	18e4      	addlt	r4, r4, r3
 8005f04:	f7ff fff2 	bl	8005eec <__malloc_lock>
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <_free_r+0x98>)
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	b933      	cbnz	r3, 8005f1e <_free_r+0x2e>
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	6014      	str	r4, [r2, #0]
 8005f14:	4628      	mov	r0, r5
 8005f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f1a:	f7ff bfe8 	b.w	8005eee <__malloc_unlock>
 8005f1e:	42a3      	cmp	r3, r4
 8005f20:	d90c      	bls.n	8005f3c <_free_r+0x4c>
 8005f22:	6821      	ldr	r1, [r4, #0]
 8005f24:	1862      	adds	r2, r4, r1
 8005f26:	4293      	cmp	r3, r2
 8005f28:	bf04      	itt	eq
 8005f2a:	681a      	ldreq	r2, [r3, #0]
 8005f2c:	685b      	ldreq	r3, [r3, #4]
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	bf04      	itt	eq
 8005f32:	1852      	addeq	r2, r2, r1
 8005f34:	6022      	streq	r2, [r4, #0]
 8005f36:	6004      	str	r4, [r0, #0]
 8005f38:	e7ec      	b.n	8005f14 <_free_r+0x24>
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	b10a      	cbz	r2, 8005f44 <_free_r+0x54>
 8005f40:	42a2      	cmp	r2, r4
 8005f42:	d9fa      	bls.n	8005f3a <_free_r+0x4a>
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	1858      	adds	r0, r3, r1
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	d10b      	bne.n	8005f64 <_free_r+0x74>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	4401      	add	r1, r0
 8005f50:	1858      	adds	r0, r3, r1
 8005f52:	4282      	cmp	r2, r0
 8005f54:	6019      	str	r1, [r3, #0]
 8005f56:	d1dd      	bne.n	8005f14 <_free_r+0x24>
 8005f58:	6810      	ldr	r0, [r2, #0]
 8005f5a:	6852      	ldr	r2, [r2, #4]
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	4401      	add	r1, r0
 8005f60:	6019      	str	r1, [r3, #0]
 8005f62:	e7d7      	b.n	8005f14 <_free_r+0x24>
 8005f64:	d902      	bls.n	8005f6c <_free_r+0x7c>
 8005f66:	230c      	movs	r3, #12
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	e7d3      	b.n	8005f14 <_free_r+0x24>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	1821      	adds	r1, r4, r0
 8005f70:	428a      	cmp	r2, r1
 8005f72:	bf04      	itt	eq
 8005f74:	6811      	ldreq	r1, [r2, #0]
 8005f76:	6852      	ldreq	r2, [r2, #4]
 8005f78:	6062      	str	r2, [r4, #4]
 8005f7a:	bf04      	itt	eq
 8005f7c:	1809      	addeq	r1, r1, r0
 8005f7e:	6021      	streq	r1, [r4, #0]
 8005f80:	605c      	str	r4, [r3, #4]
 8005f82:	e7c7      	b.n	8005f14 <_free_r+0x24>
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
 8005f86:	bf00      	nop
 8005f88:	20000094 	.word	0x20000094

08005f8c <_read_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4c07      	ldr	r4, [pc, #28]	; (8005fac <_read_r+0x20>)
 8005f90:	4605      	mov	r5, r0
 8005f92:	4608      	mov	r0, r1
 8005f94:	4611      	mov	r1, r2
 8005f96:	2200      	movs	r2, #0
 8005f98:	6022      	str	r2, [r4, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f7fb fe02 	bl	8001ba4 <_read>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_read_r+0x1e>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_read_r+0x1e>
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20006ad4 	.word	0x20006ad4

08005fb0 <_fstat_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4c07      	ldr	r4, [pc, #28]	; (8005fd0 <_fstat_r+0x20>)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	4611      	mov	r1, r2
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	f7fb fe1a 	bl	8001bf6 <_fstat>
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	d102      	bne.n	8005fcc <_fstat_r+0x1c>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	b103      	cbz	r3, 8005fcc <_fstat_r+0x1c>
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	bd38      	pop	{r3, r4, r5, pc}
 8005fce:	bf00      	nop
 8005fd0:	20006ad4 	.word	0x20006ad4

08005fd4 <_isatty_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4c06      	ldr	r4, [pc, #24]	; (8005ff0 <_isatty_r+0x1c>)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4605      	mov	r5, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	f7fb fe19 	bl	8001c16 <_isatty>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_isatty_r+0x1a>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_isatty_r+0x1a>
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	20006ad4 	.word	0x20006ad4
 8005ff4:	00000000 	.word	0x00000000

08005ff8 <sin>:
 8005ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ffa:	ec51 0b10 	vmov	r0, r1, d0
 8005ffe:	4a20      	ldr	r2, [pc, #128]	; (8006080 <sin+0x88>)
 8006000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006004:	4293      	cmp	r3, r2
 8006006:	dc07      	bgt.n	8006018 <sin+0x20>
 8006008:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006078 <sin+0x80>
 800600c:	2000      	movs	r0, #0
 800600e:	f000 fe37 	bl	8006c80 <__kernel_sin>
 8006012:	ec51 0b10 	vmov	r0, r1, d0
 8006016:	e007      	b.n	8006028 <sin+0x30>
 8006018:	4a1a      	ldr	r2, [pc, #104]	; (8006084 <sin+0x8c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	dd09      	ble.n	8006032 <sin+0x3a>
 800601e:	ee10 2a10 	vmov	r2, s0
 8006022:	460b      	mov	r3, r1
 8006024:	f7fa f948 	bl	80002b8 <__aeabi_dsub>
 8006028:	ec41 0b10 	vmov	d0, r0, r1
 800602c:	b005      	add	sp, #20
 800602e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006032:	4668      	mov	r0, sp
 8006034:	f000 f828 	bl	8006088 <__ieee754_rem_pio2>
 8006038:	f000 0003 	and.w	r0, r0, #3
 800603c:	2801      	cmp	r0, #1
 800603e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006042:	ed9d 0b00 	vldr	d0, [sp]
 8006046:	d004      	beq.n	8006052 <sin+0x5a>
 8006048:	2802      	cmp	r0, #2
 800604a:	d005      	beq.n	8006058 <sin+0x60>
 800604c:	b970      	cbnz	r0, 800606c <sin+0x74>
 800604e:	2001      	movs	r0, #1
 8006050:	e7dd      	b.n	800600e <sin+0x16>
 8006052:	f000 fa0d 	bl	8006470 <__kernel_cos>
 8006056:	e7dc      	b.n	8006012 <sin+0x1a>
 8006058:	2001      	movs	r0, #1
 800605a:	f000 fe11 	bl	8006c80 <__kernel_sin>
 800605e:	ec53 2b10 	vmov	r2, r3, d0
 8006062:	ee10 0a10 	vmov	r0, s0
 8006066:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800606a:	e7dd      	b.n	8006028 <sin+0x30>
 800606c:	f000 fa00 	bl	8006470 <__kernel_cos>
 8006070:	e7f5      	b.n	800605e <sin+0x66>
 8006072:	bf00      	nop
 8006074:	f3af 8000 	nop.w
	...
 8006080:	3fe921fb 	.word	0x3fe921fb
 8006084:	7fefffff 	.word	0x7fefffff

08006088 <__ieee754_rem_pio2>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	ec57 6b10 	vmov	r6, r7, d0
 8006090:	4bc3      	ldr	r3, [pc, #780]	; (80063a0 <__ieee754_rem_pio2+0x318>)
 8006092:	b08d      	sub	sp, #52	; 0x34
 8006094:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006098:	4598      	cmp	r8, r3
 800609a:	4604      	mov	r4, r0
 800609c:	9704      	str	r7, [sp, #16]
 800609e:	dc07      	bgt.n	80060b0 <__ieee754_rem_pio2+0x28>
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	ed84 0b00 	vstr	d0, [r4]
 80060a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80060ac:	2500      	movs	r5, #0
 80060ae:	e027      	b.n	8006100 <__ieee754_rem_pio2+0x78>
 80060b0:	4bbc      	ldr	r3, [pc, #752]	; (80063a4 <__ieee754_rem_pio2+0x31c>)
 80060b2:	4598      	cmp	r8, r3
 80060b4:	dc75      	bgt.n	80061a2 <__ieee754_rem_pio2+0x11a>
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	4dbb      	ldr	r5, [pc, #748]	; (80063a8 <__ieee754_rem_pio2+0x320>)
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	ee10 0a10 	vmov	r0, s0
 80060c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8006368 <__ieee754_rem_pio2+0x2e0>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	4639      	mov	r1, r7
 80060c8:	dd36      	ble.n	8006138 <__ieee754_rem_pio2+0xb0>
 80060ca:	f7fa f8f5 	bl	80002b8 <__aeabi_dsub>
 80060ce:	45a8      	cmp	r8, r5
 80060d0:	4606      	mov	r6, r0
 80060d2:	460f      	mov	r7, r1
 80060d4:	d018      	beq.n	8006108 <__ieee754_rem_pio2+0x80>
 80060d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f7fa f8ec 	bl	80002b8 <__aeabi_dsub>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	e9c4 2300 	strd	r2, r3, [r4]
 80060e8:	4630      	mov	r0, r6
 80060ea:	4639      	mov	r1, r7
 80060ec:	f7fa f8e4 	bl	80002b8 <__aeabi_dsub>
 80060f0:	a39f      	add	r3, pc, #636	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa f8df 	bl	80002b8 <__aeabi_dsub>
 80060fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060fe:	2501      	movs	r5, #1
 8006100:	4628      	mov	r0, r5
 8006102:	b00d      	add	sp, #52	; 0x34
 8006104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006108:	a39b      	add	r3, pc, #620	; (adr r3, 8006378 <__ieee754_rem_pio2+0x2f0>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fa f8d3 	bl	80002b8 <__aeabi_dsub>
 8006112:	a39b      	add	r3, pc, #620	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	4606      	mov	r6, r0
 800611a:	460f      	mov	r7, r1
 800611c:	f7fa f8cc 	bl	80002b8 <__aeabi_dsub>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	e9c4 2300 	strd	r2, r3, [r4]
 8006128:	4630      	mov	r0, r6
 800612a:	4639      	mov	r1, r7
 800612c:	f7fa f8c4 	bl	80002b8 <__aeabi_dsub>
 8006130:	a393      	add	r3, pc, #588	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	e7de      	b.n	80060f6 <__ieee754_rem_pio2+0x6e>
 8006138:	f7fa f8c0 	bl	80002bc <__adddf3>
 800613c:	45a8      	cmp	r8, r5
 800613e:	4606      	mov	r6, r0
 8006140:	460f      	mov	r7, r1
 8006142:	d016      	beq.n	8006172 <__ieee754_rem_pio2+0xea>
 8006144:	a38a      	add	r3, pc, #552	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f7fa f8b7 	bl	80002bc <__adddf3>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	e9c4 2300 	strd	r2, r3, [r4]
 8006156:	4630      	mov	r0, r6
 8006158:	4639      	mov	r1, r7
 800615a:	f7fa f8ad 	bl	80002b8 <__aeabi_dsub>
 800615e:	a384      	add	r3, pc, #528	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa f8aa 	bl	80002bc <__adddf3>
 8006168:	f04f 35ff 	mov.w	r5, #4294967295
 800616c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006170:	e7c6      	b.n	8006100 <__ieee754_rem_pio2+0x78>
 8006172:	a381      	add	r3, pc, #516	; (adr r3, 8006378 <__ieee754_rem_pio2+0x2f0>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	f7fa f8a0 	bl	80002bc <__adddf3>
 800617c:	a380      	add	r3, pc, #512	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	4606      	mov	r6, r0
 8006184:	460f      	mov	r7, r1
 8006186:	f7fa f899 	bl	80002bc <__adddf3>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	e9c4 2300 	strd	r2, r3, [r4]
 8006192:	4630      	mov	r0, r6
 8006194:	4639      	mov	r1, r7
 8006196:	f7fa f88f 	bl	80002b8 <__aeabi_dsub>
 800619a:	a379      	add	r3, pc, #484	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	e7e0      	b.n	8006164 <__ieee754_rem_pio2+0xdc>
 80061a2:	4b82      	ldr	r3, [pc, #520]	; (80063ac <__ieee754_rem_pio2+0x324>)
 80061a4:	4598      	cmp	r8, r3
 80061a6:	f300 80d0 	bgt.w	800634a <__ieee754_rem_pio2+0x2c2>
 80061aa:	f000 fe23 	bl	8006df4 <fabs>
 80061ae:	ec57 6b10 	vmov	r6, r7, d0
 80061b2:	ee10 0a10 	vmov	r0, s0
 80061b6:	a374      	add	r3, pc, #464	; (adr r3, 8006388 <__ieee754_rem_pio2+0x300>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	4639      	mov	r1, r7
 80061be:	f7fa fa33 	bl	8000628 <__aeabi_dmul>
 80061c2:	2200      	movs	r2, #0
 80061c4:	4b7a      	ldr	r3, [pc, #488]	; (80063b0 <__ieee754_rem_pio2+0x328>)
 80061c6:	f7fa f879 	bl	80002bc <__adddf3>
 80061ca:	f7fa fcc7 	bl	8000b5c <__aeabi_d2iz>
 80061ce:	4605      	mov	r5, r0
 80061d0:	f7fa f9c0 	bl	8000554 <__aeabi_i2d>
 80061d4:	a364      	add	r3, pc, #400	; (adr r3, 8006368 <__ieee754_rem_pio2+0x2e0>)
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061de:	f7fa fa23 	bl	8000628 <__aeabi_dmul>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4630      	mov	r0, r6
 80061e8:	4639      	mov	r1, r7
 80061ea:	f7fa f865 	bl	80002b8 <__aeabi_dsub>
 80061ee:	a360      	add	r3, pc, #384	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fc:	f7fa fa14 	bl	8000628 <__aeabi_dmul>
 8006200:	2d1f      	cmp	r5, #31
 8006202:	4606      	mov	r6, r0
 8006204:	460f      	mov	r7, r1
 8006206:	dc0c      	bgt.n	8006222 <__ieee754_rem_pio2+0x19a>
 8006208:	1e6a      	subs	r2, r5, #1
 800620a:	4b6a      	ldr	r3, [pc, #424]	; (80063b4 <__ieee754_rem_pio2+0x32c>)
 800620c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006210:	4543      	cmp	r3, r8
 8006212:	d006      	beq.n	8006222 <__ieee754_rem_pio2+0x19a>
 8006214:	4632      	mov	r2, r6
 8006216:	463b      	mov	r3, r7
 8006218:	4650      	mov	r0, sl
 800621a:	4659      	mov	r1, fp
 800621c:	f7fa f84c 	bl	80002b8 <__aeabi_dsub>
 8006220:	e00e      	b.n	8006240 <__ieee754_rem_pio2+0x1b8>
 8006222:	4632      	mov	r2, r6
 8006224:	463b      	mov	r3, r7
 8006226:	4650      	mov	r0, sl
 8006228:	4659      	mov	r1, fp
 800622a:	f7fa f845 	bl	80002b8 <__aeabi_dsub>
 800622e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006232:	9305      	str	r3, [sp, #20]
 8006234:	9a05      	ldr	r2, [sp, #20]
 8006236:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b10      	cmp	r3, #16
 800623e:	dc02      	bgt.n	8006246 <__ieee754_rem_pio2+0x1be>
 8006240:	e9c4 0100 	strd	r0, r1, [r4]
 8006244:	e039      	b.n	80062ba <__ieee754_rem_pio2+0x232>
 8006246:	a34c      	add	r3, pc, #304	; (adr r3, 8006378 <__ieee754_rem_pio2+0x2f0>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006250:	f7fa f9ea 	bl	8000628 <__aeabi_dmul>
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4650      	mov	r0, sl
 800625e:	4659      	mov	r1, fp
 8006260:	f7fa f82a 	bl	80002b8 <__aeabi_dsub>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4680      	mov	r8, r0
 800626a:	4689      	mov	r9, r1
 800626c:	4650      	mov	r0, sl
 800626e:	4659      	mov	r1, fp
 8006270:	f7fa f822 	bl	80002b8 <__aeabi_dsub>
 8006274:	4632      	mov	r2, r6
 8006276:	463b      	mov	r3, r7
 8006278:	f7fa f81e 	bl	80002b8 <__aeabi_dsub>
 800627c:	a340      	add	r3, pc, #256	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	4606      	mov	r6, r0
 8006284:	460f      	mov	r7, r1
 8006286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800628a:	f7fa f9cd 	bl	8000628 <__aeabi_dmul>
 800628e:	4632      	mov	r2, r6
 8006290:	463b      	mov	r3, r7
 8006292:	f7fa f811 	bl	80002b8 <__aeabi_dsub>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4606      	mov	r6, r0
 800629c:	460f      	mov	r7, r1
 800629e:	4640      	mov	r0, r8
 80062a0:	4649      	mov	r1, r9
 80062a2:	f7fa f809 	bl	80002b8 <__aeabi_dsub>
 80062a6:	9a05      	ldr	r2, [sp, #20]
 80062a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b31      	cmp	r3, #49	; 0x31
 80062b0:	dc20      	bgt.n	80062f4 <__ieee754_rem_pio2+0x26c>
 80062b2:	e9c4 0100 	strd	r0, r1, [r4]
 80062b6:	46c2      	mov	sl, r8
 80062b8:	46cb      	mov	fp, r9
 80062ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80062be:	4650      	mov	r0, sl
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	4659      	mov	r1, fp
 80062c6:	f7f9 fff7 	bl	80002b8 <__aeabi_dsub>
 80062ca:	463b      	mov	r3, r7
 80062cc:	4632      	mov	r2, r6
 80062ce:	f7f9 fff3 	bl	80002b8 <__aeabi_dsub>
 80062d2:	9b04      	ldr	r3, [sp, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80062da:	f6bf af11 	bge.w	8006100 <__ieee754_rem_pio2+0x78>
 80062de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80062e2:	6063      	str	r3, [r4, #4]
 80062e4:	f8c4 8000 	str.w	r8, [r4]
 80062e8:	60a0      	str	r0, [r4, #8]
 80062ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062ee:	60e3      	str	r3, [r4, #12]
 80062f0:	426d      	negs	r5, r5
 80062f2:	e705      	b.n	8006100 <__ieee754_rem_pio2+0x78>
 80062f4:	a326      	add	r3, pc, #152	; (adr r3, 8006390 <__ieee754_rem_pio2+0x308>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062fe:	f7fa f993 	bl	8000628 <__aeabi_dmul>
 8006302:	4606      	mov	r6, r0
 8006304:	460f      	mov	r7, r1
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	f7f9 ffd3 	bl	80002b8 <__aeabi_dsub>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4682      	mov	sl, r0
 8006318:	468b      	mov	fp, r1
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	f7f9 ffcb 	bl	80002b8 <__aeabi_dsub>
 8006322:	4632      	mov	r2, r6
 8006324:	463b      	mov	r3, r7
 8006326:	f7f9 ffc7 	bl	80002b8 <__aeabi_dsub>
 800632a:	a31b      	add	r3, pc, #108	; (adr r3, 8006398 <__ieee754_rem_pio2+0x310>)
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	4606      	mov	r6, r0
 8006332:	460f      	mov	r7, r1
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	f7fa f976 	bl	8000628 <__aeabi_dmul>
 800633c:	4632      	mov	r2, r6
 800633e:	463b      	mov	r3, r7
 8006340:	f7f9 ffba 	bl	80002b8 <__aeabi_dsub>
 8006344:	4606      	mov	r6, r0
 8006346:	460f      	mov	r7, r1
 8006348:	e764      	b.n	8006214 <__ieee754_rem_pio2+0x18c>
 800634a:	4b1b      	ldr	r3, [pc, #108]	; (80063b8 <__ieee754_rem_pio2+0x330>)
 800634c:	4598      	cmp	r8, r3
 800634e:	dd35      	ble.n	80063bc <__ieee754_rem_pio2+0x334>
 8006350:	ee10 2a10 	vmov	r2, s0
 8006354:	463b      	mov	r3, r7
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7f9 ffad 	bl	80002b8 <__aeabi_dsub>
 800635e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006362:	e9c4 0100 	strd	r0, r1, [r4]
 8006366:	e6a1      	b.n	80060ac <__ieee754_rem_pio2+0x24>
 8006368:	54400000 	.word	0x54400000
 800636c:	3ff921fb 	.word	0x3ff921fb
 8006370:	1a626331 	.word	0x1a626331
 8006374:	3dd0b461 	.word	0x3dd0b461
 8006378:	1a600000 	.word	0x1a600000
 800637c:	3dd0b461 	.word	0x3dd0b461
 8006380:	2e037073 	.word	0x2e037073
 8006384:	3ba3198a 	.word	0x3ba3198a
 8006388:	6dc9c883 	.word	0x6dc9c883
 800638c:	3fe45f30 	.word	0x3fe45f30
 8006390:	2e000000 	.word	0x2e000000
 8006394:	3ba3198a 	.word	0x3ba3198a
 8006398:	252049c1 	.word	0x252049c1
 800639c:	397b839a 	.word	0x397b839a
 80063a0:	3fe921fb 	.word	0x3fe921fb
 80063a4:	4002d97b 	.word	0x4002d97b
 80063a8:	3ff921fb 	.word	0x3ff921fb
 80063ac:	413921fb 	.word	0x413921fb
 80063b0:	3fe00000 	.word	0x3fe00000
 80063b4:	0801c5f4 	.word	0x0801c5f4
 80063b8:	7fefffff 	.word	0x7fefffff
 80063bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80063c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80063c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80063c8:	4630      	mov	r0, r6
 80063ca:	460f      	mov	r7, r1
 80063cc:	f7fa fbc6 	bl	8000b5c <__aeabi_d2iz>
 80063d0:	f7fa f8c0 	bl	8000554 <__aeabi_i2d>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4630      	mov	r0, r6
 80063da:	4639      	mov	r1, r7
 80063dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063e0:	f7f9 ff6a 	bl	80002b8 <__aeabi_dsub>
 80063e4:	2200      	movs	r2, #0
 80063e6:	4b1f      	ldr	r3, [pc, #124]	; (8006464 <__ieee754_rem_pio2+0x3dc>)
 80063e8:	f7fa f91e 	bl	8000628 <__aeabi_dmul>
 80063ec:	460f      	mov	r7, r1
 80063ee:	4606      	mov	r6, r0
 80063f0:	f7fa fbb4 	bl	8000b5c <__aeabi_d2iz>
 80063f4:	f7fa f8ae 	bl	8000554 <__aeabi_i2d>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4630      	mov	r0, r6
 80063fe:	4639      	mov	r1, r7
 8006400:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006404:	f7f9 ff58 	bl	80002b8 <__aeabi_dsub>
 8006408:	2200      	movs	r2, #0
 800640a:	4b16      	ldr	r3, [pc, #88]	; (8006464 <__ieee754_rem_pio2+0x3dc>)
 800640c:	f7fa f90c 	bl	8000628 <__aeabi_dmul>
 8006410:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006414:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006418:	f04f 0803 	mov.w	r8, #3
 800641c:	2600      	movs	r6, #0
 800641e:	2700      	movs	r7, #0
 8006420:	4632      	mov	r2, r6
 8006422:	463b      	mov	r3, r7
 8006424:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006428:	f108 3aff 	add.w	sl, r8, #4294967295
 800642c:	f7fa fb64 	bl	8000af8 <__aeabi_dcmpeq>
 8006430:	b9b0      	cbnz	r0, 8006460 <__ieee754_rem_pio2+0x3d8>
 8006432:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <__ieee754_rem_pio2+0x3e0>)
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	2302      	movs	r3, #2
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	462a      	mov	r2, r5
 800643c:	4643      	mov	r3, r8
 800643e:	4621      	mov	r1, r4
 8006440:	a806      	add	r0, sp, #24
 8006442:	f000 f8dd 	bl	8006600 <__kernel_rem_pio2>
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	4605      	mov	r5, r0
 800644c:	f6bf ae58 	bge.w	8006100 <__ieee754_rem_pio2+0x78>
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006456:	6063      	str	r3, [r4, #4]
 8006458:	68e3      	ldr	r3, [r4, #12]
 800645a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800645e:	e746      	b.n	80062ee <__ieee754_rem_pio2+0x266>
 8006460:	46d0      	mov	r8, sl
 8006462:	e7dd      	b.n	8006420 <__ieee754_rem_pio2+0x398>
 8006464:	41700000 	.word	0x41700000
 8006468:	0801c674 	.word	0x0801c674
 800646c:	00000000 	.word	0x00000000

08006470 <__kernel_cos>:
 8006470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	ec59 8b10 	vmov	r8, r9, d0
 8006478:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800647c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006480:	ed2d 8b02 	vpush	{d8}
 8006484:	eeb0 8a41 	vmov.f32	s16, s2
 8006488:	eef0 8a61 	vmov.f32	s17, s3
 800648c:	da07      	bge.n	800649e <__kernel_cos+0x2e>
 800648e:	ee10 0a10 	vmov	r0, s0
 8006492:	4649      	mov	r1, r9
 8006494:	f7fa fb62 	bl	8000b5c <__aeabi_d2iz>
 8006498:	2800      	cmp	r0, #0
 800649a:	f000 8089 	beq.w	80065b0 <__kernel_cos+0x140>
 800649e:	4642      	mov	r2, r8
 80064a0:	464b      	mov	r3, r9
 80064a2:	4640      	mov	r0, r8
 80064a4:	4649      	mov	r1, r9
 80064a6:	f7fa f8bf 	bl	8000628 <__aeabi_dmul>
 80064aa:	2200      	movs	r2, #0
 80064ac:	4b4e      	ldr	r3, [pc, #312]	; (80065e8 <__kernel_cos+0x178>)
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	f7fa f8b9 	bl	8000628 <__aeabi_dmul>
 80064b6:	a340      	add	r3, pc, #256	; (adr r3, 80065b8 <__kernel_cos+0x148>)
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	4682      	mov	sl, r0
 80064be:	468b      	mov	fp, r1
 80064c0:	4620      	mov	r0, r4
 80064c2:	4629      	mov	r1, r5
 80064c4:	f7fa f8b0 	bl	8000628 <__aeabi_dmul>
 80064c8:	a33d      	add	r3, pc, #244	; (adr r3, 80065c0 <__kernel_cos+0x150>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f7f9 fef5 	bl	80002bc <__adddf3>
 80064d2:	4622      	mov	r2, r4
 80064d4:	462b      	mov	r3, r5
 80064d6:	f7fa f8a7 	bl	8000628 <__aeabi_dmul>
 80064da:	a33b      	add	r3, pc, #236	; (adr r3, 80065c8 <__kernel_cos+0x158>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f7f9 feea 	bl	80002b8 <__aeabi_dsub>
 80064e4:	4622      	mov	r2, r4
 80064e6:	462b      	mov	r3, r5
 80064e8:	f7fa f89e 	bl	8000628 <__aeabi_dmul>
 80064ec:	a338      	add	r3, pc, #224	; (adr r3, 80065d0 <__kernel_cos+0x160>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f7f9 fee3 	bl	80002bc <__adddf3>
 80064f6:	4622      	mov	r2, r4
 80064f8:	462b      	mov	r3, r5
 80064fa:	f7fa f895 	bl	8000628 <__aeabi_dmul>
 80064fe:	a336      	add	r3, pc, #216	; (adr r3, 80065d8 <__kernel_cos+0x168>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7f9 fed8 	bl	80002b8 <__aeabi_dsub>
 8006508:	4622      	mov	r2, r4
 800650a:	462b      	mov	r3, r5
 800650c:	f7fa f88c 	bl	8000628 <__aeabi_dmul>
 8006510:	a333      	add	r3, pc, #204	; (adr r3, 80065e0 <__kernel_cos+0x170>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7f9 fed1 	bl	80002bc <__adddf3>
 800651a:	4622      	mov	r2, r4
 800651c:	462b      	mov	r3, r5
 800651e:	f7fa f883 	bl	8000628 <__aeabi_dmul>
 8006522:	4622      	mov	r2, r4
 8006524:	462b      	mov	r3, r5
 8006526:	f7fa f87f 	bl	8000628 <__aeabi_dmul>
 800652a:	ec53 2b18 	vmov	r2, r3, d8
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7fa f877 	bl	8000628 <__aeabi_dmul>
 800653a:	460b      	mov	r3, r1
 800653c:	4602      	mov	r2, r0
 800653e:	4629      	mov	r1, r5
 8006540:	4620      	mov	r0, r4
 8006542:	f7f9 feb9 	bl	80002b8 <__aeabi_dsub>
 8006546:	4b29      	ldr	r3, [pc, #164]	; (80065ec <__kernel_cos+0x17c>)
 8006548:	429e      	cmp	r6, r3
 800654a:	4680      	mov	r8, r0
 800654c:	4689      	mov	r9, r1
 800654e:	dc11      	bgt.n	8006574 <__kernel_cos+0x104>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4650      	mov	r0, sl
 8006556:	4659      	mov	r1, fp
 8006558:	f7f9 feae 	bl	80002b8 <__aeabi_dsub>
 800655c:	460b      	mov	r3, r1
 800655e:	4924      	ldr	r1, [pc, #144]	; (80065f0 <__kernel_cos+0x180>)
 8006560:	4602      	mov	r2, r0
 8006562:	2000      	movs	r0, #0
 8006564:	f7f9 fea8 	bl	80002b8 <__aeabi_dsub>
 8006568:	ecbd 8b02 	vpop	{d8}
 800656c:	ec41 0b10 	vmov	d0, r0, r1
 8006570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	4b1f      	ldr	r3, [pc, #124]	; (80065f4 <__kernel_cos+0x184>)
 8006576:	491e      	ldr	r1, [pc, #120]	; (80065f0 <__kernel_cos+0x180>)
 8006578:	429e      	cmp	r6, r3
 800657a:	bfcc      	ite	gt
 800657c:	4d1e      	ldrgt	r5, [pc, #120]	; (80065f8 <__kernel_cos+0x188>)
 800657e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006582:	2400      	movs	r4, #0
 8006584:	4622      	mov	r2, r4
 8006586:	462b      	mov	r3, r5
 8006588:	2000      	movs	r0, #0
 800658a:	f7f9 fe95 	bl	80002b8 <__aeabi_dsub>
 800658e:	4622      	mov	r2, r4
 8006590:	4606      	mov	r6, r0
 8006592:	460f      	mov	r7, r1
 8006594:	462b      	mov	r3, r5
 8006596:	4650      	mov	r0, sl
 8006598:	4659      	mov	r1, fp
 800659a:	f7f9 fe8d 	bl	80002b8 <__aeabi_dsub>
 800659e:	4642      	mov	r2, r8
 80065a0:	464b      	mov	r3, r9
 80065a2:	f7f9 fe89 	bl	80002b8 <__aeabi_dsub>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4630      	mov	r0, r6
 80065ac:	4639      	mov	r1, r7
 80065ae:	e7d9      	b.n	8006564 <__kernel_cos+0xf4>
 80065b0:	2000      	movs	r0, #0
 80065b2:	490f      	ldr	r1, [pc, #60]	; (80065f0 <__kernel_cos+0x180>)
 80065b4:	e7d8      	b.n	8006568 <__kernel_cos+0xf8>
 80065b6:	bf00      	nop
 80065b8:	be8838d4 	.word	0xbe8838d4
 80065bc:	bda8fae9 	.word	0xbda8fae9
 80065c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80065c4:	3e21ee9e 	.word	0x3e21ee9e
 80065c8:	809c52ad 	.word	0x809c52ad
 80065cc:	3e927e4f 	.word	0x3e927e4f
 80065d0:	19cb1590 	.word	0x19cb1590
 80065d4:	3efa01a0 	.word	0x3efa01a0
 80065d8:	16c15177 	.word	0x16c15177
 80065dc:	3f56c16c 	.word	0x3f56c16c
 80065e0:	5555554c 	.word	0x5555554c
 80065e4:	3fa55555 	.word	0x3fa55555
 80065e8:	3fe00000 	.word	0x3fe00000
 80065ec:	3fd33332 	.word	0x3fd33332
 80065f0:	3ff00000 	.word	0x3ff00000
 80065f4:	3fe90000 	.word	0x3fe90000
 80065f8:	3fd20000 	.word	0x3fd20000
 80065fc:	00000000 	.word	0x00000000

08006600 <__kernel_rem_pio2>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	ed2d 8b02 	vpush	{d8}
 8006608:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800660c:	1ed4      	subs	r4, r2, #3
 800660e:	9308      	str	r3, [sp, #32]
 8006610:	9101      	str	r1, [sp, #4]
 8006612:	4bc5      	ldr	r3, [pc, #788]	; (8006928 <__kernel_rem_pio2+0x328>)
 8006614:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006616:	9009      	str	r0, [sp, #36]	; 0x24
 8006618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800661c:	9304      	str	r3, [sp, #16]
 800661e:	9b08      	ldr	r3, [sp, #32]
 8006620:	3b01      	subs	r3, #1
 8006622:	9307      	str	r3, [sp, #28]
 8006624:	2318      	movs	r3, #24
 8006626:	fb94 f4f3 	sdiv	r4, r4, r3
 800662a:	f06f 0317 	mvn.w	r3, #23
 800662e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006632:	fb04 3303 	mla	r3, r4, r3, r3
 8006636:	eb03 0a02 	add.w	sl, r3, r2
 800663a:	9b04      	ldr	r3, [sp, #16]
 800663c:	9a07      	ldr	r2, [sp, #28]
 800663e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006918 <__kernel_rem_pio2+0x318>
 8006642:	eb03 0802 	add.w	r8, r3, r2
 8006646:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006648:	1aa7      	subs	r7, r4, r2
 800664a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800664e:	ae22      	add	r6, sp, #136	; 0x88
 8006650:	2500      	movs	r5, #0
 8006652:	4545      	cmp	r5, r8
 8006654:	dd13      	ble.n	800667e <__kernel_rem_pio2+0x7e>
 8006656:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006918 <__kernel_rem_pio2+0x318>
 800665a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800665e:	2600      	movs	r6, #0
 8006660:	9b04      	ldr	r3, [sp, #16]
 8006662:	429e      	cmp	r6, r3
 8006664:	dc32      	bgt.n	80066cc <__kernel_rem_pio2+0xcc>
 8006666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006668:	9302      	str	r3, [sp, #8]
 800666a:	9b08      	ldr	r3, [sp, #32]
 800666c:	199d      	adds	r5, r3, r6
 800666e:	ab22      	add	r3, sp, #136	; 0x88
 8006670:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006674:	9306      	str	r3, [sp, #24]
 8006676:	ec59 8b18 	vmov	r8, r9, d8
 800667a:	2700      	movs	r7, #0
 800667c:	e01f      	b.n	80066be <__kernel_rem_pio2+0xbe>
 800667e:	42ef      	cmn	r7, r5
 8006680:	d407      	bmi.n	8006692 <__kernel_rem_pio2+0x92>
 8006682:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006686:	f7f9 ff65 	bl	8000554 <__aeabi_i2d>
 800668a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800668e:	3501      	adds	r5, #1
 8006690:	e7df      	b.n	8006652 <__kernel_rem_pio2+0x52>
 8006692:	ec51 0b18 	vmov	r0, r1, d8
 8006696:	e7f8      	b.n	800668a <__kernel_rem_pio2+0x8a>
 8006698:	9906      	ldr	r1, [sp, #24]
 800669a:	9d02      	ldr	r5, [sp, #8]
 800669c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80066a0:	9106      	str	r1, [sp, #24]
 80066a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80066a6:	9502      	str	r5, [sp, #8]
 80066a8:	f7f9 ffbe 	bl	8000628 <__aeabi_dmul>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	f7f9 fe02 	bl	80002bc <__adddf3>
 80066b8:	3701      	adds	r7, #1
 80066ba:	4680      	mov	r8, r0
 80066bc:	4689      	mov	r9, r1
 80066be:	9b07      	ldr	r3, [sp, #28]
 80066c0:	429f      	cmp	r7, r3
 80066c2:	dde9      	ble.n	8006698 <__kernel_rem_pio2+0x98>
 80066c4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80066c8:	3601      	adds	r6, #1
 80066ca:	e7c9      	b.n	8006660 <__kernel_rem_pio2+0x60>
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	aa0e      	add	r2, sp, #56	; 0x38
 80066d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066d4:	930c      	str	r3, [sp, #48]	; 0x30
 80066d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80066d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80066dc:	9c04      	ldr	r4, [sp, #16]
 80066de:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e0:	ab9a      	add	r3, sp, #616	; 0x268
 80066e2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80066e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066ee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80066f2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80066f6:	ab9a      	add	r3, sp, #616	; 0x268
 80066f8:	445b      	add	r3, fp
 80066fa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80066fe:	2500      	movs	r5, #0
 8006700:	1b63      	subs	r3, r4, r5
 8006702:	2b00      	cmp	r3, #0
 8006704:	dc78      	bgt.n	80067f8 <__kernel_rem_pio2+0x1f8>
 8006706:	4650      	mov	r0, sl
 8006708:	ec49 8b10 	vmov	d0, r8, r9
 800670c:	f000 fc00 	bl	8006f10 <scalbn>
 8006710:	ec57 6b10 	vmov	r6, r7, d0
 8006714:	2200      	movs	r2, #0
 8006716:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800671a:	ee10 0a10 	vmov	r0, s0
 800671e:	4639      	mov	r1, r7
 8006720:	f7f9 ff82 	bl	8000628 <__aeabi_dmul>
 8006724:	ec41 0b10 	vmov	d0, r0, r1
 8006728:	f000 fb6e 	bl	8006e08 <floor>
 800672c:	2200      	movs	r2, #0
 800672e:	ec51 0b10 	vmov	r0, r1, d0
 8006732:	4b7e      	ldr	r3, [pc, #504]	; (800692c <__kernel_rem_pio2+0x32c>)
 8006734:	f7f9 ff78 	bl	8000628 <__aeabi_dmul>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4630      	mov	r0, r6
 800673e:	4639      	mov	r1, r7
 8006740:	f7f9 fdba 	bl	80002b8 <__aeabi_dsub>
 8006744:	460f      	mov	r7, r1
 8006746:	4606      	mov	r6, r0
 8006748:	f7fa fa08 	bl	8000b5c <__aeabi_d2iz>
 800674c:	9006      	str	r0, [sp, #24]
 800674e:	f7f9 ff01 	bl	8000554 <__aeabi_i2d>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4630      	mov	r0, r6
 8006758:	4639      	mov	r1, r7
 800675a:	f7f9 fdad 	bl	80002b8 <__aeabi_dsub>
 800675e:	f1ba 0f00 	cmp.w	sl, #0
 8006762:	4606      	mov	r6, r0
 8006764:	460f      	mov	r7, r1
 8006766:	dd6c      	ble.n	8006842 <__kernel_rem_pio2+0x242>
 8006768:	1e62      	subs	r2, r4, #1
 800676a:	ab0e      	add	r3, sp, #56	; 0x38
 800676c:	f1ca 0118 	rsb	r1, sl, #24
 8006770:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006774:	9d06      	ldr	r5, [sp, #24]
 8006776:	fa40 f301 	asr.w	r3, r0, r1
 800677a:	441d      	add	r5, r3
 800677c:	408b      	lsls	r3, r1
 800677e:	1ac0      	subs	r0, r0, r3
 8006780:	ab0e      	add	r3, sp, #56	; 0x38
 8006782:	9506      	str	r5, [sp, #24]
 8006784:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006788:	f1ca 0317 	rsb	r3, sl, #23
 800678c:	fa40 f303 	asr.w	r3, r0, r3
 8006790:	9302      	str	r3, [sp, #8]
 8006792:	9b02      	ldr	r3, [sp, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dd62      	ble.n	800685e <__kernel_rem_pio2+0x25e>
 8006798:	9b06      	ldr	r3, [sp, #24]
 800679a:	2200      	movs	r2, #0
 800679c:	3301      	adds	r3, #1
 800679e:	9306      	str	r3, [sp, #24]
 80067a0:	4615      	mov	r5, r2
 80067a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80067a6:	4294      	cmp	r4, r2
 80067a8:	f300 8095 	bgt.w	80068d6 <__kernel_rem_pio2+0x2d6>
 80067ac:	f1ba 0f00 	cmp.w	sl, #0
 80067b0:	dd07      	ble.n	80067c2 <__kernel_rem_pio2+0x1c2>
 80067b2:	f1ba 0f01 	cmp.w	sl, #1
 80067b6:	f000 80a2 	beq.w	80068fe <__kernel_rem_pio2+0x2fe>
 80067ba:	f1ba 0f02 	cmp.w	sl, #2
 80067be:	f000 80c1 	beq.w	8006944 <__kernel_rem_pio2+0x344>
 80067c2:	9b02      	ldr	r3, [sp, #8]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d14a      	bne.n	800685e <__kernel_rem_pio2+0x25e>
 80067c8:	4632      	mov	r2, r6
 80067ca:	463b      	mov	r3, r7
 80067cc:	2000      	movs	r0, #0
 80067ce:	4958      	ldr	r1, [pc, #352]	; (8006930 <__kernel_rem_pio2+0x330>)
 80067d0:	f7f9 fd72 	bl	80002b8 <__aeabi_dsub>
 80067d4:	4606      	mov	r6, r0
 80067d6:	460f      	mov	r7, r1
 80067d8:	2d00      	cmp	r5, #0
 80067da:	d040      	beq.n	800685e <__kernel_rem_pio2+0x25e>
 80067dc:	4650      	mov	r0, sl
 80067de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006920 <__kernel_rem_pio2+0x320>
 80067e2:	f000 fb95 	bl	8006f10 <scalbn>
 80067e6:	4630      	mov	r0, r6
 80067e8:	4639      	mov	r1, r7
 80067ea:	ec53 2b10 	vmov	r2, r3, d0
 80067ee:	f7f9 fd63 	bl	80002b8 <__aeabi_dsub>
 80067f2:	4606      	mov	r6, r0
 80067f4:	460f      	mov	r7, r1
 80067f6:	e032      	b.n	800685e <__kernel_rem_pio2+0x25e>
 80067f8:	2200      	movs	r2, #0
 80067fa:	4b4e      	ldr	r3, [pc, #312]	; (8006934 <__kernel_rem_pio2+0x334>)
 80067fc:	4640      	mov	r0, r8
 80067fe:	4649      	mov	r1, r9
 8006800:	f7f9 ff12 	bl	8000628 <__aeabi_dmul>
 8006804:	f7fa f9aa 	bl	8000b5c <__aeabi_d2iz>
 8006808:	f7f9 fea4 	bl	8000554 <__aeabi_i2d>
 800680c:	2200      	movs	r2, #0
 800680e:	4b4a      	ldr	r3, [pc, #296]	; (8006938 <__kernel_rem_pio2+0x338>)
 8006810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006814:	f7f9 ff08 	bl	8000628 <__aeabi_dmul>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4640      	mov	r0, r8
 800681e:	4649      	mov	r1, r9
 8006820:	f7f9 fd4a 	bl	80002b8 <__aeabi_dsub>
 8006824:	f7fa f99a 	bl	8000b5c <__aeabi_d2iz>
 8006828:	ab0e      	add	r3, sp, #56	; 0x38
 800682a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800682e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006836:	f7f9 fd41 	bl	80002bc <__adddf3>
 800683a:	3501      	adds	r5, #1
 800683c:	4680      	mov	r8, r0
 800683e:	4689      	mov	r9, r1
 8006840:	e75e      	b.n	8006700 <__kernel_rem_pio2+0x100>
 8006842:	d105      	bne.n	8006850 <__kernel_rem_pio2+0x250>
 8006844:	1e63      	subs	r3, r4, #1
 8006846:	aa0e      	add	r2, sp, #56	; 0x38
 8006848:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800684c:	15c3      	asrs	r3, r0, #23
 800684e:	e79f      	b.n	8006790 <__kernel_rem_pio2+0x190>
 8006850:	2200      	movs	r2, #0
 8006852:	4b3a      	ldr	r3, [pc, #232]	; (800693c <__kernel_rem_pio2+0x33c>)
 8006854:	f7fa f96e 	bl	8000b34 <__aeabi_dcmpge>
 8006858:	2800      	cmp	r0, #0
 800685a:	d139      	bne.n	80068d0 <__kernel_rem_pio2+0x2d0>
 800685c:	9002      	str	r0, [sp, #8]
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7fa f947 	bl	8000af8 <__aeabi_dcmpeq>
 800686a:	2800      	cmp	r0, #0
 800686c:	f000 80c7 	beq.w	80069fe <__kernel_rem_pio2+0x3fe>
 8006870:	1e65      	subs	r5, r4, #1
 8006872:	462b      	mov	r3, r5
 8006874:	2200      	movs	r2, #0
 8006876:	9904      	ldr	r1, [sp, #16]
 8006878:	428b      	cmp	r3, r1
 800687a:	da6a      	bge.n	8006952 <__kernel_rem_pio2+0x352>
 800687c:	2a00      	cmp	r2, #0
 800687e:	f000 8088 	beq.w	8006992 <__kernel_rem_pio2+0x392>
 8006882:	ab0e      	add	r3, sp, #56	; 0x38
 8006884:	f1aa 0a18 	sub.w	sl, sl, #24
 8006888:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80b4 	beq.w	80069fa <__kernel_rem_pio2+0x3fa>
 8006892:	4650      	mov	r0, sl
 8006894:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006920 <__kernel_rem_pio2+0x320>
 8006898:	f000 fb3a 	bl	8006f10 <scalbn>
 800689c:	00ec      	lsls	r4, r5, #3
 800689e:	ab72      	add	r3, sp, #456	; 0x1c8
 80068a0:	191e      	adds	r6, r3, r4
 80068a2:	ec59 8b10 	vmov	r8, r9, d0
 80068a6:	f106 0a08 	add.w	sl, r6, #8
 80068aa:	462f      	mov	r7, r5
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	f280 80df 	bge.w	8006a70 <__kernel_rem_pio2+0x470>
 80068b2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006918 <__kernel_rem_pio2+0x318>
 80068b6:	f04f 0a00 	mov.w	sl, #0
 80068ba:	eba5 030a 	sub.w	r3, r5, sl
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f2c0 810a 	blt.w	8006ad8 <__kernel_rem_pio2+0x4d8>
 80068c4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006940 <__kernel_rem_pio2+0x340>
 80068c8:	ec59 8b18 	vmov	r8, r9, d8
 80068cc:	2700      	movs	r7, #0
 80068ce:	e0f5      	b.n	8006abc <__kernel_rem_pio2+0x4bc>
 80068d0:	2302      	movs	r3, #2
 80068d2:	9302      	str	r3, [sp, #8]
 80068d4:	e760      	b.n	8006798 <__kernel_rem_pio2+0x198>
 80068d6:	ab0e      	add	r3, sp, #56	; 0x38
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	b94d      	cbnz	r5, 80068f2 <__kernel_rem_pio2+0x2f2>
 80068de:	b12b      	cbz	r3, 80068ec <__kernel_rem_pio2+0x2ec>
 80068e0:	a80e      	add	r0, sp, #56	; 0x38
 80068e2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80068e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80068ea:	2301      	movs	r3, #1
 80068ec:	3201      	adds	r2, #1
 80068ee:	461d      	mov	r5, r3
 80068f0:	e759      	b.n	80067a6 <__kernel_rem_pio2+0x1a6>
 80068f2:	a80e      	add	r0, sp, #56	; 0x38
 80068f4:	1acb      	subs	r3, r1, r3
 80068f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80068fa:	462b      	mov	r3, r5
 80068fc:	e7f6      	b.n	80068ec <__kernel_rem_pio2+0x2ec>
 80068fe:	1e62      	subs	r2, r4, #1
 8006900:	ab0e      	add	r3, sp, #56	; 0x38
 8006902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006906:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800690a:	a90e      	add	r1, sp, #56	; 0x38
 800690c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006910:	e757      	b.n	80067c2 <__kernel_rem_pio2+0x1c2>
 8006912:	bf00      	nop
 8006914:	f3af 8000 	nop.w
	...
 8006924:	3ff00000 	.word	0x3ff00000
 8006928:	0801c7c0 	.word	0x0801c7c0
 800692c:	40200000 	.word	0x40200000
 8006930:	3ff00000 	.word	0x3ff00000
 8006934:	3e700000 	.word	0x3e700000
 8006938:	41700000 	.word	0x41700000
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	0801c780 	.word	0x0801c780
 8006944:	1e62      	subs	r2, r4, #1
 8006946:	ab0e      	add	r3, sp, #56	; 0x38
 8006948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006950:	e7db      	b.n	800690a <__kernel_rem_pio2+0x30a>
 8006952:	a90e      	add	r1, sp, #56	; 0x38
 8006954:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006958:	3b01      	subs	r3, #1
 800695a:	430a      	orrs	r2, r1
 800695c:	e78b      	b.n	8006876 <__kernel_rem_pio2+0x276>
 800695e:	3301      	adds	r3, #1
 8006960:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006964:	2900      	cmp	r1, #0
 8006966:	d0fa      	beq.n	800695e <__kernel_rem_pio2+0x35e>
 8006968:	9a08      	ldr	r2, [sp, #32]
 800696a:	4422      	add	r2, r4
 800696c:	00d2      	lsls	r2, r2, #3
 800696e:	a922      	add	r1, sp, #136	; 0x88
 8006970:	18e3      	adds	r3, r4, r3
 8006972:	9206      	str	r2, [sp, #24]
 8006974:	440a      	add	r2, r1
 8006976:	9302      	str	r3, [sp, #8]
 8006978:	f10b 0108 	add.w	r1, fp, #8
 800697c:	f102 0308 	add.w	r3, r2, #8
 8006980:	1c66      	adds	r6, r4, #1
 8006982:	910a      	str	r1, [sp, #40]	; 0x28
 8006984:	2500      	movs	r5, #0
 8006986:	930d      	str	r3, [sp, #52]	; 0x34
 8006988:	9b02      	ldr	r3, [sp, #8]
 800698a:	42b3      	cmp	r3, r6
 800698c:	da04      	bge.n	8006998 <__kernel_rem_pio2+0x398>
 800698e:	461c      	mov	r4, r3
 8006990:	e6a6      	b.n	80066e0 <__kernel_rem_pio2+0xe0>
 8006992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006994:	2301      	movs	r3, #1
 8006996:	e7e3      	b.n	8006960 <__kernel_rem_pio2+0x360>
 8006998:	9b06      	ldr	r3, [sp, #24]
 800699a:	18ef      	adds	r7, r5, r3
 800699c:	ab22      	add	r3, sp, #136	; 0x88
 800699e:	441f      	add	r7, r3
 80069a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80069a6:	f7f9 fdd5 	bl	8000554 <__aeabi_i2d>
 80069aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ac:	461c      	mov	r4, r3
 80069ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069b0:	e9c7 0100 	strd	r0, r1, [r7]
 80069b4:	eb03 0b05 	add.w	fp, r3, r5
 80069b8:	2700      	movs	r7, #0
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	f04f 0900 	mov.w	r9, #0
 80069c2:	9b07      	ldr	r3, [sp, #28]
 80069c4:	429f      	cmp	r7, r3
 80069c6:	dd08      	ble.n	80069da <__kernel_rem_pio2+0x3da>
 80069c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ca:	aa72      	add	r2, sp, #456	; 0x1c8
 80069cc:	18eb      	adds	r3, r5, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80069d4:	3601      	adds	r6, #1
 80069d6:	3508      	adds	r5, #8
 80069d8:	e7d6      	b.n	8006988 <__kernel_rem_pio2+0x388>
 80069da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80069de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80069e2:	f7f9 fe21 	bl	8000628 <__aeabi_dmul>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7f9 fc65 	bl	80002bc <__adddf3>
 80069f2:	3701      	adds	r7, #1
 80069f4:	4680      	mov	r8, r0
 80069f6:	4689      	mov	r9, r1
 80069f8:	e7e3      	b.n	80069c2 <__kernel_rem_pio2+0x3c2>
 80069fa:	3d01      	subs	r5, #1
 80069fc:	e741      	b.n	8006882 <__kernel_rem_pio2+0x282>
 80069fe:	f1ca 0000 	rsb	r0, sl, #0
 8006a02:	ec47 6b10 	vmov	d0, r6, r7
 8006a06:	f000 fa83 	bl	8006f10 <scalbn>
 8006a0a:	ec57 6b10 	vmov	r6, r7, d0
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4b99      	ldr	r3, [pc, #612]	; (8006c78 <__kernel_rem_pio2+0x678>)
 8006a12:	ee10 0a10 	vmov	r0, s0
 8006a16:	4639      	mov	r1, r7
 8006a18:	f7fa f88c 	bl	8000b34 <__aeabi_dcmpge>
 8006a1c:	b1f8      	cbz	r0, 8006a5e <__kernel_rem_pio2+0x45e>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4b96      	ldr	r3, [pc, #600]	; (8006c7c <__kernel_rem_pio2+0x67c>)
 8006a22:	4630      	mov	r0, r6
 8006a24:	4639      	mov	r1, r7
 8006a26:	f7f9 fdff 	bl	8000628 <__aeabi_dmul>
 8006a2a:	f7fa f897 	bl	8000b5c <__aeabi_d2iz>
 8006a2e:	4680      	mov	r8, r0
 8006a30:	f7f9 fd90 	bl	8000554 <__aeabi_i2d>
 8006a34:	2200      	movs	r2, #0
 8006a36:	4b90      	ldr	r3, [pc, #576]	; (8006c78 <__kernel_rem_pio2+0x678>)
 8006a38:	f7f9 fdf6 	bl	8000628 <__aeabi_dmul>
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4639      	mov	r1, r7
 8006a42:	4630      	mov	r0, r6
 8006a44:	f7f9 fc38 	bl	80002b8 <__aeabi_dsub>
 8006a48:	f7fa f888 	bl	8000b5c <__aeabi_d2iz>
 8006a4c:	1c65      	adds	r5, r4, #1
 8006a4e:	ab0e      	add	r3, sp, #56	; 0x38
 8006a50:	f10a 0a18 	add.w	sl, sl, #24
 8006a54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006a58:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006a5c:	e719      	b.n	8006892 <__kernel_rem_pio2+0x292>
 8006a5e:	4630      	mov	r0, r6
 8006a60:	4639      	mov	r1, r7
 8006a62:	f7fa f87b 	bl	8000b5c <__aeabi_d2iz>
 8006a66:	ab0e      	add	r3, sp, #56	; 0x38
 8006a68:	4625      	mov	r5, r4
 8006a6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006a6e:	e710      	b.n	8006892 <__kernel_rem_pio2+0x292>
 8006a70:	ab0e      	add	r3, sp, #56	; 0x38
 8006a72:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006a76:	f7f9 fd6d 	bl	8000554 <__aeabi_i2d>
 8006a7a:	4642      	mov	r2, r8
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	f7f9 fdd3 	bl	8000628 <__aeabi_dmul>
 8006a82:	2200      	movs	r2, #0
 8006a84:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006a88:	4b7c      	ldr	r3, [pc, #496]	; (8006c7c <__kernel_rem_pio2+0x67c>)
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7f9 fdcb 	bl	8000628 <__aeabi_dmul>
 8006a92:	3f01      	subs	r7, #1
 8006a94:	4680      	mov	r8, r0
 8006a96:	4689      	mov	r9, r1
 8006a98:	e708      	b.n	80068ac <__kernel_rem_pio2+0x2ac>
 8006a9a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006aa6:	f7f9 fdbf 	bl	8000628 <__aeabi_dmul>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4640      	mov	r0, r8
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	f7f9 fc03 	bl	80002bc <__adddf3>
 8006ab6:	3701      	adds	r7, #1
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4689      	mov	r9, r1
 8006abc:	9b04      	ldr	r3, [sp, #16]
 8006abe:	429f      	cmp	r7, r3
 8006ac0:	dc01      	bgt.n	8006ac6 <__kernel_rem_pio2+0x4c6>
 8006ac2:	45ba      	cmp	sl, r7
 8006ac4:	dae9      	bge.n	8006a9a <__kernel_rem_pio2+0x49a>
 8006ac6:	ab4a      	add	r3, sp, #296	; 0x128
 8006ac8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006acc:	e9c3 8900 	strd	r8, r9, [r3]
 8006ad0:	f10a 0a01 	add.w	sl, sl, #1
 8006ad4:	3e08      	subs	r6, #8
 8006ad6:	e6f0      	b.n	80068ba <__kernel_rem_pio2+0x2ba>
 8006ad8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d85b      	bhi.n	8006b96 <__kernel_rem_pio2+0x596>
 8006ade:	e8df f003 	tbb	[pc, r3]
 8006ae2:	264a      	.short	0x264a
 8006ae4:	0226      	.short	0x0226
 8006ae6:	ab9a      	add	r3, sp, #616	; 0x268
 8006ae8:	441c      	add	r4, r3
 8006aea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006aee:	46a2      	mov	sl, r4
 8006af0:	46ab      	mov	fp, r5
 8006af2:	f1bb 0f00 	cmp.w	fp, #0
 8006af6:	dc6c      	bgt.n	8006bd2 <__kernel_rem_pio2+0x5d2>
 8006af8:	46a2      	mov	sl, r4
 8006afa:	46ab      	mov	fp, r5
 8006afc:	f1bb 0f01 	cmp.w	fp, #1
 8006b00:	f300 8086 	bgt.w	8006c10 <__kernel_rem_pio2+0x610>
 8006b04:	2000      	movs	r0, #0
 8006b06:	2100      	movs	r1, #0
 8006b08:	2d01      	cmp	r5, #1
 8006b0a:	f300 80a0 	bgt.w	8006c4e <__kernel_rem_pio2+0x64e>
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006b14:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f040 809e 	bne.w	8006c5a <__kernel_rem_pio2+0x65a>
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	e9c3 7800 	strd	r7, r8, [r3]
 8006b24:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006b28:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006b2c:	e033      	b.n	8006b96 <__kernel_rem_pio2+0x596>
 8006b2e:	3408      	adds	r4, #8
 8006b30:	ab4a      	add	r3, sp, #296	; 0x128
 8006b32:	441c      	add	r4, r3
 8006b34:	462e      	mov	r6, r5
 8006b36:	2000      	movs	r0, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	da3a      	bge.n	8006bb4 <__kernel_rem_pio2+0x5b4>
 8006b3e:	9b02      	ldr	r3, [sp, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d03d      	beq.n	8006bc0 <__kernel_rem_pio2+0x5c0>
 8006b44:	4602      	mov	r2, r0
 8006b46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b4a:	9c01      	ldr	r4, [sp, #4]
 8006b4c:	e9c4 2300 	strd	r2, r3, [r4]
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006b58:	f7f9 fbae 	bl	80002b8 <__aeabi_dsub>
 8006b5c:	ae4c      	add	r6, sp, #304	; 0x130
 8006b5e:	2401      	movs	r4, #1
 8006b60:	42a5      	cmp	r5, r4
 8006b62:	da30      	bge.n	8006bc6 <__kernel_rem_pio2+0x5c6>
 8006b64:	9b02      	ldr	r3, [sp, #8]
 8006b66:	b113      	cbz	r3, 8006b6e <__kernel_rem_pio2+0x56e>
 8006b68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	9b01      	ldr	r3, [sp, #4]
 8006b70:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006b74:	e00f      	b.n	8006b96 <__kernel_rem_pio2+0x596>
 8006b76:	ab9a      	add	r3, sp, #616	; 0x268
 8006b78:	441c      	add	r4, r3
 8006b7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006b7e:	2000      	movs	r0, #0
 8006b80:	2100      	movs	r1, #0
 8006b82:	2d00      	cmp	r5, #0
 8006b84:	da10      	bge.n	8006ba8 <__kernel_rem_pio2+0x5a8>
 8006b86:	9b02      	ldr	r3, [sp, #8]
 8006b88:	b113      	cbz	r3, 8006b90 <__kernel_rem_pio2+0x590>
 8006b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b8e:	4619      	mov	r1, r3
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	e9c3 0100 	strd	r0, r1, [r3]
 8006b96:	9b06      	ldr	r3, [sp, #24]
 8006b98:	f003 0007 	and.w	r0, r3, #7
 8006b9c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006ba0:	ecbd 8b02 	vpop	{d8}
 8006ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006bac:	f7f9 fb86 	bl	80002bc <__adddf3>
 8006bb0:	3d01      	subs	r5, #1
 8006bb2:	e7e6      	b.n	8006b82 <__kernel_rem_pio2+0x582>
 8006bb4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006bb8:	f7f9 fb80 	bl	80002bc <__adddf3>
 8006bbc:	3e01      	subs	r6, #1
 8006bbe:	e7bc      	b.n	8006b3a <__kernel_rem_pio2+0x53a>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	e7c1      	b.n	8006b4a <__kernel_rem_pio2+0x54a>
 8006bc6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006bca:	f7f9 fb77 	bl	80002bc <__adddf3>
 8006bce:	3401      	adds	r4, #1
 8006bd0:	e7c6      	b.n	8006b60 <__kernel_rem_pio2+0x560>
 8006bd2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006bd6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006bda:	4640      	mov	r0, r8
 8006bdc:	ec53 2b17 	vmov	r2, r3, d7
 8006be0:	4649      	mov	r1, r9
 8006be2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006be6:	f7f9 fb69 	bl	80002bc <__adddf3>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4606      	mov	r6, r0
 8006bf0:	460f      	mov	r7, r1
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fb5f 	bl	80002b8 <__aeabi_dsub>
 8006bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bfe:	f7f9 fb5d 	bl	80002bc <__adddf3>
 8006c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c06:	e9ca 0100 	strd	r0, r1, [sl]
 8006c0a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006c0e:	e770      	b.n	8006af2 <__kernel_rem_pio2+0x4f2>
 8006c10:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006c14:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006c18:	4630      	mov	r0, r6
 8006c1a:	ec53 2b17 	vmov	r2, r3, d7
 8006c1e:	4639      	mov	r1, r7
 8006c20:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c24:	f7f9 fb4a 	bl	80002bc <__adddf3>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	4689      	mov	r9, r1
 8006c30:	4630      	mov	r0, r6
 8006c32:	4639      	mov	r1, r7
 8006c34:	f7f9 fb40 	bl	80002b8 <__aeabi_dsub>
 8006c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3c:	f7f9 fb3e 	bl	80002bc <__adddf3>
 8006c40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c44:	e9ca 0100 	strd	r0, r1, [sl]
 8006c48:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006c4c:	e756      	b.n	8006afc <__kernel_rem_pio2+0x4fc>
 8006c4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c52:	f7f9 fb33 	bl	80002bc <__adddf3>
 8006c56:	3d01      	subs	r5, #1
 8006c58:	e756      	b.n	8006b08 <__kernel_rem_pio2+0x508>
 8006c5a:	9b01      	ldr	r3, [sp, #4]
 8006c5c:	9a01      	ldr	r2, [sp, #4]
 8006c5e:	601f      	str	r7, [r3, #0]
 8006c60:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006c64:	605c      	str	r4, [r3, #4]
 8006c66:	609d      	str	r5, [r3, #8]
 8006c68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c6c:	60d3      	str	r3, [r2, #12]
 8006c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c72:	6110      	str	r0, [r2, #16]
 8006c74:	6153      	str	r3, [r2, #20]
 8006c76:	e78e      	b.n	8006b96 <__kernel_rem_pio2+0x596>
 8006c78:	41700000 	.word	0x41700000
 8006c7c:	3e700000 	.word	0x3e700000

08006c80 <__kernel_sin>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	ec55 4b10 	vmov	r4, r5, d0
 8006c88:	b085      	sub	sp, #20
 8006c8a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006c8e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006c92:	ed8d 1b00 	vstr	d1, [sp]
 8006c96:	9002      	str	r0, [sp, #8]
 8006c98:	da06      	bge.n	8006ca8 <__kernel_sin+0x28>
 8006c9a:	ee10 0a10 	vmov	r0, s0
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f7f9 ff5c 	bl	8000b5c <__aeabi_d2iz>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d051      	beq.n	8006d4c <__kernel_sin+0xcc>
 8006ca8:	4622      	mov	r2, r4
 8006caa:	462b      	mov	r3, r5
 8006cac:	4620      	mov	r0, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	f7f9 fcba 	bl	8000628 <__aeabi_dmul>
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	468b      	mov	fp, r1
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	f7f9 fcb2 	bl	8000628 <__aeabi_dmul>
 8006cc4:	a341      	add	r3, pc, #260	; (adr r3, 8006dcc <__kernel_sin+0x14c>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	4680      	mov	r8, r0
 8006ccc:	4689      	mov	r9, r1
 8006cce:	4650      	mov	r0, sl
 8006cd0:	4659      	mov	r1, fp
 8006cd2:	f7f9 fca9 	bl	8000628 <__aeabi_dmul>
 8006cd6:	a33f      	add	r3, pc, #252	; (adr r3, 8006dd4 <__kernel_sin+0x154>)
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f7f9 faec 	bl	80002b8 <__aeabi_dsub>
 8006ce0:	4652      	mov	r2, sl
 8006ce2:	465b      	mov	r3, fp
 8006ce4:	f7f9 fca0 	bl	8000628 <__aeabi_dmul>
 8006ce8:	a33c      	add	r3, pc, #240	; (adr r3, 8006ddc <__kernel_sin+0x15c>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fae5 	bl	80002bc <__adddf3>
 8006cf2:	4652      	mov	r2, sl
 8006cf4:	465b      	mov	r3, fp
 8006cf6:	f7f9 fc97 	bl	8000628 <__aeabi_dmul>
 8006cfa:	a33a      	add	r3, pc, #232	; (adr r3, 8006de4 <__kernel_sin+0x164>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f7f9 fada 	bl	80002b8 <__aeabi_dsub>
 8006d04:	4652      	mov	r2, sl
 8006d06:	465b      	mov	r3, fp
 8006d08:	f7f9 fc8e 	bl	8000628 <__aeabi_dmul>
 8006d0c:	a337      	add	r3, pc, #220	; (adr r3, 8006dec <__kernel_sin+0x16c>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fad3 	bl	80002bc <__adddf3>
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	4606      	mov	r6, r0
 8006d1a:	460f      	mov	r7, r1
 8006d1c:	b9db      	cbnz	r3, 8006d56 <__kernel_sin+0xd6>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4650      	mov	r0, sl
 8006d24:	4659      	mov	r1, fp
 8006d26:	f7f9 fc7f 	bl	8000628 <__aeabi_dmul>
 8006d2a:	a325      	add	r3, pc, #148	; (adr r3, 8006dc0 <__kernel_sin+0x140>)
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f7f9 fac2 	bl	80002b8 <__aeabi_dsub>
 8006d34:	4642      	mov	r2, r8
 8006d36:	464b      	mov	r3, r9
 8006d38:	f7f9 fc76 	bl	8000628 <__aeabi_dmul>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4620      	mov	r0, r4
 8006d42:	4629      	mov	r1, r5
 8006d44:	f7f9 faba 	bl	80002bc <__adddf3>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	ec45 4b10 	vmov	d0, r4, r5
 8006d50:	b005      	add	sp, #20
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	2200      	movs	r2, #0
 8006d58:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <__kernel_sin+0x148>)
 8006d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d5e:	f7f9 fc63 	bl	8000628 <__aeabi_dmul>
 8006d62:	4632      	mov	r2, r6
 8006d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d68:	463b      	mov	r3, r7
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	f7f9 fc5b 	bl	8000628 <__aeabi_dmul>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d7a:	f7f9 fa9d 	bl	80002b8 <__aeabi_dsub>
 8006d7e:	4652      	mov	r2, sl
 8006d80:	465b      	mov	r3, fp
 8006d82:	f7f9 fc51 	bl	8000628 <__aeabi_dmul>
 8006d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d8a:	f7f9 fa95 	bl	80002b8 <__aeabi_dsub>
 8006d8e:	a30c      	add	r3, pc, #48	; (adr r3, 8006dc0 <__kernel_sin+0x140>)
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	4606      	mov	r6, r0
 8006d96:	460f      	mov	r7, r1
 8006d98:	4640      	mov	r0, r8
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	f7f9 fc44 	bl	8000628 <__aeabi_dmul>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4630      	mov	r0, r6
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7f9 fa88 	bl	80002bc <__adddf3>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4620      	mov	r0, r4
 8006db2:	4629      	mov	r1, r5
 8006db4:	f7f9 fa80 	bl	80002b8 <__aeabi_dsub>
 8006db8:	e7c6      	b.n	8006d48 <__kernel_sin+0xc8>
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w
 8006dc0:	55555549 	.word	0x55555549
 8006dc4:	3fc55555 	.word	0x3fc55555
 8006dc8:	3fe00000 	.word	0x3fe00000
 8006dcc:	5acfd57c 	.word	0x5acfd57c
 8006dd0:	3de5d93a 	.word	0x3de5d93a
 8006dd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006dd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006ddc:	57b1fe7d 	.word	0x57b1fe7d
 8006de0:	3ec71de3 	.word	0x3ec71de3
 8006de4:	19c161d5 	.word	0x19c161d5
 8006de8:	3f2a01a0 	.word	0x3f2a01a0
 8006dec:	1110f8a6 	.word	0x1110f8a6
 8006df0:	3f811111 	.word	0x3f811111

08006df4 <fabs>:
 8006df4:	ec51 0b10 	vmov	r0, r1, d0
 8006df8:	ee10 2a10 	vmov	r2, s0
 8006dfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e00:	ec43 2b10 	vmov	d0, r2, r3
 8006e04:	4770      	bx	lr
	...

08006e08 <floor>:
 8006e08:	ec51 0b10 	vmov	r0, r1, d0
 8006e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006e14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006e18:	2e13      	cmp	r6, #19
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	ee10 5a10 	vmov	r5, s0
 8006e20:	4680      	mov	r8, r0
 8006e22:	dc34      	bgt.n	8006e8e <floor+0x86>
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	da16      	bge.n	8006e56 <floor+0x4e>
 8006e28:	a335      	add	r3, pc, #212	; (adr r3, 8006f00 <floor+0xf8>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fa45 	bl	80002bc <__adddf3>
 8006e32:	2200      	movs	r2, #0
 8006e34:	2300      	movs	r3, #0
 8006e36:	f7f9 fe87 	bl	8000b48 <__aeabi_dcmpgt>
 8006e3a:	b148      	cbz	r0, 8006e50 <floor+0x48>
 8006e3c:	2c00      	cmp	r4, #0
 8006e3e:	da59      	bge.n	8006ef4 <floor+0xec>
 8006e40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006e44:	4a30      	ldr	r2, [pc, #192]	; (8006f08 <floor+0x100>)
 8006e46:	432b      	orrs	r3, r5
 8006e48:	2500      	movs	r5, #0
 8006e4a:	42ab      	cmp	r3, r5
 8006e4c:	bf18      	it	ne
 8006e4e:	4614      	movne	r4, r2
 8006e50:	4621      	mov	r1, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	e025      	b.n	8006ea2 <floor+0x9a>
 8006e56:	4f2d      	ldr	r7, [pc, #180]	; (8006f0c <floor+0x104>)
 8006e58:	4137      	asrs	r7, r6
 8006e5a:	ea01 0307 	and.w	r3, r1, r7
 8006e5e:	4303      	orrs	r3, r0
 8006e60:	d01f      	beq.n	8006ea2 <floor+0x9a>
 8006e62:	a327      	add	r3, pc, #156	; (adr r3, 8006f00 <floor+0xf8>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f7f9 fa28 	bl	80002bc <__adddf3>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f7f9 fe6a 	bl	8000b48 <__aeabi_dcmpgt>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d0eb      	beq.n	8006e50 <floor+0x48>
 8006e78:	2c00      	cmp	r4, #0
 8006e7a:	bfbe      	ittt	lt
 8006e7c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006e80:	fa43 f606 	asrlt.w	r6, r3, r6
 8006e84:	19a4      	addlt	r4, r4, r6
 8006e86:	ea24 0407 	bic.w	r4, r4, r7
 8006e8a:	2500      	movs	r5, #0
 8006e8c:	e7e0      	b.n	8006e50 <floor+0x48>
 8006e8e:	2e33      	cmp	r6, #51	; 0x33
 8006e90:	dd0b      	ble.n	8006eaa <floor+0xa2>
 8006e92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e96:	d104      	bne.n	8006ea2 <floor+0x9a>
 8006e98:	ee10 2a10 	vmov	r2, s0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	f7f9 fa0d 	bl	80002bc <__adddf3>
 8006ea2:	ec41 0b10 	vmov	d0, r0, r1
 8006ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eaa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006eae:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb2:	fa23 f707 	lsr.w	r7, r3, r7
 8006eb6:	4207      	tst	r7, r0
 8006eb8:	d0f3      	beq.n	8006ea2 <floor+0x9a>
 8006eba:	a311      	add	r3, pc, #68	; (adr r3, 8006f00 <floor+0xf8>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f7f9 f9fc 	bl	80002bc <__adddf3>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f7f9 fe3e 	bl	8000b48 <__aeabi_dcmpgt>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d0bf      	beq.n	8006e50 <floor+0x48>
 8006ed0:	2c00      	cmp	r4, #0
 8006ed2:	da02      	bge.n	8006eda <floor+0xd2>
 8006ed4:	2e14      	cmp	r6, #20
 8006ed6:	d103      	bne.n	8006ee0 <floor+0xd8>
 8006ed8:	3401      	adds	r4, #1
 8006eda:	ea25 0507 	bic.w	r5, r5, r7
 8006ede:	e7b7      	b.n	8006e50 <floor+0x48>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006ee6:	fa03 f606 	lsl.w	r6, r3, r6
 8006eea:	4435      	add	r5, r6
 8006eec:	4545      	cmp	r5, r8
 8006eee:	bf38      	it	cc
 8006ef0:	18e4      	addcc	r4, r4, r3
 8006ef2:	e7f2      	b.n	8006eda <floor+0xd2>
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	462c      	mov	r4, r5
 8006ef8:	e7aa      	b.n	8006e50 <floor+0x48>
 8006efa:	bf00      	nop
 8006efc:	f3af 8000 	nop.w
 8006f00:	8800759c 	.word	0x8800759c
 8006f04:	7e37e43c 	.word	0x7e37e43c
 8006f08:	bff00000 	.word	0xbff00000
 8006f0c:	000fffff 	.word	0x000fffff

08006f10 <scalbn>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	ec55 4b10 	vmov	r4, r5, d0
 8006f16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	b9aa      	cbnz	r2, 8006f4c <scalbn+0x3c>
 8006f20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f24:	4323      	orrs	r3, r4
 8006f26:	d03b      	beq.n	8006fa0 <scalbn+0x90>
 8006f28:	4b31      	ldr	r3, [pc, #196]	; (8006ff0 <scalbn+0xe0>)
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	ee10 0a10 	vmov	r0, s0
 8006f32:	f7f9 fb79 	bl	8000628 <__aeabi_dmul>
 8006f36:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <scalbn+0xe4>)
 8006f38:	429e      	cmp	r6, r3
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	da12      	bge.n	8006f66 <scalbn+0x56>
 8006f40:	a327      	add	r3, pc, #156	; (adr r3, 8006fe0 <scalbn+0xd0>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 fb6f 	bl	8000628 <__aeabi_dmul>
 8006f4a:	e009      	b.n	8006f60 <scalbn+0x50>
 8006f4c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006f50:	428a      	cmp	r2, r1
 8006f52:	d10c      	bne.n	8006f6e <scalbn+0x5e>
 8006f54:	ee10 2a10 	vmov	r2, s0
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	f7f9 f9ae 	bl	80002bc <__adddf3>
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	e01c      	b.n	8006fa0 <scalbn+0x90>
 8006f66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	3a36      	subs	r2, #54	; 0x36
 8006f6e:	4432      	add	r2, r6
 8006f70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006f74:	428a      	cmp	r2, r1
 8006f76:	dd0b      	ble.n	8006f90 <scalbn+0x80>
 8006f78:	ec45 4b11 	vmov	d1, r4, r5
 8006f7c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006fe8 <scalbn+0xd8>
 8006f80:	f000 f83c 	bl	8006ffc <copysign>
 8006f84:	a318      	add	r3, pc, #96	; (adr r3, 8006fe8 <scalbn+0xd8>)
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	ec51 0b10 	vmov	r0, r1, d0
 8006f8e:	e7da      	b.n	8006f46 <scalbn+0x36>
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	dd08      	ble.n	8006fa6 <scalbn+0x96>
 8006f94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fa0:	ec45 4b10 	vmov	d0, r4, r5
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006faa:	da0d      	bge.n	8006fc8 <scalbn+0xb8>
 8006fac:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006fb0:	429e      	cmp	r6, r3
 8006fb2:	ec45 4b11 	vmov	d1, r4, r5
 8006fb6:	dce1      	bgt.n	8006f7c <scalbn+0x6c>
 8006fb8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006fe0 <scalbn+0xd0>
 8006fbc:	f000 f81e 	bl	8006ffc <copysign>
 8006fc0:	a307      	add	r3, pc, #28	; (adr r3, 8006fe0 <scalbn+0xd0>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	e7e0      	b.n	8006f8a <scalbn+0x7a>
 8006fc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fcc:	3236      	adds	r2, #54	; 0x36
 8006fce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <scalbn+0xe8>)
 8006fde:	e7b2      	b.n	8006f46 <scalbn+0x36>
 8006fe0:	c2f8f359 	.word	0xc2f8f359
 8006fe4:	01a56e1f 	.word	0x01a56e1f
 8006fe8:	8800759c 	.word	0x8800759c
 8006fec:	7e37e43c 	.word	0x7e37e43c
 8006ff0:	43500000 	.word	0x43500000
 8006ff4:	ffff3cb0 	.word	0xffff3cb0
 8006ff8:	3c900000 	.word	0x3c900000

08006ffc <copysign>:
 8006ffc:	ec51 0b10 	vmov	r0, r1, d0
 8007000:	ee11 0a90 	vmov	r0, s3
 8007004:	ee10 2a10 	vmov	r2, s0
 8007008:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800700c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007010:	ea41 0300 	orr.w	r3, r1, r0
 8007014:	ec43 2b10 	vmov	d0, r2, r3
 8007018:	4770      	bx	lr
	...

0800701c <_init>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr

08007028 <_fini>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr
