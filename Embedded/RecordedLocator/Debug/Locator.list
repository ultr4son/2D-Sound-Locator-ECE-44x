
Locator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054fc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015720  080056c8  080056c8  000156c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ade8  0801ade8  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801ade8  0801ade8  0002ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801adf0  0801adf0  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801adf0  0801adf0  0002adf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801adf4  0801adf4  0002adf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801adf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007870  20000080  0801ae78  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200078f0  0801ae78  000378f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a6d  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024d8  00000000  00000000  00042b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000778  00000000  00000000  00044ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  00045770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219be  00000000  00000000  00045e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c16  00000000  00000000  0006783e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb9d3  00000000  00000000  00070454  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f4  00000000  00000000  0013be27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020cc  00000000  00000000  0013bf1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002d92  00000000  00000000  0013dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000080 	.word	0x20000080
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080056ac 	.word	0x080056ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000084 	.word	0x20000084
 8000204:	080056ac 	.word	0x080056ac

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b972 	b.w	8000ee0 <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9e08      	ldr	r6, [sp, #32]
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4688      	mov	r8, r1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d14b      	bne.n	8000cba <__udivmoddi4+0xa6>
 8000c22:	428a      	cmp	r2, r1
 8000c24:	4615      	mov	r5, r2
 8000c26:	d967      	bls.n	8000cf8 <__udivmoddi4+0xe4>
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	b14a      	cbz	r2, 8000c42 <__udivmoddi4+0x2e>
 8000c2e:	f1c2 0720 	rsb	r7, r2, #32
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3a:	4095      	lsls	r5, r2
 8000c3c:	ea47 0803 	orr.w	r8, r7, r3
 8000c40:	4094      	lsls	r4, r2
 8000c42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c4c:	fa1f fc85 	uxth.w	ip, r5
 8000c50:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c58:	fb07 f10c 	mul.w	r1, r7, ip
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x60>
 8000c60:	18eb      	adds	r3, r5, r3
 8000c62:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c66:	f080 811b 	bcs.w	8000ea0 <__udivmoddi4+0x28c>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 8118 	bls.w	8000ea0 <__udivmoddi4+0x28c>
 8000c70:	3f02      	subs	r7, #2
 8000c72:	442b      	add	r3, r5
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c88:	45a4      	cmp	ip, r4
 8000c8a:	d909      	bls.n	8000ca0 <__udivmoddi4+0x8c>
 8000c8c:	192c      	adds	r4, r5, r4
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	f080 8107 	bcs.w	8000ea4 <__udivmoddi4+0x290>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	f240 8104 	bls.w	8000ea4 <__udivmoddi4+0x290>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	442c      	add	r4, r5
 8000ca0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca4:	eba4 040c 	sub.w	r4, r4, ip
 8000ca8:	2700      	movs	r7, #0
 8000caa:	b11e      	cbz	r6, 8000cb4 <__udivmoddi4+0xa0>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xbe>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f000 80eb 	beq.w	8000e9a <__udivmoddi4+0x286>
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e9c6 0100 	strd	r0, r1, [r6]
 8000cca:	4638      	mov	r0, r7
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f783 	clz	r7, r3
 8000cd6:	2f00      	cmp	r7, #0
 8000cd8:	d147      	bne.n	8000d6a <__udivmoddi4+0x156>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd0>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80fa 	bhi.w	8000ed8 <__udivmoddi4+0x2c4>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	4698      	mov	r8, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa0>
 8000cf2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa0>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xe8>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 808f 	bne.w	8000e24 <__udivmoddi4+0x210>
 8000d06:	1b49      	subs	r1, r1, r5
 8000d08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0c:	fa1f f885 	uxth.w	r8, r5
 8000d10:	2701      	movs	r7, #1
 8000d12:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d16:	0c23      	lsrs	r3, r4, #16
 8000d18:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d20:	fb08 f10c 	mul.w	r1, r8, ip
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x124>
 8000d28:	18eb      	adds	r3, r5, r3
 8000d2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x122>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	f200 80cd 	bhi.w	8000ed0 <__udivmoddi4+0x2bc>
 8000d36:	4684      	mov	ip, r0
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	b2a3      	uxth	r3, r4
 8000d3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d40:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d48:	fb08 f800 	mul.w	r8, r8, r0
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x14c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x14a>
 8000d58:	45a0      	cmp	r8, r4
 8000d5a:	f200 80b6 	bhi.w	8000eca <__udivmoddi4+0x2b6>
 8000d5e:	4618      	mov	r0, r3
 8000d60:	eba4 0408 	sub.w	r4, r4, r8
 8000d64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d68:	e79f      	b.n	8000caa <__udivmoddi4+0x96>
 8000d6a:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6e:	40bb      	lsls	r3, r7
 8000d70:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d74:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d78:	fa01 f407 	lsl.w	r4, r1, r7
 8000d7c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d80:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d84:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d88:	4325      	orrs	r5, r4
 8000d8a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8e:	0c2c      	lsrs	r4, r5, #16
 8000d90:	fb08 3319 	mls	r3, r8, r9, r3
 8000d94:	fa1f fa8e 	uxth.w	sl, lr
 8000d98:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d9c:	fb09 f40a 	mul.w	r4, r9, sl
 8000da0:	429c      	cmp	r4, r3
 8000da2:	fa02 f207 	lsl.w	r2, r2, r7
 8000da6:	fa00 f107 	lsl.w	r1, r0, r7
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b0>
 8000dac:	eb1e 0303 	adds.w	r3, lr, r3
 8000db0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db4:	f080 8087 	bcs.w	8000ec6 <__udivmoddi4+0x2b2>
 8000db8:	429c      	cmp	r4, r3
 8000dba:	f240 8084 	bls.w	8000ec6 <__udivmoddi4+0x2b2>
 8000dbe:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc2:	4473      	add	r3, lr
 8000dc4:	1b1b      	subs	r3, r3, r4
 8000dc6:	b2ad      	uxth	r5, r5
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd8:	45a2      	cmp	sl, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1da>
 8000ddc:	eb1e 0404 	adds.w	r4, lr, r4
 8000de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de4:	d26b      	bcs.n	8000ebe <__udivmoddi4+0x2aa>
 8000de6:	45a2      	cmp	sl, r4
 8000de8:	d969      	bls.n	8000ebe <__udivmoddi4+0x2aa>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4474      	add	r4, lr
 8000dee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df2:	fba0 8902 	umull	r8, r9, r0, r2
 8000df6:	eba4 040a 	sub.w	r4, r4, sl
 8000dfa:	454c      	cmp	r4, r9
 8000dfc:	46c2      	mov	sl, r8
 8000dfe:	464b      	mov	r3, r9
 8000e00:	d354      	bcc.n	8000eac <__udivmoddi4+0x298>
 8000e02:	d051      	beq.n	8000ea8 <__udivmoddi4+0x294>
 8000e04:	2e00      	cmp	r6, #0
 8000e06:	d069      	beq.n	8000edc <__udivmoddi4+0x2c8>
 8000e08:	ebb1 050a 	subs.w	r5, r1, sl
 8000e0c:	eb64 0403 	sbc.w	r4, r4, r3
 8000e10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e14:	40fd      	lsrs	r5, r7
 8000e16:	40fc      	lsrs	r4, r7
 8000e18:	ea4c 0505 	orr.w	r5, ip, r5
 8000e1c:	e9c6 5400 	strd	r5, r4, [r6]
 8000e20:	2700      	movs	r7, #0
 8000e22:	e747      	b.n	8000cb4 <__udivmoddi4+0xa0>
 8000e24:	f1c2 0320 	rsb	r3, r2, #32
 8000e28:	fa20 f703 	lsr.w	r7, r0, r3
 8000e2c:	4095      	lsls	r5, r2
 8000e2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000e32:	fa21 f303 	lsr.w	r3, r1, r3
 8000e36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3a:	4338      	orrs	r0, r7
 8000e3c:	0c01      	lsrs	r1, r0, #16
 8000e3e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e42:	fa1f f885 	uxth.w	r8, r5
 8000e46:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb07 f308 	mul.w	r3, r7, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x256>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e60:	d22f      	bcs.n	8000ec2 <__udivmoddi4+0x2ae>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d92d      	bls.n	8000ec2 <__udivmoddi4+0x2ae>
 8000e66:	3f02      	subs	r7, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1acb      	subs	r3, r1, r3
 8000e6c:	b281      	uxth	r1, r0
 8000e6e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e72:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7a:	fb00 f308 	mul.w	r3, r0, r8
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x27e>
 8000e82:	1869      	adds	r1, r5, r1
 8000e84:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e88:	d217      	bcs.n	8000eba <__udivmoddi4+0x2a6>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d915      	bls.n	8000eba <__udivmoddi4+0x2a6>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4429      	add	r1, r5
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e98:	e73b      	b.n	8000d12 <__udivmoddi4+0xfe>
 8000e9a:	4637      	mov	r7, r6
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e709      	b.n	8000cb4 <__udivmoddi4+0xa0>
 8000ea0:	4607      	mov	r7, r0
 8000ea2:	e6e7      	b.n	8000c74 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fb      	b.n	8000ca0 <__udivmoddi4+0x8c>
 8000ea8:	4541      	cmp	r1, r8
 8000eaa:	d2ab      	bcs.n	8000e04 <__udivmoddi4+0x1f0>
 8000eac:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb0:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	e7a4      	b.n	8000e04 <__udivmoddi4+0x1f0>
 8000eba:	4660      	mov	r0, ip
 8000ebc:	e7e9      	b.n	8000e92 <__udivmoddi4+0x27e>
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	e795      	b.n	8000dee <__udivmoddi4+0x1da>
 8000ec2:	4667      	mov	r7, ip
 8000ec4:	e7d1      	b.n	8000e6a <__udivmoddi4+0x256>
 8000ec6:	4681      	mov	r9, r0
 8000ec8:	e77c      	b.n	8000dc4 <__udivmoddi4+0x1b0>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	442c      	add	r4, r5
 8000ece:	e747      	b.n	8000d60 <__udivmoddi4+0x14c>
 8000ed0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed4:	442b      	add	r3, r5
 8000ed6:	e72f      	b.n	8000d38 <__udivmoddi4+0x124>
 8000ed8:	4638      	mov	r0, r7
 8000eda:	e708      	b.n	8000cee <__udivmoddi4+0xda>
 8000edc:	4637      	mov	r7, r6
 8000ede:	e6e9      	b.n	8000cb4 <__udivmoddi4+0xa0>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b08b      	sub	sp, #44	; 0x2c
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f000 fc73 	bl	80017d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_cfft_init_f32(&fft_instance, SAMPLES);
 8000ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef6:	4890      	ldr	r0, [pc, #576]	; (8001138 <main+0x250>)
 8000ef8:	f002 f996 	bl	8003228 <arm_cfft_init_f32>
//  int idx = (int)(1.0 / (SIN_SAMPLES / SAMPLES));

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f92e 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 f9c4 	bl	800128c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f04:	f000 f998 	bl	8001238 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(int i = 0; i < SAMPLES; i++) {
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0c:	e089      	b.n	8001022 <main+0x13a>
	  ADC_top[i] = ADC_right[i] = (uint32_t) ((sin(2 * M_PI * SIN_FREQUENCY * ((double)i / SIN_SAMPLING_RATE)) + 1) * (double) ((1023 + 1) / 2));
 8000f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f10:	f7ff facc 	bl	80004ac <__aeabi_i2d>
 8000f14:	a382      	add	r3, pc, #520	; (adr r3, 8001120 <main+0x238>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fc5b 	bl	80007d4 <__aeabi_ddiv>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460c      	mov	r4, r1
 8000f22:	4618      	mov	r0, r3
 8000f24:	4621      	mov	r1, r4
 8000f26:	a380      	add	r3, pc, #512	; (adr r3, 8001128 <main+0x240>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb28 	bl	8000580 <__aeabi_dmul>
 8000f30:	4603      	mov	r3, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	ec44 3b17 	vmov	d7, r3, r4
 8000f38:	eeb0 0a47 	vmov.f32	s0, s14
 8000f3c:	eef0 0a67 	vmov.f32	s1, s15
 8000f40:	f003 fb52 	bl	80045e8 <sin>
 8000f44:	ec51 0b10 	vmov	r0, r1, d0
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	4b7b      	ldr	r3, [pc, #492]	; (800113c <main+0x254>)
 8000f4e:	f7ff f961 	bl	8000214 <__adddf3>
 8000f52:	4603      	mov	r3, r0
 8000f54:	460c      	mov	r4, r1
 8000f56:	4618      	mov	r0, r3
 8000f58:	4621      	mov	r1, r4
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000f62:	f7ff fb0d 	bl	8000580 <__aeabi_dmul>
 8000f66:	4603      	mov	r3, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	f7ff fdc9 	bl	8000b04 <__aeabi_d2uiz>
 8000f72:	4601      	mov	r1, r0
 8000f74:	4a72      	ldr	r2, [pc, #456]	; (8001140 <main+0x258>)
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f7c:	4a70      	ldr	r2, [pc, #448]	; (8001140 <main+0x258>)
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f84:	496f      	ldr	r1, [pc, #444]	; (8001144 <main+0x25c>)
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  ADC_bottom[i] = ADC_left[i] = (uint32_t) ((sin(2 * M_PI * SIN_FREQUENCY * ((double)i / SIN_SAMPLING_RATE) + M_PI / 32) + 1) * (double) ((1023 + 1) / 2));
 8000f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f8e:	f7ff fa8d 	bl	80004ac <__aeabi_i2d>
 8000f92:	a363      	add	r3, pc, #396	; (adr r3, 8001120 <main+0x238>)
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	f7ff fc1c 	bl	80007d4 <__aeabi_ddiv>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	460c      	mov	r4, r1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	4621      	mov	r1, r4
 8000fa4:	a360      	add	r3, pc, #384	; (adr r3, 8001128 <main+0x240>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f7ff fae9 	bl	8000580 <__aeabi_dmul>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460c      	mov	r4, r1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	a35e      	add	r3, pc, #376	; (adr r3, 8001130 <main+0x248>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff f92a 	bl	8000214 <__adddf3>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	ec44 3b17 	vmov	d7, r3, r4
 8000fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fcc:	eef0 0a67 	vmov.f32	s1, s15
 8000fd0:	f003 fb0a 	bl	80045e8 <sin>
 8000fd4:	ec51 0b10 	vmov	r0, r1, d0
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b57      	ldr	r3, [pc, #348]	; (800113c <main+0x254>)
 8000fde:	f7ff f919 	bl	8000214 <__adddf3>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000ff2:	f7ff fac5 	bl	8000580 <__aeabi_dmul>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460c      	mov	r4, r1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	f7ff fd81 	bl	8000b04 <__aeabi_d2uiz>
 8001002:	4601      	mov	r1, r0
 8001004:	4a50      	ldr	r2, [pc, #320]	; (8001148 <main+0x260>)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800100c:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <main+0x260>)
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001014:	494d      	ldr	r1, [pc, #308]	; (800114c <main+0x264>)
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < SAMPLES; i++) {
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	3301      	adds	r3, #1
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001028:	f6ff af71 	blt.w	8000f0e <main+0x26>

  while (1)
  {

	  uint8_t command;
	  HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &command, 1, 0);
 800102c:	f107 010b 	add.w	r1, r7, #11
 8001030:	2300      	movs	r3, #0
 8001032:	2201      	movs	r2, #1
 8001034:	4846      	ldr	r0, [pc, #280]	; (8001150 <main+0x268>)
 8001036:	f001 fc1a 	bl	800286e <HAL_UART_Receive>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  if(status == HAL_UART_ERROR_NONE && command == 3) {
 8001040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001044:	2b00      	cmp	r3, #0
 8001046:	d136      	bne.n	80010b6 <main+0x1ce>
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d133      	bne.n	80010b6 <main+0x1ce>
		  uint8_t fLSetting[sizeof(uint32_t)];
		  if(HAL_UART_Receive(&huart2, fLSetting, sizeof(uint32_t), 0) == HAL_UART_ERROR_NONE) {
 800104e:	1d39      	adds	r1, r7, #4
 8001050:	2300      	movs	r3, #0
 8001052:	2204      	movs	r2, #4
 8001054:	483e      	ldr	r0, [pc, #248]	; (8001150 <main+0x268>)
 8001056:	f001 fc0a 	bl	800286e <HAL_UART_Receive>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d110      	bne.n	8001082 <main+0x19a>
			  fL = fLSetting[3] << 24 | fLSetting[2] << 16 | fLSetting[1] << 8 | fLSetting[0];
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	061a      	lsls	r2, r3, #24
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	431a      	orrs	r2, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	4313      	orrs	r3, r2
 8001070:	793a      	ldrb	r2, [r7, #4]
 8001072:	4313      	orrs	r3, r2
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107c:	4b35      	ldr	r3, [pc, #212]	; (8001154 <main+0x26c>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
		  }


		  uint8_t fHSetting[sizeof(uint32_t)];
		  if(HAL_UART_Receive(&huart2, fHSetting, sizeof(uint32_t), 0) == HAL_UART_ERROR_NONE) {
 8001082:	4639      	mov	r1, r7
 8001084:	2300      	movs	r3, #0
 8001086:	2204      	movs	r2, #4
 8001088:	4831      	ldr	r0, [pc, #196]	; (8001150 <main+0x268>)
 800108a:	f001 fbf0 	bl	800286e <HAL_UART_Receive>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d110      	bne.n	80010b6 <main+0x1ce>
			  fL = fHSetting[3] << 24 | fHSetting[2] << 16 | fHSetting[1] << 8 | fHSetting[0];
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	061a      	lsls	r2, r3, #24
 8001098:	78bb      	ldrb	r3, [r7, #2]
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	431a      	orrs	r2, r3
 800109e:	787b      	ldrb	r3, [r7, #1]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	4313      	orrs	r3, r2
 80010a4:	783a      	ldrb	r2, [r7, #0]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <main+0x26c>)
 80010b2:	edc3 7a00 	vstr	s15, [r3]
		  }


	  }
	  if(status == HAL_UART_ERROR_NONE && command == 5) {
 80010b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <main+0x1e2>
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d102      	bne.n	80010ca <main+0x1e2>
		  startLocating = 1;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <main+0x270>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
	  }
	  if(status == HAL_UART_ERROR_NONE && command == 6) {
 80010ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <main+0x1f6>
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d102      	bne.n	80010de <main+0x1f6>
		  startLocating = 0;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <main+0x270>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	  }

	  if(startLocating) {
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <main+0x270>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0a2      	beq.n	800102c <main+0x144>

		  uint32_t start = HAL_GetTick();
 80010e6:	f000 fbdd 	bl	80018a4 <HAL_GetTick>
 80010ea:	61f8      	str	r0, [r7, #28]

		  float32_t diff_tb = do_fft(ADC_top, ADC_bottom);
 80010ec:	4917      	ldr	r1, [pc, #92]	; (800114c <main+0x264>)
 80010ee:	4815      	ldr	r0, [pc, #84]	; (8001144 <main+0x25c>)
 80010f0:	f000 f936 	bl	8001360 <do_fft>
 80010f4:	ed87 0a06 	vstr	s0, [r7, #24]
		  float32_t diff_lr = do_fft(ADC_right, ADC_left);
 80010f8:	4913      	ldr	r1, [pc, #76]	; (8001148 <main+0x260>)
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <main+0x258>)
 80010fc:	f000 f930 	bl	8001360 <do_fft>
 8001100:	ed87 0a05 	vstr	s0, [r7, #20]

		  uint32_t end = HAL_GetTick();
 8001104:	f000 fbce 	bl	80018a4 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

		  uint32_t elapsed = end - start;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	60fb      	str	r3, [r7, #12]
		  elapsed++;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
  {
 8001118:	e788      	b.n	800102c <main+0x144>
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w
 8001120:	00000000 	.word	0x00000000
 8001124:	40c19400 	.word	0x40c19400
 8001128:	2955385e 	.word	0x2955385e
 800112c:	405f6a7a 	.word	0x405f6a7a
 8001130:	54442d18 	.word	0x54442d18
 8001134:	3fb921fb 	.word	0x3fb921fb
 8001138:	200068dc 	.word	0x200068dc
 800113c:	3ff00000 	.word	0x3ff00000
 8001140:	2000109c 	.word	0x2000109c
 8001144:	2000209c 	.word	0x2000209c
 8001148:	2000009c 	.word	0x2000009c
 800114c:	200068ec 	.word	0x200068ec
 8001150:	2000689c 	.word	0x2000689c
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	; 0x50
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2234      	movs	r2, #52	; 0x34
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f888 	bl	8004280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <SystemClock_Config+0xd4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a29      	ldr	r2, [pc, #164]	; (8001230 <SystemClock_Config+0xd4>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <SystemClock_Config+0xd4>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <SystemClock_Config+0xd8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a8:	4a22      	ldr	r2, [pc, #136]	; (8001234 <SystemClock_Config+0xd8>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <SystemClock_Config+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d0:	2308      	movs	r3, #8
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80011d4:	2354      	movs	r3, #84	; 0x54
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 f899 	bl	8002320 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f4:	f000 fa12 	bl	800161c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fdc8 	bl	8001dac <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001222:	f000 f9fb 	bl	800161c <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	; 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_USART2_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001270:	f001 fab0 	bl	80027d4 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f9cf 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000689c 	.word	0x2000689c
 8001288:	40004400 	.word	0x40004400

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_GPIO_Init+0xc0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a28      	ldr	r2, [pc, #160]	; (800134c <MX_GPIO_Init+0xc0>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_GPIO_Init+0xc0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_GPIO_Init+0xc0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a21      	ldr	r2, [pc, #132]	; (800134c <MX_GPIO_Init+0xc0>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_GPIO_Init+0xc0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_GPIO_Init+0xc0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <MX_GPIO_Init+0xc0>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_GPIO_Init+0xc0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_GPIO_Init+0xc0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <MX_GPIO_Init+0xc0>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_GPIO_Init+0xc0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_GPIO_Init+0xc4>)
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <MX_GPIO_Init+0xc8>)
 8001328:	f000 fbae 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001330:	2303      	movs	r3, #3
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_GPIO_Init+0xcc>)
 8001340:	f000 fba2 	bl	8001a88 <HAL_GPIO_Init>

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	10210000 	.word	0x10210000
 8001354:	40020800 	.word	0x40020800
 8001358:	40020000 	.word	0x40020000
 800135c:	00000000 	.word	0x00000000

08001360 <do_fft>:
float32_t b_float[SAMPLES];
float32_t a_mag[SAMPLES / 2];
float32_t a_phase[SAMPLES / 2];
float32_t b_phase[SAMPLES / 2];

float32_t do_fft(uint32_t* ADC_a, uint32_t* ADC_b) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	memset(a_float, 0, SAMPLES * sizeof(float32_t));
 800136a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800136e:	2100      	movs	r1, #0
 8001370:	4881      	ldr	r0, [pc, #516]	; (8001578 <do_fft+0x218>)
 8001372:	f002 ff85 	bl	8004280 <memset>
	memset(b_float, 0, SAMPLES  * sizeof(float32_t));
 8001376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137a:	2100      	movs	r1, #0
 800137c:	487f      	ldr	r0, [pc, #508]	; (800157c <do_fft+0x21c>)
 800137e:	f002 ff7f 	bl	8004280 <memset>
	memset(a_mag, 0, SAMPLES / 2  * sizeof(float32_t));
 8001382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001386:	2100      	movs	r1, #0
 8001388:	487d      	ldr	r0, [pc, #500]	; (8001580 <do_fft+0x220>)
 800138a:	f002 ff79 	bl	8004280 <memset>
	memset(a_phase, 0, SAMPLES / 2  * sizeof(float32_t));
 800138e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001392:	2100      	movs	r1, #0
 8001394:	487b      	ldr	r0, [pc, #492]	; (8001584 <do_fft+0x224>)
 8001396:	f002 ff73 	bl	8004280 <memset>
	memset(b_phase, 0, SAMPLES / 2  * sizeof(float32_t));
 800139a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139e:	2100      	movs	r1, #0
 80013a0:	4879      	ldr	r0, [pc, #484]	; (8001588 <do_fft+0x228>)
 80013a2:	f002 ff6d 	bl	8004280 <memset>
	to_float(ADC_a, a_float, SAMPLES);
 80013a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013aa:	4973      	ldr	r1, [pc, #460]	; (8001578 <do_fft+0x218>)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f8f7 	bl	80015a0 <to_float>
	to_float(ADC_b, b_float, SAMPLES);
 80013b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b6:	4971      	ldr	r1, [pc, #452]	; (800157c <do_fft+0x21c>)
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f000 f8f1 	bl	80015a0 <to_float>

	arm_cfft_init_f32(&fft_instance, SAMPLES);
 80013be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c2:	4872      	ldr	r0, [pc, #456]	; (800158c <do_fft+0x22c>)
 80013c4:	f001 ff30 	bl	8003228 <arm_cfft_init_f32>
	arm_cfft_f32(&fft_instance, a_float, 0, 1);
 80013c8:	2301      	movs	r3, #1
 80013ca:	2200      	movs	r2, #0
 80013cc:	496a      	ldr	r1, [pc, #424]	; (8001578 <do_fft+0x218>)
 80013ce:	486f      	ldr	r0, [pc, #444]	; (800158c <do_fft+0x22c>)
 80013d0:	f002 faa4 	bl	800391c <arm_cfft_f32>
	arm_cmplx_mag_f32(a_float, a_mag, SAMPLES / 2);
 80013d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d8:	4969      	ldr	r1, [pc, #420]	; (8001580 <do_fft+0x220>)
 80013da:	4867      	ldr	r0, [pc, #412]	; (8001578 <do_fft+0x218>)
 80013dc:	f002 fb36 	bl	8003a4c <arm_cmplx_mag_f32>

	//calculate phase for each bin
	for(int i = 0; i < SAMPLES; i+=2) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	e029      	b.n	800143a <do_fft+0xda>
		a_phase[i/2] = atan(a_float[i + 1] / a_float[i]);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a63      	ldr	r2, [pc, #396]	; (8001578 <do_fft+0x218>)
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4a60      	ldr	r2, [pc, #384]	; (8001578 <do_fft+0x218>)
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001404:	ee16 0a90 	vmov	r0, s13
 8001408:	f7ff f862 	bl	80004d0 <__aeabi_f2d>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	ec44 3b10 	vmov	d0, r3, r4
 8001414:	f002 ff3c 	bl	8004290 <atan>
 8001418:	ec51 0b10 	vmov	r0, r1, d0
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	0fda      	lsrs	r2, r3, #31
 8001420:	4413      	add	r3, r2
 8001422:	105b      	asrs	r3, r3, #1
 8001424:	461c      	mov	r4, r3
 8001426:	f7ff fb8d 	bl	8000b44 <__aeabi_d2f>
 800142a:	4601      	mov	r1, r0
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <do_fft+0x224>)
 800142e:	00a3      	lsls	r3, r4, #2
 8001430:	4413      	add	r3, r2
 8001432:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < SAMPLES; i+=2) {
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	3302      	adds	r3, #2
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001440:	dbd1      	blt.n	80013e6 <do_fft+0x86>
	}

	arm_cfft_init_f32(&fft_instance, SAMPLES);
 8001442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001446:	4851      	ldr	r0, [pc, #324]	; (800158c <do_fft+0x22c>)
 8001448:	f001 feee 	bl	8003228 <arm_cfft_init_f32>
	arm_cfft_f32(&fft_instance, b_float, 0, 1);
 800144c:	2301      	movs	r3, #1
 800144e:	2200      	movs	r2, #0
 8001450:	494a      	ldr	r1, [pc, #296]	; (800157c <do_fft+0x21c>)
 8001452:	484e      	ldr	r0, [pc, #312]	; (800158c <do_fft+0x22c>)
 8001454:	f002 fa62 	bl	800391c <arm_cfft_f32>

	//calculate phase for each bin
	for(int i = 0; i < SAMPLES; i+=2) {
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
 800145c:	e029      	b.n	80014b2 <do_fft+0x152>
		b_phase[i/2] = atan(b_float[i + 1] / b_float[i]);
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	3301      	adds	r3, #1
 8001462:	4a46      	ldr	r2, [pc, #280]	; (800157c <do_fft+0x21c>)
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	4a43      	ldr	r2, [pc, #268]	; (800157c <do_fft+0x21c>)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800147c:	ee16 0a90 	vmov	r0, s13
 8001480:	f7ff f826 	bl	80004d0 <__aeabi_f2d>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	ec44 3b10 	vmov	d0, r3, r4
 800148c:	f002 ff00 	bl	8004290 <atan>
 8001490:	ec51 0b10 	vmov	r0, r1, d0
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	0fda      	lsrs	r2, r3, #31
 8001498:	4413      	add	r3, r2
 800149a:	105b      	asrs	r3, r3, #1
 800149c:	461c      	mov	r4, r3
 800149e:	f7ff fb51 	bl	8000b44 <__aeabi_d2f>
 80014a2:	4601      	mov	r1, r0
 80014a4:	4a38      	ldr	r2, [pc, #224]	; (8001588 <do_fft+0x228>)
 80014a6:	00a3      	lsls	r3, r4, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < SAMPLES; i+=2) {
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	3302      	adds	r3, #2
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	dbd1      	blt.n	800145e <do_fft+0xfe>
	}

	float32_t max;
	uint32_t index;
	arm_max_f32(a_mag, SAMPLES / 2, &max, &index);
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c6:	482e      	ldr	r0, [pc, #184]	; (8001580 <do_fft+0x220>)
 80014c8:	f001 fe3e 	bl	8003148 <arm_max_f32>

	int frequency = (index * SIN_SAMPLING_RATE) / SAMPLES / 2;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f242 3228 	movw	r2, #9000	; 0x2328
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	0adb      	lsrs	r3, r3, #11
 80014d8:	61fb      	str	r3, [r7, #28]
	if(frequency >= fL && frequency <= fH) {
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <do_fft+0x230>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	db35      	blt.n	8001560 <do_fft+0x200>
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <do_fft+0x234>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d828      	bhi.n	8001560 <do_fft+0x200>
		float32_t a_phase_max = a_phase[index];
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <do_fft+0x224>)
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
		float32_t b_phase_max = b_phase[index];
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4a1a      	ldr	r2, [pc, #104]	; (8001588 <do_fft+0x228>)
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	617b      	str	r3, [r7, #20]
		float32_t tb_t_diff = ((a_phase_max - b_phase_max) * SAMPLES)/(2 * M_PI);
 8001526:	ed97 7a06 	vldr	s14, [r7, #24]
 800152a:	edd7 7a05 	vldr	s15, [r7, #20]
 800152e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001532:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001598 <do_fft+0x238>
 8001536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7fe ffc7 	bl	80004d0 <__aeabi_f2d>
 8001542:	a30b      	add	r3, pc, #44	; (adr r3, 8001570 <do_fft+0x210>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f944 	bl	80007d4 <__aeabi_ddiv>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	f7ff faf6 	bl	8000b44 <__aeabi_d2f>
 8001558:	4603      	mov	r3, r0
 800155a:	613b      	str	r3, [r7, #16]
		return tb_t_diff;
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	e000      	b.n	8001562 <do_fft+0x202>
	}
	return NAN;
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <do_fft+0x23c>)
 8001562:	ee07 3a90 	vmov	s15, r3

}
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	372c      	adds	r7, #44	; 0x2c
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	54442d18 	.word	0x54442d18
 8001574:	401921fb 	.word	0x401921fb
 8001578:	2000409c 	.word	0x2000409c
 800157c:	2000309c 	.word	0x2000309c
 8001580:	2000589c 	.word	0x2000589c
 8001584:	2000509c 	.word	0x2000509c
 8001588:	2000609c 	.word	0x2000609c
 800158c:	200068dc 	.word	0x200068dc
 8001590:	20000000 	.word	0x20000000
 8001594:	20000004 	.word	0x20000004
 8001598:	44800000 	.word	0x44800000
 800159c:	7fc00000 	.word	0x7fc00000

080015a0 <to_float>:

void to_float(uint32_t* int_array, float32_t* float_array, uint32_t length) {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]

	for(int i = 0; i < length; i++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e02a      	b.n	8001608 <to_float+0x68>
		float_array[i] = ((float32_t)int_array[i] / (1024.0 / 2)) - 1;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c4:	ee17 0a90 	vmov	r0, s15
 80015c8:	f7fe ff82 	bl	80004d0 <__aeabi_f2d>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80015d4:	f7ff f8fe 	bl	80007d4 <__aeabi_ddiv>
 80015d8:	4603      	mov	r3, r0
 80015da:	460c      	mov	r4, r1
 80015dc:	4618      	mov	r0, r3
 80015de:	4621      	mov	r1, r4
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <to_float+0x78>)
 80015e6:	f7fe fe13 	bl	8000210 <__aeabi_dsub>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4618      	mov	r0, r3
 80015f0:	4621      	mov	r1, r4
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	18d4      	adds	r4, r2, r3
 80015fa:	f7ff faa3 	bl	8000b44 <__aeabi_d2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < length; i++) {
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8d0      	bhi.n	80015b2 <to_float+0x12>
	}
}
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	3ff00000 	.word	0x3ff00000

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001622:	e7fe      	b.n	8001622 <Error_Handler+0x6>

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_MspInit+0x4c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x4c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001662:	2007      	movs	r0, #7
 8001664:	f000 f9dc 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_UART_MspInit+0x84>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12b      	bne.n	80016ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_UART_MspInit+0x88>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ce:	230c      	movs	r3, #12
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016de:	2307      	movs	r3, #7
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_UART_MspInit+0x8c>)
 80016ea:	f000 f9cd 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40004400 	.word	0x40004400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 f894 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <SystemInit+0x28>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <SystemInit+0x28>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SystemInit+0x28>)
 800176e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001772:	609a      	str	r2, [r3, #8]
#endif
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001788:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800178a:	e003      	b.n	8001794 <LoopCopyDataInit>

0800178c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800178e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001790:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001792:	3104      	adds	r1, #4

08001794 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001798:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800179a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800179c:	d3f6      	bcc.n	800178c <CopyDataInit>
  ldr  r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017a0:	e002      	b.n	80017a8 <LoopFillZerobss>

080017a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017a4:	f842 3b04 	str.w	r3, [r2], #4

080017a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017ac:	d3f9      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ae:	f7ff ffd3 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f002 fd41 	bl	8004238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff fb97 	bl	8000ee8 <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017c0:	0801adf8 	.word	0x0801adf8
  ldr  r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017c8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80017cc:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80017d0:	200078f0 	.word	0x200078f0

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f90d 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff ff0a 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f917 	bl	8001a6e <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f8ed 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000000c 	.word	0x2000000c
 8001874:	20000014 	.word	0x20000014
 8001878:	20000010 	.word	0x20000010

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000014 	.word	0x20000014
 80018a0:	200078ec 	.word	0x200078ec

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200078ec 	.word	0x200078ec

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff47 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff5c 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffb0 	bl	80019dc <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e165      	b.n	8001d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8154 	bne.w	8001d6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_GPIO_Init+0x5a>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad6:	2b11      	cmp	r3, #17
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d130      	bne.n	8001b44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0xfc>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b12      	cmp	r3, #18
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80ae 	beq.w	8001d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b5c      	ldr	r3, [pc, #368]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a5b      	ldr	r2, [pc, #364]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2a:	4a57      	ldr	r2, [pc, #348]	; (8001d88 <HAL_GPIO_Init+0x300>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4e      	ldr	r2, [pc, #312]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d025      	beq.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4d      	ldr	r2, [pc, #308]	; (8001d90 <HAL_GPIO_Init+0x308>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01f      	beq.n	8001c9e <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4c      	ldr	r2, [pc, #304]	; (8001d94 <HAL_GPIO_Init+0x30c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d019      	beq.n	8001c9a <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_GPIO_Init+0x310>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <HAL_GPIO_Init+0x314>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00d      	beq.n	8001c92 <HAL_GPIO_Init+0x20a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a49      	ldr	r2, [pc, #292]	; (8001da0 <HAL_GPIO_Init+0x318>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x206>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x31c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_GPIO_Init+0x202>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x21c>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4934      	ldr	r1, [pc, #208]	; (8001d88 <HAL_GPIO_Init+0x300>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce6:	4a30      	ldr	r2, [pc, #192]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d64:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae96 	bls.w	8001aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3724      	adds	r7, #36	; 0x24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0cc      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d90c      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0b8      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e00:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e18:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	494d      	ldr	r1, [pc, #308]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d044      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d119      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d003      	beq.n	8001e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6a:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e06f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e067      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4934      	ldr	r1, [pc, #208]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e9c:	f7ff fd02 	bl	80018a4 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff fcfe 	bl	80018a4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e04f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1eb      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d20c      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e032      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4916      	ldr	r1, [pc, #88]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	490e      	ldr	r1, [pc, #56]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f32:	f000 f855 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f36:	4601      	mov	r1, r0
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	fa21 f303 	lsr.w	r3, r1, r3
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fc62 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	080056c8 	.word	0x080056c8
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	20000010 	.word	0x20000010

08001f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	2000000c 	.word	0x2000000c

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f98:	4601      	mov	r1, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a9b      	lsrs	r3, r3, #10
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	080056d8 	.word	0x080056d8

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fbc:	f7ff ffdc 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4601      	mov	r1, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0b5b      	lsrs	r3, r3, #13
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	080056d8 	.word	0x080056d8

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ffa:	4bc6      	ldr	r3, [pc, #792]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b0c      	cmp	r3, #12
 8002004:	f200 817e 	bhi.w	8002304 <HAL_RCC_GetSysClockFreq+0x324>
 8002008:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <HAL_RCC_GetSysClockFreq+0x30>)
 800200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200e:	bf00      	nop
 8002010:	08002045 	.word	0x08002045
 8002014:	08002305 	.word	0x08002305
 8002018:	08002305 	.word	0x08002305
 800201c:	08002305 	.word	0x08002305
 8002020:	0800204b 	.word	0x0800204b
 8002024:	08002305 	.word	0x08002305
 8002028:	08002305 	.word	0x08002305
 800202c:	08002305 	.word	0x08002305
 8002030:	08002051 	.word	0x08002051
 8002034:	08002305 	.word	0x08002305
 8002038:	08002305 	.word	0x08002305
 800203c:	08002305 	.word	0x08002305
 8002040:	080021ad 	.word	0x080021ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4bb4      	ldr	r3, [pc, #720]	; (8002318 <HAL_RCC_GetSysClockFreq+0x338>)
 8002046:	613b      	str	r3, [r7, #16]
       break;
 8002048:	e15f      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800204a:	4bb4      	ldr	r3, [pc, #720]	; (800231c <HAL_RCC_GetSysClockFreq+0x33c>)
 800204c:	613b      	str	r3, [r7, #16]
      break;
 800204e:	e15c      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002050:	4bb0      	ldr	r3, [pc, #704]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002058:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205a:	4bae      	ldr	r3, [pc, #696]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d04a      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002066:	4bab      	ldr	r3, [pc, #684]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	f04f 0400 	mov.w	r4, #0
 8002070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	ea03 0501 	and.w	r5, r3, r1
 800207c:	ea04 0602 	and.w	r6, r4, r2
 8002080:	4629      	mov	r1, r5
 8002082:	4632      	mov	r2, r6
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	f04f 0400 	mov.w	r4, #0
 800208c:	0154      	lsls	r4, r2, #5
 800208e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002092:	014b      	lsls	r3, r1, #5
 8002094:	4619      	mov	r1, r3
 8002096:	4622      	mov	r2, r4
 8002098:	1b49      	subs	r1, r1, r5
 800209a:	eb62 0206 	sbc.w	r2, r2, r6
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	f04f 0400 	mov.w	r4, #0
 80020a6:	0194      	lsls	r4, r2, #6
 80020a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020ac:	018b      	lsls	r3, r1, #6
 80020ae:	1a5b      	subs	r3, r3, r1
 80020b0:	eb64 0402 	sbc.w	r4, r4, r2
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	00e2      	lsls	r2, r4, #3
 80020be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020c2:	00d9      	lsls	r1, r3, #3
 80020c4:	460b      	mov	r3, r1
 80020c6:	4614      	mov	r4, r2
 80020c8:	195b      	adds	r3, r3, r5
 80020ca:	eb44 0406 	adc.w	r4, r4, r6
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	0262      	lsls	r2, r4, #9
 80020d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020dc:	0259      	lsls	r1, r3, #9
 80020de:	460b      	mov	r3, r1
 80020e0:	4614      	mov	r4, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	4621      	mov	r1, r4
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f04f 0400 	mov.w	r4, #0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4623      	mov	r3, r4
 80020f0:	f7fe fd78 	bl	8000be4 <__aeabi_uldivmod>
 80020f4:	4603      	mov	r3, r0
 80020f6:	460c      	mov	r4, r1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e049      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fc:	4b85      	ldr	r3, [pc, #532]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	f240 11ff 	movw	r1, #511	; 0x1ff
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	ea03 0501 	and.w	r5, r3, r1
 8002112:	ea04 0602 	and.w	r6, r4, r2
 8002116:	4629      	mov	r1, r5
 8002118:	4632      	mov	r2, r6
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	f04f 0400 	mov.w	r4, #0
 8002122:	0154      	lsls	r4, r2, #5
 8002124:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002128:	014b      	lsls	r3, r1, #5
 800212a:	4619      	mov	r1, r3
 800212c:	4622      	mov	r2, r4
 800212e:	1b49      	subs	r1, r1, r5
 8002130:	eb62 0206 	sbc.w	r2, r2, r6
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	f04f 0400 	mov.w	r4, #0
 800213c:	0194      	lsls	r4, r2, #6
 800213e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002142:	018b      	lsls	r3, r1, #6
 8002144:	1a5b      	subs	r3, r3, r1
 8002146:	eb64 0402 	sbc.w	r4, r4, r2
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	00e2      	lsls	r2, r4, #3
 8002154:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002158:	00d9      	lsls	r1, r3, #3
 800215a:	460b      	mov	r3, r1
 800215c:	4614      	mov	r4, r2
 800215e:	195b      	adds	r3, r3, r5
 8002160:	eb44 0406 	adc.w	r4, r4, r6
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	02a2      	lsls	r2, r4, #10
 800216e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002172:	0299      	lsls	r1, r3, #10
 8002174:	460b      	mov	r3, r1
 8002176:	4614      	mov	r4, r2
 8002178:	4618      	mov	r0, r3
 800217a:	4621      	mov	r1, r4
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f04f 0400 	mov.w	r4, #0
 8002182:	461a      	mov	r2, r3
 8002184:	4623      	mov	r3, r4
 8002186:	f7fe fd2d 	bl	8000be4 <__aeabi_uldivmod>
 800218a:	4603      	mov	r3, r0
 800218c:	460c      	mov	r4, r1
 800218e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002190:	4b60      	ldr	r3, [pc, #384]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	3301      	adds	r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	613b      	str	r3, [r7, #16]
      break;
 80021aa:	e0ae      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b6:	4b57      	ldr	r3, [pc, #348]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d04a      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	f04f 0400 	mov.w	r4, #0
 80021cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	ea03 0501 	and.w	r5, r3, r1
 80021d8:	ea04 0602 	and.w	r6, r4, r2
 80021dc:	4629      	mov	r1, r5
 80021de:	4632      	mov	r2, r6
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	f04f 0400 	mov.w	r4, #0
 80021e8:	0154      	lsls	r4, r2, #5
 80021ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021ee:	014b      	lsls	r3, r1, #5
 80021f0:	4619      	mov	r1, r3
 80021f2:	4622      	mov	r2, r4
 80021f4:	1b49      	subs	r1, r1, r5
 80021f6:	eb62 0206 	sbc.w	r2, r2, r6
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	f04f 0400 	mov.w	r4, #0
 8002202:	0194      	lsls	r4, r2, #6
 8002204:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002208:	018b      	lsls	r3, r1, #6
 800220a:	1a5b      	subs	r3, r3, r1
 800220c:	eb64 0402 	sbc.w	r4, r4, r2
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	00e2      	lsls	r2, r4, #3
 800221a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800221e:	00d9      	lsls	r1, r3, #3
 8002220:	460b      	mov	r3, r1
 8002222:	4614      	mov	r4, r2
 8002224:	195b      	adds	r3, r3, r5
 8002226:	eb44 0406 	adc.w	r4, r4, r6
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	0262      	lsls	r2, r4, #9
 8002234:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002238:	0259      	lsls	r1, r3, #9
 800223a:	460b      	mov	r3, r1
 800223c:	4614      	mov	r4, r2
 800223e:	4618      	mov	r0, r3
 8002240:	4621      	mov	r1, r4
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f04f 0400 	mov.w	r4, #0
 8002248:	461a      	mov	r2, r3
 800224a:	4623      	mov	r3, r4
 800224c:	f7fe fcca 	bl	8000be4 <__aeabi_uldivmod>
 8002250:	4603      	mov	r3, r0
 8002252:	460c      	mov	r4, r1
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e049      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002258:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	f04f 0400 	mov.w	r4, #0
 8002262:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	ea03 0501 	and.w	r5, r3, r1
 800226e:	ea04 0602 	and.w	r6, r4, r2
 8002272:	4629      	mov	r1, r5
 8002274:	4632      	mov	r2, r6
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	f04f 0400 	mov.w	r4, #0
 800227e:	0154      	lsls	r4, r2, #5
 8002280:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002284:	014b      	lsls	r3, r1, #5
 8002286:	4619      	mov	r1, r3
 8002288:	4622      	mov	r2, r4
 800228a:	1b49      	subs	r1, r1, r5
 800228c:	eb62 0206 	sbc.w	r2, r2, r6
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	f04f 0400 	mov.w	r4, #0
 8002298:	0194      	lsls	r4, r2, #6
 800229a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800229e:	018b      	lsls	r3, r1, #6
 80022a0:	1a5b      	subs	r3, r3, r1
 80022a2:	eb64 0402 	sbc.w	r4, r4, r2
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	00e2      	lsls	r2, r4, #3
 80022b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022b4:	00d9      	lsls	r1, r3, #3
 80022b6:	460b      	mov	r3, r1
 80022b8:	4614      	mov	r4, r2
 80022ba:	195b      	adds	r3, r3, r5
 80022bc:	eb44 0406 	adc.w	r4, r4, r6
 80022c0:	f04f 0100 	mov.w	r1, #0
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	02a2      	lsls	r2, r4, #10
 80022ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022ce:	0299      	lsls	r1, r3, #10
 80022d0:	460b      	mov	r3, r1
 80022d2:	4614      	mov	r4, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	4621      	mov	r1, r4
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f04f 0400 	mov.w	r4, #0
 80022de:	461a      	mov	r2, r3
 80022e0:	4623      	mov	r3, r4
 80022e2:	f7fe fc7f 	bl	8000be4 <__aeabi_uldivmod>
 80022e6:	4603      	mov	r3, r0
 80022e8:	460c      	mov	r4, r1
 80022ea:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_GetSysClockFreq+0x334>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0f1b      	lsrs	r3, r3, #28
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	613b      	str	r3, [r7, #16]
      break;
 8002302:	e002      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_RCC_GetSysClockFreq+0x338>)
 8002306:	613b      	str	r3, [r7, #16]
      break;
 8002308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230a:	693b      	ldr	r3, [r7, #16]
}
 800230c:	4618      	mov	r0, r3
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002314:	40023800 	.word	0x40023800
 8002318:	00f42400 	.word	0x00f42400
 800231c:	007a1200 	.word	0x007a1200

08002320 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8083 	beq.w	8002440 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800233a:	4b95      	ldr	r3, [pc, #596]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d019      	beq.n	800237a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002346:	4b92      	ldr	r3, [pc, #584]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800234e:	2b08      	cmp	r3, #8
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002352:	4b8f      	ldr	r3, [pc, #572]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235e:	d00c      	beq.n	800237a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002360:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002368:	2b0c      	cmp	r3, #12
 800236a:	d112      	bne.n	8002392 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002378:	d10b      	bne.n	8002392 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237a:	4b85      	ldr	r3, [pc, #532]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d05b      	beq.n	800243e <HAL_RCC_OscConfig+0x11e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d157      	bne.n	800243e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e216      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x8a>
 800239c:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a7b      	ldr	r2, [pc, #492]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e01d      	b.n	80023e6 <HAL_RCC_OscConfig+0xc6>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b2:	d10c      	bne.n	80023ce <HAL_RCC_OscConfig+0xae>
 80023b4:	4b76      	ldr	r3, [pc, #472]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a75      	ldr	r2, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b73      	ldr	r3, [pc, #460]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a72      	ldr	r2, [pc, #456]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	e00b      	b.n	80023e6 <HAL_RCC_OscConfig+0xc6>
 80023ce:	4b70      	ldr	r3, [pc, #448]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6f      	ldr	r2, [pc, #444]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6c      	ldr	r2, [pc, #432]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80023e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d013      	beq.n	8002416 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7ff fa59 	bl	80018a4 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f6:	f7ff fa55 	bl	80018a4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	; 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1db      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002408:	4b61      	ldr	r3, [pc, #388]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0xd6>
 8002414:	e014      	b.n	8002440 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7ff fa45 	bl	80018a4 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241e:	f7ff fa41 	bl	80018a4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1c7      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002430:	4b57      	ldr	r3, [pc, #348]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0xfe>
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d06f      	beq.n	800252c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800244c:	4b50      	ldr	r3, [pc, #320]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b00      	cmp	r3, #0
 8002456:	d017      	beq.n	8002488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002458:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002460:	2b08      	cmp	r3, #8
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00b      	beq.n	8002488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002470:	4b47      	ldr	r3, [pc, #284]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d11c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d116      	bne.n	80024b6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002488:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_OscConfig+0x180>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e18f      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4938      	ldr	r1, [pc, #224]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b4:	e03a      	b.n	800252c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d020      	beq.n	8002500 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7ff f9ee 	bl	80018a4 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024cc:	f7ff f9ea 	bl	80018a4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e170      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b29      	ldr	r3, [pc, #164]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4925      	ldr	r1, [pc, #148]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
 80024fe:	e015      	b.n	800252c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7ff f9cd 	bl	80018a4 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250e:	f7ff f9c9 	bl	80018a4 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e14f      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d037      	beq.n	80025a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d016      	beq.n	800256e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_RCC_OscConfig+0x278>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7ff f9ad 	bl	80018a4 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254e:	f7ff f9a9 	bl	80018a4 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e12f      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 8002562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x22e>
 800256c:	e01c      	b.n	80025a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_RCC_OscConfig+0x278>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7ff f996 	bl	80018a4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257a:	e00f      	b.n	800259c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257c:	f7ff f992 	bl	80018a4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d908      	bls.n	800259c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e118      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	42470000 	.word	0x42470000
 8002598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259c:	4b8a      	ldr	r3, [pc, #552]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 800259e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e9      	bne.n	800257c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8097 	beq.w	80026e4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ba:	4b83      	ldr	r3, [pc, #524]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b7f      	ldr	r3, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a7e      	ldr	r2, [pc, #504]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b7c      	ldr	r3, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b79      	ldr	r3, [pc, #484]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fe:	f7ff f951 	bl	80018a4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002606:	f7ff f94d 	bl	80018a4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0d3      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x31a>
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6713      	str	r3, [r2, #112]	; 0x70
 8002638:	e01c      	b.n	8002674 <HAL_RCC_OscConfig+0x354>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b05      	cmp	r3, #5
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x33c>
 8002642:	4b61      	ldr	r3, [pc, #388]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	4a60      	ldr	r2, [pc, #384]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	6713      	str	r3, [r2, #112]	; 0x70
 800264e:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6713      	str	r3, [r2, #112]	; 0x70
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0x354>
 800265c:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a59      	ldr	r2, [pc, #356]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	4b57      	ldr	r3, [pc, #348]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	4a56      	ldr	r2, [pc, #344]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 800266e:	f023 0304 	bic.w	r3, r3, #4
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff f912 	bl	80018a4 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002682:	e00a      	b.n	800269a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7ff f90e 	bl	80018a4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e092      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ee      	beq.n	8002684 <HAL_RCC_OscConfig+0x364>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7ff f8fc 	bl	80018a4 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7ff f8f8 	bl	80018a4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e07c      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c6:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ee      	bne.n	80026b0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80026de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d068      	beq.n	80027be <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d060      	beq.n	80027ba <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d145      	bne.n	800278c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_OscConfig+0x4b0>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff f8cd 	bl	80018a4 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff f8c9 	bl	80018a4 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e04f      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002720:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	019b      	lsls	r3, r3, #6
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	061b      	lsls	r3, r3, #24
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	071b      	lsls	r3, r3, #28
 8002758:	491b      	ldr	r1, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_RCC_OscConfig+0x4b0>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7ff f89e 	bl	80018a4 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7ff f89a 	bl	80018a4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e020      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x44c>
 800278a:	e018      	b.n	80027be <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x4b0>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff f887 	bl	80018a4 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff f883 	bl	80018a4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e009      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x4a8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x47a>
 80027b8:	e001      	b.n	80027be <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40007000 	.word	0x40007000
 80027d0:	42470060 	.word	0x42470060

080027d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e03f      	b.n	8002866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe ff3a 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f919 	bl	8002a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800282c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800283c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800284c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b088      	sub	sp, #32
 8002872:	af02      	add	r7, sp, #8
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b20      	cmp	r3, #32
 800288c:	f040 8090 	bne.w	80029b0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Receive+0x2e>
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e088      	b.n	80029b2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Receive+0x40>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e081      	b.n	80029b2 <HAL_UART_Receive+0x144>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2222      	movs	r2, #34	; 0x22
 80028c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028c4:	f7fe ffee 	bl	80018a4 <HAL_GetTick>
 80028c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	88fa      	ldrh	r2, [r7, #6]
 80028ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80028de:	e05c      	b.n	800299a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f6:	d12b      	bne.n	8002950 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2200      	movs	r2, #0
 8002900:	2120      	movs	r1, #32
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f859 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e04f      	b.n	80029b2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	b29b      	uxth	r3, r3
 8002926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292a:	b29a      	uxth	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	3302      	adds	r3, #2
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	e030      	b.n	800299a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b29b      	uxth	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	b29a      	uxth	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3301      	adds	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	e024      	b.n	800299a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	2120      	movs	r1, #32
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f82d 	bl	80029ba <UART_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e023      	b.n	80029b2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	60ba      	str	r2, [r7, #8]
 800297e:	b2ca      	uxtb	r2, r1
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e00a      	b.n	800299a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	1c59      	adds	r1, r3, #1
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d19d      	bne.n	80028e0 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ca:	e02c      	b.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d028      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <UART_WaitOnFlagUntilTimeout+0x30>
 80029da:	f7fe ff63 	bl	80018a4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d21d      	bcs.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e00f      	b.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d0c3      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a92:	f023 030c 	bic.w	r3, r3, #12
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	68f9      	ldr	r1, [r7, #12]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002abe:	f040 818b 	bne.w	8002dd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4ac1      	ldr	r2, [pc, #772]	; (8002dcc <UART_SetConfig+0x37c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d005      	beq.n	8002ad8 <UART_SetConfig+0x88>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4abf      	ldr	r2, [pc, #764]	; (8002dd0 <UART_SetConfig+0x380>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f040 80bd 	bne.w	8002c52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff fa6e 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002adc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	461d      	mov	r5, r3
 8002ae2:	f04f 0600 	mov.w	r6, #0
 8002ae6:	46a8      	mov	r8, r5
 8002ae8:	46b1      	mov	r9, r6
 8002aea:	eb18 0308 	adds.w	r3, r8, r8
 8002aee:	eb49 0409 	adc.w	r4, r9, r9
 8002af2:	4698      	mov	r8, r3
 8002af4:	46a1      	mov	r9, r4
 8002af6:	eb18 0805 	adds.w	r8, r8, r5
 8002afa:	eb49 0906 	adc.w	r9, r9, r6
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b12:	4688      	mov	r8, r1
 8002b14:	4691      	mov	r9, r2
 8002b16:	eb18 0005 	adds.w	r0, r8, r5
 8002b1a:	eb49 0106 	adc.w	r1, r9, r6
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	461d      	mov	r5, r3
 8002b24:	f04f 0600 	mov.w	r6, #0
 8002b28:	196b      	adds	r3, r5, r5
 8002b2a:	eb46 0406 	adc.w	r4, r6, r6
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4623      	mov	r3, r4
 8002b32:	f7fe f857 	bl	8000be4 <__aeabi_uldivmod>
 8002b36:	4603      	mov	r3, r0
 8002b38:	460c      	mov	r4, r1
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4ba5      	ldr	r3, [pc, #660]	; (8002dd4 <UART_SetConfig+0x384>)
 8002b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	f04f 0600 	mov.w	r6, #0
 8002b50:	46a9      	mov	r9, r5
 8002b52:	46b2      	mov	sl, r6
 8002b54:	eb19 0309 	adds.w	r3, r9, r9
 8002b58:	eb4a 040a 	adc.w	r4, sl, sl
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	46a2      	mov	sl, r4
 8002b60:	eb19 0905 	adds.w	r9, r9, r5
 8002b64:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b68:	f04f 0100 	mov.w	r1, #0
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b7c:	4689      	mov	r9, r1
 8002b7e:	4692      	mov	sl, r2
 8002b80:	eb19 0005 	adds.w	r0, r9, r5
 8002b84:	eb4a 0106 	adc.w	r1, sl, r6
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	f04f 0600 	mov.w	r6, #0
 8002b92:	196b      	adds	r3, r5, r5
 8002b94:	eb46 0406 	adc.w	r4, r6, r6
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	f7fe f822 	bl	8000be4 <__aeabi_uldivmod>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <UART_SetConfig+0x384>)
 8002ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	2164      	movs	r1, #100	; 0x64
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	3332      	adds	r3, #50	; 0x32
 8002bba:	4a86      	ldr	r2, [pc, #536]	; (8002dd4 <UART_SetConfig+0x384>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bc8:	4498      	add	r8, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	461d      	mov	r5, r3
 8002bce:	f04f 0600 	mov.w	r6, #0
 8002bd2:	46a9      	mov	r9, r5
 8002bd4:	46b2      	mov	sl, r6
 8002bd6:	eb19 0309 	adds.w	r3, r9, r9
 8002bda:	eb4a 040a 	adc.w	r4, sl, sl
 8002bde:	4699      	mov	r9, r3
 8002be0:	46a2      	mov	sl, r4
 8002be2:	eb19 0905 	adds.w	r9, r9, r5
 8002be6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bfe:	4689      	mov	r9, r1
 8002c00:	4692      	mov	sl, r2
 8002c02:	eb19 0005 	adds.w	r0, r9, r5
 8002c06:	eb4a 0106 	adc.w	r1, sl, r6
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	461d      	mov	r5, r3
 8002c10:	f04f 0600 	mov.w	r6, #0
 8002c14:	196b      	adds	r3, r5, r5
 8002c16:	eb46 0406 	adc.w	r4, r6, r6
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	f7fd ffe1 	bl	8000be4 <__aeabi_uldivmod>
 8002c22:	4603      	mov	r3, r0
 8002c24:	460c      	mov	r4, r1
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <UART_SetConfig+0x384>)
 8002c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2164      	movs	r1, #100	; 0x64
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	3332      	adds	r3, #50	; 0x32
 8002c3c:	4a65      	ldr	r2, [pc, #404]	; (8002dd4 <UART_SetConfig+0x384>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	f003 0207 	and.w	r2, r3, #7
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4442      	add	r2, r8
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	e26f      	b.n	8003132 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c52:	f7ff f99d 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8002c56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	f04f 0600 	mov.w	r6, #0
 8002c60:	46a8      	mov	r8, r5
 8002c62:	46b1      	mov	r9, r6
 8002c64:	eb18 0308 	adds.w	r3, r8, r8
 8002c68:	eb49 0409 	adc.w	r4, r9, r9
 8002c6c:	4698      	mov	r8, r3
 8002c6e:	46a1      	mov	r9, r4
 8002c70:	eb18 0805 	adds.w	r8, r8, r5
 8002c74:	eb49 0906 	adc.w	r9, r9, r6
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c8c:	4688      	mov	r8, r1
 8002c8e:	4691      	mov	r9, r2
 8002c90:	eb18 0005 	adds.w	r0, r8, r5
 8002c94:	eb49 0106 	adc.w	r1, r9, r6
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	f04f 0600 	mov.w	r6, #0
 8002ca2:	196b      	adds	r3, r5, r5
 8002ca4:	eb46 0406 	adc.w	r4, r6, r6
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	f7fd ff9a 	bl	8000be4 <__aeabi_uldivmod>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <UART_SetConfig+0x384>)
 8002cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	461d      	mov	r5, r3
 8002cc6:	f04f 0600 	mov.w	r6, #0
 8002cca:	46a9      	mov	r9, r5
 8002ccc:	46b2      	mov	sl, r6
 8002cce:	eb19 0309 	adds.w	r3, r9, r9
 8002cd2:	eb4a 040a 	adc.w	r4, sl, sl
 8002cd6:	4699      	mov	r9, r3
 8002cd8:	46a2      	mov	sl, r4
 8002cda:	eb19 0905 	adds.w	r9, r9, r5
 8002cde:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cf6:	4689      	mov	r9, r1
 8002cf8:	4692      	mov	sl, r2
 8002cfa:	eb19 0005 	adds.w	r0, r9, r5
 8002cfe:	eb4a 0106 	adc.w	r1, sl, r6
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	461d      	mov	r5, r3
 8002d08:	f04f 0600 	mov.w	r6, #0
 8002d0c:	196b      	adds	r3, r5, r5
 8002d0e:	eb46 0406 	adc.w	r4, r6, r6
 8002d12:	461a      	mov	r2, r3
 8002d14:	4623      	mov	r3, r4
 8002d16:	f7fd ff65 	bl	8000be4 <__aeabi_uldivmod>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <UART_SetConfig+0x384>)
 8002d22:	fba3 1302 	umull	r1, r3, r3, r2
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2164      	movs	r1, #100	; 0x64
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	3332      	adds	r3, #50	; 0x32
 8002d34:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <UART_SetConfig+0x384>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d42:	4498      	add	r8, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	461d      	mov	r5, r3
 8002d48:	f04f 0600 	mov.w	r6, #0
 8002d4c:	46a9      	mov	r9, r5
 8002d4e:	46b2      	mov	sl, r6
 8002d50:	eb19 0309 	adds.w	r3, r9, r9
 8002d54:	eb4a 040a 	adc.w	r4, sl, sl
 8002d58:	4699      	mov	r9, r3
 8002d5a:	46a2      	mov	sl, r4
 8002d5c:	eb19 0905 	adds.w	r9, r9, r5
 8002d60:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d78:	4689      	mov	r9, r1
 8002d7a:	4692      	mov	sl, r2
 8002d7c:	eb19 0005 	adds.w	r0, r9, r5
 8002d80:	eb4a 0106 	adc.w	r1, sl, r6
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	461d      	mov	r5, r3
 8002d8a:	f04f 0600 	mov.w	r6, #0
 8002d8e:	196b      	adds	r3, r5, r5
 8002d90:	eb46 0406 	adc.w	r4, r6, r6
 8002d94:	461a      	mov	r2, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	f7fd ff24 	bl	8000be4 <__aeabi_uldivmod>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	460c      	mov	r4, r1
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <UART_SetConfig+0x384>)
 8002da4:	fba3 1302 	umull	r1, r3, r3, r2
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	2164      	movs	r1, #100	; 0x64
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	3332      	adds	r3, #50	; 0x32
 8002db6:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <UART_SetConfig+0x384>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	f003 0207 	and.w	r2, r3, #7
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4442      	add	r2, r8
 8002dc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002dca:	e1b2      	b.n	8003132 <UART_SetConfig+0x6e2>
 8002dcc:	40011000 	.word	0x40011000
 8002dd0:	40011400 	.word	0x40011400
 8002dd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4ad7      	ldr	r2, [pc, #860]	; (800313c <UART_SetConfig+0x6ec>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d005      	beq.n	8002dee <UART_SetConfig+0x39e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4ad6      	ldr	r2, [pc, #856]	; (8003140 <UART_SetConfig+0x6f0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	f040 80d1 	bne.w	8002f90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dee:	f7ff f8e3 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002df2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	469a      	mov	sl, r3
 8002df8:	f04f 0b00 	mov.w	fp, #0
 8002dfc:	46d0      	mov	r8, sl
 8002dfe:	46d9      	mov	r9, fp
 8002e00:	eb18 0308 	adds.w	r3, r8, r8
 8002e04:	eb49 0409 	adc.w	r4, r9, r9
 8002e08:	4698      	mov	r8, r3
 8002e0a:	46a1      	mov	r9, r4
 8002e0c:	eb18 080a 	adds.w	r8, r8, sl
 8002e10:	eb49 090b 	adc.w	r9, r9, fp
 8002e14:	f04f 0100 	mov.w	r1, #0
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e28:	4688      	mov	r8, r1
 8002e2a:	4691      	mov	r9, r2
 8002e2c:	eb1a 0508 	adds.w	r5, sl, r8
 8002e30:	eb4b 0609 	adc.w	r6, fp, r9
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	f04f 0400 	mov.w	r4, #0
 8002e46:	0094      	lsls	r4, r2, #2
 8002e48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e4c:	008b      	lsls	r3, r1, #2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4623      	mov	r3, r4
 8002e52:	4628      	mov	r0, r5
 8002e54:	4631      	mov	r1, r6
 8002e56:	f7fd fec5 	bl	8000be4 <__aeabi_uldivmod>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	460c      	mov	r4, r1
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4bb8      	ldr	r3, [pc, #736]	; (8003144 <UART_SetConfig+0x6f4>)
 8002e62:	fba3 2302 	umull	r2, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	469b      	mov	fp, r3
 8002e70:	f04f 0c00 	mov.w	ip, #0
 8002e74:	46d9      	mov	r9, fp
 8002e76:	46e2      	mov	sl, ip
 8002e78:	eb19 0309 	adds.w	r3, r9, r9
 8002e7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e80:	4699      	mov	r9, r3
 8002e82:	46a2      	mov	sl, r4
 8002e84:	eb19 090b 	adds.w	r9, r9, fp
 8002e88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e8c:	f04f 0100 	mov.w	r1, #0
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ea0:	4689      	mov	r9, r1
 8002ea2:	4692      	mov	sl, r2
 8002ea4:	eb1b 0509 	adds.w	r5, fp, r9
 8002ea8:	eb4c 060a 	adc.w	r6, ip, sl
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	f04f 0400 	mov.w	r4, #0
 8002ebe:	0094      	lsls	r4, r2, #2
 8002ec0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ec4:	008b      	lsls	r3, r1, #2
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4623      	mov	r3, r4
 8002eca:	4628      	mov	r0, r5
 8002ecc:	4631      	mov	r1, r6
 8002ece:	f7fd fe89 	bl	8000be4 <__aeabi_uldivmod>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b9a      	ldr	r3, [pc, #616]	; (8003144 <UART_SetConfig+0x6f4>)
 8002eda:	fba3 1302 	umull	r1, r3, r3, r2
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2164      	movs	r1, #100	; 0x64
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	3332      	adds	r3, #50	; 0x32
 8002eec:	4a95      	ldr	r2, [pc, #596]	; (8003144 <UART_SetConfig+0x6f4>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef8:	4498      	add	r8, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	469b      	mov	fp, r3
 8002efe:	f04f 0c00 	mov.w	ip, #0
 8002f02:	46d9      	mov	r9, fp
 8002f04:	46e2      	mov	sl, ip
 8002f06:	eb19 0309 	adds.w	r3, r9, r9
 8002f0a:	eb4a 040a 	adc.w	r4, sl, sl
 8002f0e:	4699      	mov	r9, r3
 8002f10:	46a2      	mov	sl, r4
 8002f12:	eb19 090b 	adds.w	r9, r9, fp
 8002f16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f2e:	4689      	mov	r9, r1
 8002f30:	4692      	mov	sl, r2
 8002f32:	eb1b 0509 	adds.w	r5, fp, r9
 8002f36:	eb4c 060a 	adc.w	r6, ip, sl
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	f04f 0400 	mov.w	r4, #0
 8002f4c:	0094      	lsls	r4, r2, #2
 8002f4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f52:	008b      	lsls	r3, r1, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	4623      	mov	r3, r4
 8002f58:	4628      	mov	r0, r5
 8002f5a:	4631      	mov	r1, r6
 8002f5c:	f7fd fe42 	bl	8000be4 <__aeabi_uldivmod>
 8002f60:	4603      	mov	r3, r0
 8002f62:	460c      	mov	r4, r1
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b77      	ldr	r3, [pc, #476]	; (8003144 <UART_SetConfig+0x6f4>)
 8002f68:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	2164      	movs	r1, #100	; 0x64
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	3332      	adds	r3, #50	; 0x32
 8002f7a:	4a72      	ldr	r2, [pc, #456]	; (8003144 <UART_SetConfig+0x6f4>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	f003 020f 	and.w	r2, r3, #15
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4442      	add	r2, r8
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	e0d0      	b.n	8003132 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f90:	f7fe fffe 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8002f94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	469a      	mov	sl, r3
 8002f9a:	f04f 0b00 	mov.w	fp, #0
 8002f9e:	46d0      	mov	r8, sl
 8002fa0:	46d9      	mov	r9, fp
 8002fa2:	eb18 0308 	adds.w	r3, r8, r8
 8002fa6:	eb49 0409 	adc.w	r4, r9, r9
 8002faa:	4698      	mov	r8, r3
 8002fac:	46a1      	mov	r9, r4
 8002fae:	eb18 080a 	adds.w	r8, r8, sl
 8002fb2:	eb49 090b 	adc.w	r9, r9, fp
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fca:	4688      	mov	r8, r1
 8002fcc:	4691      	mov	r9, r2
 8002fce:	eb1a 0508 	adds.w	r5, sl, r8
 8002fd2:	eb4b 0609 	adc.w	r6, fp, r9
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	f04f 0400 	mov.w	r4, #0
 8002fe8:	0094      	lsls	r4, r2, #2
 8002fea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fee:	008b      	lsls	r3, r1, #2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	f7fd fdf4 	bl	8000be4 <__aeabi_uldivmod>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	461a      	mov	r2, r3
 8003002:	4b50      	ldr	r3, [pc, #320]	; (8003144 <UART_SetConfig+0x6f4>)
 8003004:	fba3 2302 	umull	r2, r3, r3, r2
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	469b      	mov	fp, r3
 8003012:	f04f 0c00 	mov.w	ip, #0
 8003016:	46d9      	mov	r9, fp
 8003018:	46e2      	mov	sl, ip
 800301a:	eb19 0309 	adds.w	r3, r9, r9
 800301e:	eb4a 040a 	adc.w	r4, sl, sl
 8003022:	4699      	mov	r9, r3
 8003024:	46a2      	mov	sl, r4
 8003026:	eb19 090b 	adds.w	r9, r9, fp
 800302a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800302e:	f04f 0100 	mov.w	r1, #0
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800303a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800303e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003042:	4689      	mov	r9, r1
 8003044:	4692      	mov	sl, r2
 8003046:	eb1b 0509 	adds.w	r5, fp, r9
 800304a:	eb4c 060a 	adc.w	r6, ip, sl
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4619      	mov	r1, r3
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	f04f 0400 	mov.w	r4, #0
 8003060:	0094      	lsls	r4, r2, #2
 8003062:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003066:	008b      	lsls	r3, r1, #2
 8003068:	461a      	mov	r2, r3
 800306a:	4623      	mov	r3, r4
 800306c:	4628      	mov	r0, r5
 800306e:	4631      	mov	r1, r6
 8003070:	f7fd fdb8 	bl	8000be4 <__aeabi_uldivmod>
 8003074:	4603      	mov	r3, r0
 8003076:	460c      	mov	r4, r1
 8003078:	461a      	mov	r2, r3
 800307a:	4b32      	ldr	r3, [pc, #200]	; (8003144 <UART_SetConfig+0x6f4>)
 800307c:	fba3 1302 	umull	r1, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	2164      	movs	r1, #100	; 0x64
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	3332      	adds	r3, #50	; 0x32
 800308e:	4a2d      	ldr	r2, [pc, #180]	; (8003144 <UART_SetConfig+0x6f4>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309a:	4498      	add	r8, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	469b      	mov	fp, r3
 80030a0:	f04f 0c00 	mov.w	ip, #0
 80030a4:	46d9      	mov	r9, fp
 80030a6:	46e2      	mov	sl, ip
 80030a8:	eb19 0309 	adds.w	r3, r9, r9
 80030ac:	eb4a 040a 	adc.w	r4, sl, sl
 80030b0:	4699      	mov	r9, r3
 80030b2:	46a2      	mov	sl, r4
 80030b4:	eb19 090b 	adds.w	r9, r9, fp
 80030b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030d0:	4689      	mov	r9, r1
 80030d2:	4692      	mov	sl, r2
 80030d4:	eb1b 0509 	adds.w	r5, fp, r9
 80030d8:	eb4c 060a 	adc.w	r6, ip, sl
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4619      	mov	r1, r3
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	0094      	lsls	r4, r2, #2
 80030f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030f4:	008b      	lsls	r3, r1, #2
 80030f6:	461a      	mov	r2, r3
 80030f8:	4623      	mov	r3, r4
 80030fa:	4628      	mov	r0, r5
 80030fc:	4631      	mov	r1, r6
 80030fe:	f7fd fd71 	bl	8000be4 <__aeabi_uldivmod>
 8003102:	4603      	mov	r3, r0
 8003104:	460c      	mov	r4, r1
 8003106:	461a      	mov	r2, r3
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <UART_SetConfig+0x6f4>)
 800310a:	fba3 1302 	umull	r1, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2164      	movs	r1, #100	; 0x64
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	3332      	adds	r3, #50	; 0x32
 800311c:	4a09      	ldr	r2, [pc, #36]	; (8003144 <UART_SetConfig+0x6f4>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4442      	add	r2, r8
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	e7ff      	b.n	8003132 <UART_SetConfig+0x6e2>
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800313c:	40011000 	.word	0x40011000
 8003140:	40011400 	.word	0x40011400
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <arm_max_f32>:
 8003148:	f101 3cff 	add.w	ip, r1, #4294967295
 800314c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800314e:	4607      	mov	r7, r0
 8003150:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8003154:	ecf7 7a01 	vldmia	r7!, {s15}
 8003158:	d063      	beq.n	8003222 <arm_max_f32+0xda>
 800315a:	f10e 0601 	add.w	r6, lr, #1
 800315e:	3014      	adds	r0, #20
 8003160:	00b6      	lsls	r6, r6, #2
 8003162:	2404      	movs	r4, #4
 8003164:	2500      	movs	r5, #0
 8003166:	ed10 7a04 	vldr	s14, [r0, #-16]
 800316a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	bf48      	it	mi
 8003174:	eef0 7a47 	vmovmi.f32	s15, s14
 8003178:	ed10 7a03 	vldr	s14, [r0, #-12]
 800317c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003180:	bf48      	it	mi
 8003182:	1ee5      	submi	r5, r4, #3
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	bf48      	it	mi
 800318a:	eef0 7a47 	vmovmi.f32	s15, s14
 800318e:	ed10 7a02 	vldr	s14, [r0, #-8]
 8003192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003196:	bf48      	it	mi
 8003198:	1ea5      	submi	r5, r4, #2
 800319a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319e:	bf48      	it	mi
 80031a0:	eef0 7a47 	vmovmi.f32	s15, s14
 80031a4:	ed10 7a01 	vldr	s14, [r0, #-4]
 80031a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ac:	bf48      	it	mi
 80031ae:	f104 35ff 	addmi.w	r5, r4, #4294967295
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	bf48      	it	mi
 80031b8:	4625      	movmi	r5, r4
 80031ba:	f104 0404 	add.w	r4, r4, #4
 80031be:	bf48      	it	mi
 80031c0:	eef0 7a47 	vmovmi.f32	s15, s14
 80031c4:	42b4      	cmp	r4, r6
 80031c6:	f100 0010 	add.w	r0, r0, #16
 80031ca:	d1cc      	bne.n	8003166 <arm_max_f32+0x1e>
 80031cc:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80031d0:	f01c 0003 	ands.w	r0, ip, #3
 80031d4:	d021      	beq.n	800321a <arm_max_f32+0xd2>
 80031d6:	ed97 7a00 	vldr	s14, [r7]
 80031da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e2:	bfc4      	itt	gt
 80031e4:	eef0 7a47 	vmovgt.f32	s15, s14
 80031e8:	1a0d      	subgt	r5, r1, r0
 80031ea:	3801      	subs	r0, #1
 80031ec:	d015      	beq.n	800321a <arm_max_f32+0xd2>
 80031ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80031f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	bf44      	itt	mi
 80031fc:	eef0 7a47 	vmovmi.f32	s15, s14
 8003200:	1a0d      	submi	r5, r1, r0
 8003202:	2801      	cmp	r0, #1
 8003204:	d009      	beq.n	800321a <arm_max_f32+0xd2>
 8003206:	ed97 7a02 	vldr	s14, [r7, #8]
 800320a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	bf44      	itt	mi
 8003214:	eef0 7a47 	vmovmi.f32	s15, s14
 8003218:	4665      	movmi	r5, ip
 800321a:	edc2 7a00 	vstr	s15, [r2]
 800321e:	601d      	str	r5, [r3, #0]
 8003220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003222:	4675      	mov	r5, lr
 8003224:	e7d4      	b.n	80031d0 <arm_max_f32+0x88>
 8003226:	bf00      	nop

08003228 <arm_cfft_init_f32>:
 8003228:	4603      	mov	r3, r0
 800322a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	b410      	push	{r4}
 8003234:	8019      	strh	r1, [r3, #0]
 8003236:	6058      	str	r0, [r3, #4]
 8003238:	d033      	beq.n	80032a2 <arm_cfft_init_f32+0x7a>
 800323a:	d918      	bls.n	800326e <arm_cfft_init_f32+0x46>
 800323c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003240:	d027      	beq.n	8003292 <arm_cfft_init_f32+0x6a>
 8003242:	d90c      	bls.n	800325e <arm_cfft_init_f32+0x36>
 8003244:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003248:	d11e      	bne.n	8003288 <arm_cfft_init_f32+0x60>
 800324a:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <arm_cfft_init_f32+0x80>)
 800324c:	8994      	ldrh	r4, [r2, #12]
 800324e:	819c      	strh	r4, [r3, #12]
 8003250:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8003254:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8003258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003262:	d018      	beq.n	8003296 <arm_cfft_init_f32+0x6e>
 8003264:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003268:	d10e      	bne.n	8003288 <arm_cfft_init_f32+0x60>
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <arm_cfft_init_f32+0x84>)
 800326c:	e7ee      	b.n	800324c <arm_cfft_init_f32+0x24>
 800326e:	2940      	cmp	r1, #64	; 0x40
 8003270:	d013      	beq.n	800329a <arm_cfft_init_f32+0x72>
 8003272:	d903      	bls.n	800327c <arm_cfft_init_f32+0x54>
 8003274:	2980      	cmp	r1, #128	; 0x80
 8003276:	d107      	bne.n	8003288 <arm_cfft_init_f32+0x60>
 8003278:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <arm_cfft_init_f32+0x88>)
 800327a:	e7e7      	b.n	800324c <arm_cfft_init_f32+0x24>
 800327c:	2910      	cmp	r1, #16
 800327e:	d00e      	beq.n	800329e <arm_cfft_init_f32+0x76>
 8003280:	2920      	cmp	r1, #32
 8003282:	d101      	bne.n	8003288 <arm_cfft_init_f32+0x60>
 8003284:	4a0b      	ldr	r2, [pc, #44]	; (80032b4 <arm_cfft_init_f32+0x8c>)
 8003286:	e7e1      	b.n	800324c <arm_cfft_init_f32+0x24>
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <arm_cfft_init_f32+0x90>)
 8003294:	e7da      	b.n	800324c <arm_cfft_init_f32+0x24>
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <arm_cfft_init_f32+0x94>)
 8003298:	e7d8      	b.n	800324c <arm_cfft_init_f32+0x24>
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <arm_cfft_init_f32+0x98>)
 800329c:	e7d6      	b.n	800324c <arm_cfft_init_f32+0x24>
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <arm_cfft_init_f32+0x9c>)
 80032a0:	e7d4      	b.n	800324c <arm_cfft_init_f32+0x24>
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <arm_cfft_init_f32+0xa0>)
 80032a4:	e7d2      	b.n	800324c <arm_cfft_init_f32+0x24>
 80032a6:	bf00      	nop
 80032a8:	08005740 	.word	0x08005740
 80032ac:	080056e0 	.word	0x080056e0
 80032b0:	080056f0 	.word	0x080056f0
 80032b4:	08005730 	.word	0x08005730
 80032b8:	08005710 	.word	0x08005710
 80032bc:	08005750 	.word	0x08005750
 80032c0:	08005760 	.word	0x08005760
 80032c4:	08005700 	.word	0x08005700
 80032c8:	08005720 	.word	0x08005720

080032cc <arm_cfft_radix8by2_f32>:
 80032cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032d0:	ed2d 8b08 	vpush	{d8-d11}
 80032d4:	f8b0 c000 	ldrh.w	ip, [r0]
 80032d8:	6842      	ldr	r2, [r0, #4]
 80032da:	4607      	mov	r7, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80032e2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80032e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80032ea:	b082      	sub	sp, #8
 80032ec:	f000 80b0 	beq.w	8003450 <arm_cfft_radix8by2_f32+0x184>
 80032f0:	008c      	lsls	r4, r1, #2
 80032f2:	3410      	adds	r4, #16
 80032f4:	f100 0310 	add.w	r3, r0, #16
 80032f8:	1906      	adds	r6, r0, r4
 80032fa:	3210      	adds	r2, #16
 80032fc:	4444      	add	r4, r8
 80032fe:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8003302:	f108 0510 	add.w	r5, r8, #16
 8003306:	ed15 2a04 	vldr	s4, [r5, #-16]
 800330a:	ed55 2a03 	vldr	s5, [r5, #-12]
 800330e:	ed54 4a04 	vldr	s9, [r4, #-16]
 8003312:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003316:	ed14 6a02 	vldr	s12, [r4, #-8]
 800331a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800331e:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003322:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003326:	ed55 0a01 	vldr	s1, [r5, #-4]
 800332a:	ed56 6a04 	vldr	s13, [r6, #-16]
 800332e:	ed16 3a03 	vldr	s6, [r6, #-12]
 8003332:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003336:	ed13 5a02 	vldr	s10, [r3, #-8]
 800333a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800333e:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003342:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003346:	ee73 ba82 	vadd.f32	s23, s7, s4
 800334a:	ee37 ba22 	vadd.f32	s22, s14, s5
 800334e:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003352:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003356:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800335a:	ee75 aa00 	vadd.f32	s21, s10, s0
 800335e:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003362:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003366:	ed43 ba04 	vstr	s23, [r3, #-16]
 800336a:	ed03 ba03 	vstr	s22, [r3, #-12]
 800336e:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003372:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003376:	ed06 8a01 	vstr	s16, [r6, #-4]
 800337a:	ed46 9a04 	vstr	s19, [r6, #-16]
 800337e:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003382:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003386:	ee37 7a62 	vsub.f32	s14, s14, s5
 800338a:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800338e:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003392:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003396:	ed12 3a04 	vldr	s6, [r2, #-16]
 800339a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800339e:	ee27 8a26 	vmul.f32	s16, s14, s13
 80033a2:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80033a6:	ee23 2a83 	vmul.f32	s4, s7, s6
 80033aa:	ee64 4a83 	vmul.f32	s9, s9, s6
 80033ae:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80033b2:	ee27 7a03 	vmul.f32	s14, s14, s6
 80033b6:	ee64 6a26 	vmul.f32	s13, s8, s13
 80033ba:	ee24 4a03 	vmul.f32	s8, s8, s6
 80033be:	ee37 7a63 	vsub.f32	s14, s14, s7
 80033c2:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80033c6:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80033ca:	ee32 3a08 	vadd.f32	s6, s4, s16
 80033ce:	ed05 7a03 	vstr	s14, [r5, #-12]
 80033d2:	ed05 3a04 	vstr	s6, [r5, #-16]
 80033d6:	ed04 4a04 	vstr	s8, [r4, #-16]
 80033da:	ed44 6a03 	vstr	s13, [r4, #-12]
 80033de:	ed12 7a01 	vldr	s14, [r2, #-4]
 80033e2:	ee76 6a41 	vsub.f32	s13, s12, s2
 80033e6:	ee35 5a40 	vsub.f32	s10, s10, s0
 80033ea:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80033ee:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80033f2:	ed52 5a02 	vldr	s11, [r2, #-8]
 80033f6:	ee67 3a87 	vmul.f32	s7, s15, s14
 80033fa:	ee66 4a87 	vmul.f32	s9, s13, s14
 80033fe:	ee25 4a25 	vmul.f32	s8, s10, s11
 8003402:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003406:	ee25 5a07 	vmul.f32	s10, s10, s14
 800340a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800340e:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003412:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003416:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800341a:	ee74 5a23 	vadd.f32	s11, s8, s7
 800341e:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8003422:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003426:	3310      	adds	r3, #16
 8003428:	4563      	cmp	r3, ip
 800342a:	ed45 5a02 	vstr	s11, [r5, #-8]
 800342e:	f106 0610 	add.w	r6, r6, #16
 8003432:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003436:	f102 0210 	add.w	r2, r2, #16
 800343a:	ed04 6a02 	vstr	s12, [r4, #-8]
 800343e:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003442:	f105 0510 	add.w	r5, r5, #16
 8003446:	f104 0410 	add.w	r4, r4, #16
 800344a:	f47f af5c 	bne.w	8003306 <arm_cfft_radix8by2_f32+0x3a>
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	b289      	uxth	r1, r1
 8003452:	2302      	movs	r3, #2
 8003454:	9101      	str	r1, [sp, #4]
 8003456:	f000 fc1d 	bl	8003c94 <arm_radix8_butterfly_f32>
 800345a:	9901      	ldr	r1, [sp, #4]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4640      	mov	r0, r8
 8003460:	2302      	movs	r3, #2
 8003462:	b002      	add	sp, #8
 8003464:	ecbd 8b08 	vpop	{d8-d11}
 8003468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800346c:	f000 bc12 	b.w	8003c94 <arm_radix8_butterfly_f32>

08003470 <arm_cfft_radix8by4_f32>:
 8003470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003474:	ed2d 8b0a 	vpush	{d8-d12}
 8003478:	8803      	ldrh	r3, [r0, #0]
 800347a:	6842      	ldr	r2, [r0, #4]
 800347c:	b08d      	sub	sp, #52	; 0x34
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	900a      	str	r0, [sp, #40]	; 0x28
 8003482:	4608      	mov	r0, r1
 8003484:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003488:	edd1 5a00 	vldr	s11, [r1]
 800348c:	edd0 7a00 	vldr	s15, [r0]
 8003490:	edd1 3a01 	vldr	s7, [r1, #4]
 8003494:	ed90 5a01 	vldr	s10, [r0, #4]
 8003498:	9108      	str	r1, [sp, #32]
 800349a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800349e:	ed96 7a00 	vldr	s14, [r6]
 80034a2:	ed96 4a01 	vldr	s8, [r6, #4]
 80034a6:	9607      	str	r6, [sp, #28]
 80034a8:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80034ac:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 80034b0:	edd8 4a00 	vldr	s9, [r8]
 80034b4:	ed98 3a01 	vldr	s6, [r8, #4]
 80034b8:	ee77 6a06 	vadd.f32	s13, s14, s12
 80034bc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80034c0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80034c4:	4604      	mov	r4, r0
 80034c6:	edc0 6a00 	vstr	s13, [r0]
 80034ca:	edd6 5a01 	vldr	s11, [r6, #4]
 80034ce:	edd8 2a01 	vldr	s5, [r8, #4]
 80034d2:	ee75 6a23 	vadd.f32	s13, s10, s7
 80034d6:	ee35 5a63 	vsub.f32	s10, s10, s7
 80034da:	ee36 6a47 	vsub.f32	s12, s12, s14
 80034de:	ee74 3a27 	vadd.f32	s7, s8, s15
 80034e2:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80034e6:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80034ea:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80034ee:	3408      	adds	r4, #8
 80034f0:	ee35 4a47 	vsub.f32	s8, s10, s14
 80034f4:	460d      	mov	r5, r1
 80034f6:	ee37 7a05 	vadd.f32	s14, s14, s10
 80034fa:	4637      	mov	r7, r6
 80034fc:	9402      	str	r4, [sp, #8]
 80034fe:	3708      	adds	r7, #8
 8003500:	460c      	mov	r4, r1
 8003502:	3508      	adds	r5, #8
 8003504:	0859      	lsrs	r1, r3, #1
 8003506:	9109      	str	r1, [sp, #36]	; 0x24
 8003508:	9706      	str	r7, [sp, #24]
 800350a:	9505      	str	r5, [sp, #20]
 800350c:	f102 0708 	add.w	r7, r2, #8
 8003510:	ee36 6a64 	vsub.f32	s12, s12, s9
 8003514:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003518:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800351c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003520:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003524:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003528:	ee37 7a64 	vsub.f32	s14, s14, s9
 800352c:	3902      	subs	r1, #2
 800352e:	4645      	mov	r5, r8
 8003530:	9701      	str	r7, [sp, #4]
 8003532:	f102 0c18 	add.w	ip, r2, #24
 8003536:	f102 0710 	add.w	r7, r2, #16
 800353a:	3508      	adds	r5, #8
 800353c:	0849      	lsrs	r1, r1, #1
 800353e:	edc0 5a01 	vstr	s11, [r0, #4]
 8003542:	9703      	str	r7, [sp, #12]
 8003544:	edc6 3a00 	vstr	s7, [r6]
 8003548:	ed86 5a01 	vstr	s10, [r6, #4]
 800354c:	f8cd c000 	str.w	ip, [sp]
 8003550:	ed84 6a00 	vstr	s12, [r4]
 8003554:	edc4 6a01 	vstr	s13, [r4, #4]
 8003558:	9504      	str	r5, [sp, #16]
 800355a:	edc8 7a00 	vstr	s15, [r8]
 800355e:	ed88 7a01 	vstr	s14, [r8, #4]
 8003562:	910b      	str	r1, [sp, #44]	; 0x2c
 8003564:	f000 8138 	beq.w	80037d8 <arm_cfft_radix8by4_f32+0x368>
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3b0c      	subs	r3, #12
 800356c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003570:	f106 0510 	add.w	r5, r6, #16
 8003574:	4626      	mov	r6, r4
 8003576:	46bb      	mov	fp, r7
 8003578:	f102 0a20 	add.w	sl, r2, #32
 800357c:	f102 0930 	add.w	r9, r2, #48	; 0x30
 8003580:	f106 0710 	add.w	r7, r6, #16
 8003584:	4443      	add	r3, r8
 8003586:	f100 0e10 	add.w	lr, r0, #16
 800358a:	3c0c      	subs	r4, #12
 800358c:	f1a8 060c 	sub.w	r6, r8, #12
 8003590:	f108 0210 	add.w	r2, r8, #16
 8003594:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003598:	ed57 5a02 	vldr	s11, [r7, #-8]
 800359c:	ed55 7a02 	vldr	s15, [r5, #-8]
 80035a0:	ed52 1a02 	vldr	s3, [r2, #-8]
 80035a4:	ed57 6a01 	vldr	s13, [r7, #-4]
 80035a8:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80035ac:	ed12 1a01 	vldr	s2, [r2, #-4]
 80035b0:	ed15 8a01 	vldr	s16, [r5, #-4]
 80035b4:	ee35 4a25 	vadd.f32	s8, s10, s11
 80035b8:	ee30 6a26 	vadd.f32	s12, s0, s13
 80035bc:	ee37 7a84 	vadd.f32	s14, s15, s8
 80035c0:	ee30 0a66 	vsub.f32	s0, s0, s13
 80035c4:	ee37 7a21 	vadd.f32	s14, s14, s3
 80035c8:	ee75 5a65 	vsub.f32	s11, s10, s11
 80035cc:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80035d0:	ed15 7a01 	vldr	s14, [r5, #-4]
 80035d4:	ed52 6a01 	vldr	s13, [r2, #-4]
 80035d8:	ee36 7a07 	vadd.f32	s14, s12, s14
 80035dc:	ee78 aa25 	vadd.f32	s21, s16, s11
 80035e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80035e4:	ee70 3a67 	vsub.f32	s7, s0, s15
 80035e8:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80035ec:	ed96 7a02 	vldr	s14, [r6, #8]
 80035f0:	ed9c 2a02 	vldr	s4, [ip, #8]
 80035f4:	ed94 ba02 	vldr	s22, [r4, #8]
 80035f8:	edd3 9a02 	vldr	s19, [r3, #8]
 80035fc:	edd6 2a01 	vldr	s5, [r6, #4]
 8003600:	ed9c 9a01 	vldr	s18, [ip, #4]
 8003604:	ed93 5a01 	vldr	s10, [r3, #4]
 8003608:	edd4 0a01 	vldr	s1, [r4, #4]
 800360c:	ee72 6a07 	vadd.f32	s13, s4, s14
 8003610:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003614:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8003618:	ee79 4a22 	vadd.f32	s9, s18, s5
 800361c:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8003620:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003624:	ed8c 7a02 	vstr	s14, [ip, #8]
 8003628:	ed94 7a01 	vldr	s14, [r4, #4]
 800362c:	edd3 8a01 	vldr	s17, [r3, #4]
 8003630:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003634:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003638:	ee37 7a28 	vadd.f32	s14, s14, s17
 800363c:	ee32 9a60 	vsub.f32	s18, s4, s1
 8003640:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003644:	ed1b 7a01 	vldr	s14, [fp, #-4]
 8003648:	ed1b aa02 	vldr	s20, [fp, #-8]
 800364c:	ee73 8a22 	vadd.f32	s17, s6, s5
 8003650:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003654:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003658:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800365c:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8003660:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003664:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003668:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800366c:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003670:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003674:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003678:	ee68 8a87 	vmul.f32	s17, s17, s14
 800367c:	ee73 3aea 	vsub.f32	s7, s7, s21
 8003680:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003684:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003688:	ee3b aaca 	vsub.f32	s20, s23, s20
 800368c:	ee34 4a67 	vsub.f32	s8, s8, s15
 8003690:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003694:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003698:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800369c:	ed05 7a02 	vstr	s14, [r5, #-8]
 80036a0:	ed45 3a01 	vstr	s7, [r5, #-4]
 80036a4:	edc4 8a01 	vstr	s17, [r4, #4]
 80036a8:	ed84 aa02 	vstr	s20, [r4, #8]
 80036ac:	ed5a 3a04 	vldr	s7, [sl, #-16]
 80036b0:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80036b4:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80036b8:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80036bc:	ee34 4a61 	vsub.f32	s8, s8, s3
 80036c0:	ee36 6a41 	vsub.f32	s12, s12, s2
 80036c4:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80036c8:	ee66 9a26 	vmul.f32	s19, s12, s13
 80036cc:	ee24 9a23 	vmul.f32	s18, s8, s7
 80036d0:	ee26 6a23 	vmul.f32	s12, s12, s7
 80036d4:	ee24 4a26 	vmul.f32	s8, s8, s13
 80036d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80036dc:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80036e0:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80036e4:	ee36 6a44 	vsub.f32	s12, s12, s8
 80036e8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80036ec:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80036f0:	ee79 3a29 	vadd.f32	s7, s18, s19
 80036f4:	ee75 6a60 	vsub.f32	s13, s10, s1
 80036f8:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80036fc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003700:	ed47 3a02 	vstr	s7, [r7, #-8]
 8003704:	ed07 6a01 	vstr	s12, [r7, #-4]
 8003708:	ed86 7a01 	vstr	s14, [r6, #4]
 800370c:	ed86 4a02 	vstr	s8, [r6, #8]
 8003710:	ee35 6a81 	vadd.f32	s12, s11, s2
 8003714:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8003718:	ed59 5a06 	vldr	s11, [r9, #-24]	; 0xffffffe8
 800371c:	ed59 6a05 	vldr	s13, [r9, #-20]	; 0xffffffec
 8003720:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003724:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8003728:	ee67 2a26 	vmul.f32	s5, s14, s13
 800372c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8003730:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003734:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003738:	ee26 6a26 	vmul.f32	s12, s12, s13
 800373c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003740:	ee63 6a26 	vmul.f32	s13, s6, s13
 8003744:	ee23 3a25 	vmul.f32	s6, s6, s11
 8003748:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800374c:	ee75 5a24 	vadd.f32	s11, s10, s9
 8003750:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8003754:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003758:	3901      	subs	r1, #1
 800375a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800375e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003762:	f10e 0e08 	add.w	lr, lr, #8
 8003766:	ed83 3a02 	vstr	s6, [r3, #8]
 800376a:	ed83 7a01 	vstr	s14, [r3, #4]
 800376e:	f1ac 0c08 	sub.w	ip, ip, #8
 8003772:	f10b 0b08 	add.w	fp, fp, #8
 8003776:	f105 0508 	add.w	r5, r5, #8
 800377a:	f1a4 0408 	sub.w	r4, r4, #8
 800377e:	f10a 0a10 	add.w	sl, sl, #16
 8003782:	f107 0708 	add.w	r7, r7, #8
 8003786:	f1a6 0608 	sub.w	r6, r6, #8
 800378a:	f109 0918 	add.w	r9, r9, #24
 800378e:	f102 0208 	add.w	r2, r2, #8
 8003792:	f1a3 0308 	sub.w	r3, r3, #8
 8003796:	f47f aefd 	bne.w	8003594 <arm_cfft_radix8by4_f32+0x124>
 800379a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800379c:	9902      	ldr	r1, [sp, #8]
 800379e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80037a2:	9102      	str	r1, [sp, #8]
 80037a4:	9901      	ldr	r1, [sp, #4]
 80037a6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80037aa:	9101      	str	r1, [sp, #4]
 80037ac:	9906      	ldr	r1, [sp, #24]
 80037ae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80037b2:	9106      	str	r1, [sp, #24]
 80037b4:	9903      	ldr	r1, [sp, #12]
 80037b6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80037ba:	9103      	str	r1, [sp, #12]
 80037bc:	9905      	ldr	r1, [sp, #20]
 80037be:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80037c2:	9105      	str	r1, [sp, #20]
 80037c4:	9904      	ldr	r1, [sp, #16]
 80037c6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80037ca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80037ce:	9204      	str	r2, [sp, #16]
 80037d0:	9a00      	ldr	r2, [sp, #0]
 80037d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	9902      	ldr	r1, [sp, #8]
 80037da:	9d05      	ldr	r5, [sp, #20]
 80037dc:	ed91 4a00 	vldr	s8, [r1]
 80037e0:	edd5 6a00 	vldr	s13, [r5]
 80037e4:	9b06      	ldr	r3, [sp, #24]
 80037e6:	9c04      	ldr	r4, [sp, #16]
 80037e8:	edd3 7a00 	vldr	s15, [r3]
 80037ec:	ed94 3a00 	vldr	s6, [r4]
 80037f0:	edd5 4a01 	vldr	s9, [r5, #4]
 80037f4:	edd1 3a01 	vldr	s7, [r1, #4]
 80037f8:	ed94 2a01 	vldr	s4, [r4, #4]
 80037fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003800:	9a01      	ldr	r2, [sp, #4]
 8003802:	ee34 6a26 	vadd.f32	s12, s8, s13
 8003806:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800380a:	ee37 5a86 	vadd.f32	s10, s15, s12
 800380e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003812:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003816:	ee74 6a66 	vsub.f32	s13, s8, s13
 800381a:	ed81 5a00 	vstr	s10, [r1]
 800381e:	ed93 5a01 	vldr	s10, [r3, #4]
 8003822:	edd4 4a01 	vldr	s9, [r4, #4]
 8003826:	ee35 5a85 	vadd.f32	s10, s11, s10
 800382a:	ee37 4a26 	vadd.f32	s8, s14, s13
 800382e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003832:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8003836:	ed81 5a01 	vstr	s10, [r1, #4]
 800383a:	edd2 1a00 	vldr	s3, [r2]
 800383e:	edd2 2a01 	vldr	s5, [r2, #4]
 8003842:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003846:	ee34 5a83 	vadd.f32	s10, s9, s6
 800384a:	ee34 4a42 	vsub.f32	s8, s8, s4
 800384e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003852:	ee64 4a21 	vmul.f32	s9, s8, s3
 8003856:	ee24 4a22 	vmul.f32	s8, s8, s5
 800385a:	ee65 2a22 	vmul.f32	s5, s10, s5
 800385e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003862:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003866:	ee35 5a44 	vsub.f32	s10, s10, s8
 800386a:	edc3 2a00 	vstr	s5, [r3]
 800386e:	ed83 5a01 	vstr	s10, [r3, #4]
 8003872:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8003876:	9b03      	ldr	r3, [sp, #12]
 8003878:	ee36 6a43 	vsub.f32	s12, s12, s6
 800387c:	ed93 4a01 	vldr	s8, [r3, #4]
 8003880:	ed93 5a00 	vldr	s10, [r3]
 8003884:	9b00      	ldr	r3, [sp, #0]
 8003886:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800388a:	ee66 4a05 	vmul.f32	s9, s12, s10
 800388e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8003892:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003896:	ee65 5a84 	vmul.f32	s11, s11, s8
 800389a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800389e:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80038a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80038a6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80038aa:	ed85 6a01 	vstr	s12, [r5, #4]
 80038ae:	edc5 5a00 	vstr	s11, [r5]
 80038b2:	edd3 5a01 	vldr	s11, [r3, #4]
 80038b6:	edd3 6a00 	vldr	s13, [r3]
 80038ba:	ee37 7a02 	vadd.f32	s14, s14, s4
 80038be:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80038c2:	ee27 6a26 	vmul.f32	s12, s14, s13
 80038c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80038ca:	ee27 7a25 	vmul.f32	s14, s14, s11
 80038ce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80038d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80038d6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80038da:	ed84 7a01 	vstr	s14, [r4, #4]
 80038de:	edc4 7a00 	vstr	s15, [r4]
 80038e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80038e4:	9100      	str	r1, [sp, #0]
 80038e6:	6862      	ldr	r2, [r4, #4]
 80038e8:	2304      	movs	r3, #4
 80038ea:	f000 f9d3 	bl	8003c94 <arm_radix8_butterfly_f32>
 80038ee:	9807      	ldr	r0, [sp, #28]
 80038f0:	9900      	ldr	r1, [sp, #0]
 80038f2:	6862      	ldr	r2, [r4, #4]
 80038f4:	2304      	movs	r3, #4
 80038f6:	f000 f9cd 	bl	8003c94 <arm_radix8_butterfly_f32>
 80038fa:	9808      	ldr	r0, [sp, #32]
 80038fc:	9900      	ldr	r1, [sp, #0]
 80038fe:	6862      	ldr	r2, [r4, #4]
 8003900:	2304      	movs	r3, #4
 8003902:	f000 f9c7 	bl	8003c94 <arm_radix8_butterfly_f32>
 8003906:	9900      	ldr	r1, [sp, #0]
 8003908:	6862      	ldr	r2, [r4, #4]
 800390a:	4640      	mov	r0, r8
 800390c:	2304      	movs	r3, #4
 800390e:	b00d      	add	sp, #52	; 0x34
 8003910:	ecbd 8b0a 	vpop	{d8-d12}
 8003914:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003918:	f000 b9bc 	b.w	8003c94 <arm_radix8_butterfly_f32>

0800391c <arm_cfft_f32>:
 800391c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003920:	2a01      	cmp	r2, #1
 8003922:	8805      	ldrh	r5, [r0, #0]
 8003924:	4607      	mov	r7, r0
 8003926:	4690      	mov	r8, r2
 8003928:	460c      	mov	r4, r1
 800392a:	4699      	mov	r9, r3
 800392c:	d05c      	beq.n	80039e8 <arm_cfft_f32+0xcc>
 800392e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003932:	d054      	beq.n	80039de <arm_cfft_f32+0xc2>
 8003934:	d810      	bhi.n	8003958 <arm_cfft_f32+0x3c>
 8003936:	2d40      	cmp	r5, #64	; 0x40
 8003938:	d015      	beq.n	8003966 <arm_cfft_f32+0x4a>
 800393a:	d94c      	bls.n	80039d6 <arm_cfft_f32+0xba>
 800393c:	2d80      	cmp	r5, #128	; 0x80
 800393e:	d103      	bne.n	8003948 <arm_cfft_f32+0x2c>
 8003940:	4621      	mov	r1, r4
 8003942:	4638      	mov	r0, r7
 8003944:	f7ff fcc2 	bl	80032cc <arm_cfft_radix8by2_f32>
 8003948:	f1b9 0f00 	cmp.w	r9, #0
 800394c:	d114      	bne.n	8003978 <arm_cfft_f32+0x5c>
 800394e:	f1b8 0f01 	cmp.w	r8, #1
 8003952:	d019      	beq.n	8003988 <arm_cfft_f32+0x6c>
 8003954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003958:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800395c:	d03f      	beq.n	80039de <arm_cfft_f32+0xc2>
 800395e:	d933      	bls.n	80039c8 <arm_cfft_f32+0xac>
 8003960:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8003964:	d1f0      	bne.n	8003948 <arm_cfft_f32+0x2c>
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	2301      	movs	r3, #1
 800396a:	4629      	mov	r1, r5
 800396c:	4620      	mov	r0, r4
 800396e:	f000 f991 	bl	8003c94 <arm_radix8_butterfly_f32>
 8003972:	f1b9 0f00 	cmp.w	r9, #0
 8003976:	d0ea      	beq.n	800394e <arm_cfft_f32+0x32>
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	89b9      	ldrh	r1, [r7, #12]
 800397c:	4620      	mov	r0, r4
 800397e:	f000 f845 	bl	8003a0c <arm_bitreversal_32>
 8003982:	f1b8 0f01 	cmp.w	r8, #1
 8003986:	d1e5      	bne.n	8003954 <arm_cfft_f32+0x38>
 8003988:	ee07 5a90 	vmov	s15, r5
 800398c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003994:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003998:	2d00      	cmp	r5, #0
 800399a:	d0db      	beq.n	8003954 <arm_cfft_f32+0x38>
 800399c:	f104 0108 	add.w	r1, r4, #8
 80039a0:	2300      	movs	r3, #0
 80039a2:	3301      	adds	r3, #1
 80039a4:	429d      	cmp	r5, r3
 80039a6:	f101 0108 	add.w	r1, r1, #8
 80039aa:	ed11 7a04 	vldr	s14, [r1, #-16]
 80039ae:	ed51 7a03 	vldr	s15, [r1, #-12]
 80039b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80039b6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80039ba:	ed01 7a04 	vstr	s14, [r1, #-16]
 80039be:	ed41 7a03 	vstr	s15, [r1, #-12]
 80039c2:	d1ee      	bne.n	80039a2 <arm_cfft_f32+0x86>
 80039c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80039cc:	d0cb      	beq.n	8003966 <arm_cfft_f32+0x4a>
 80039ce:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80039d2:	d0b5      	beq.n	8003940 <arm_cfft_f32+0x24>
 80039d4:	e7b8      	b.n	8003948 <arm_cfft_f32+0x2c>
 80039d6:	2d10      	cmp	r5, #16
 80039d8:	d0b2      	beq.n	8003940 <arm_cfft_f32+0x24>
 80039da:	2d20      	cmp	r5, #32
 80039dc:	d1b4      	bne.n	8003948 <arm_cfft_f32+0x2c>
 80039de:	4621      	mov	r1, r4
 80039e0:	4638      	mov	r0, r7
 80039e2:	f7ff fd45 	bl	8003470 <arm_cfft_radix8by4_f32>
 80039e6:	e7af      	b.n	8003948 <arm_cfft_f32+0x2c>
 80039e8:	b16d      	cbz	r5, 8003a06 <arm_cfft_f32+0xea>
 80039ea:	310c      	adds	r1, #12
 80039ec:	2600      	movs	r6, #0
 80039ee:	ed51 7a02 	vldr	s15, [r1, #-8]
 80039f2:	3601      	adds	r6, #1
 80039f4:	eef1 7a67 	vneg.f32	s15, s15
 80039f8:	42b5      	cmp	r5, r6
 80039fa:	ed41 7a02 	vstr	s15, [r1, #-8]
 80039fe:	f101 0108 	add.w	r1, r1, #8
 8003a02:	d1f4      	bne.n	80039ee <arm_cfft_f32+0xd2>
 8003a04:	e793      	b.n	800392e <arm_cfft_f32+0x12>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0a4      	beq.n	8003954 <arm_cfft_f32+0x38>
 8003a0a:	e7b5      	b.n	8003978 <arm_cfft_f32+0x5c>

08003a0c <arm_bitreversal_32>:
 8003a0c:	b1e9      	cbz	r1, 8003a4a <arm_bitreversal_32+0x3e>
 8003a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a10:	2500      	movs	r5, #0
 8003a12:	f102 0e02 	add.w	lr, r2, #2
 8003a16:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8003a1a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8003a1e:	08a4      	lsrs	r4, r4, #2
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8003a26:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8003a2a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8003a2e:	00a6      	lsls	r6, r4, #2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8003a36:	3304      	adds	r3, #4
 8003a38:	1d34      	adds	r4, r6, #4
 8003a3a:	3502      	adds	r5, #2
 8003a3c:	58c6      	ldr	r6, [r0, r3]
 8003a3e:	5907      	ldr	r7, [r0, r4]
 8003a40:	50c7      	str	r7, [r0, r3]
 8003a42:	428d      	cmp	r5, r1
 8003a44:	5106      	str	r6, [r0, r4]
 8003a46:	d3e6      	bcc.n	8003a16 <arm_bitreversal_32+0xa>
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4a:	4770      	bx	lr

08003a4c <arm_cmplx_mag_f32>:
 8003a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a50:	ed2d 8b02 	vpush	{d8}
 8003a54:	0897      	lsrs	r7, r2, #2
 8003a56:	b084      	sub	sp, #16
 8003a58:	d077      	beq.n	8003b4a <arm_cmplx_mag_f32+0xfe>
 8003a5a:	f04f 0800 	mov.w	r8, #0
 8003a5e:	f100 0420 	add.w	r4, r0, #32
 8003a62:	f101 0510 	add.w	r5, r1, #16
 8003a66:	463e      	mov	r6, r7
 8003a68:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8003a6c:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8003a70:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003a74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003a7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a84:	f2c0 80c5 	blt.w	8003c12 <arm_cmplx_mag_f32+0x1c6>
 8003a88:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003a94:	f100 80cb 	bmi.w	8003c2e <arm_cmplx_mag_f32+0x1e2>
 8003a98:	ed05 8a04 	vstr	s16, [r5, #-16]
 8003a9c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8003aa0:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8003aa4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003aa8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003aac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ab0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab8:	f2c0 80a8 	blt.w	8003c0c <arm_cmplx_mag_f32+0x1c0>
 8003abc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003ac8:	f100 80a8 	bmi.w	8003c1c <arm_cmplx_mag_f32+0x1d0>
 8003acc:	ed05 8a03 	vstr	s16, [r5, #-12]
 8003ad0:	ed14 0a04 	vldr	s0, [r4, #-16]
 8003ad4:	ed54 7a03 	vldr	s15, [r4, #-12]
 8003ad8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003adc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ae0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ae4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aec:	f2c0 808b 	blt.w	8003c06 <arm_cmplx_mag_f32+0x1ba>
 8003af0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003afc:	f100 80a9 	bmi.w	8003c52 <arm_cmplx_mag_f32+0x206>
 8003b00:	ed05 8a02 	vstr	s16, [r5, #-8]
 8003b04:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003b08:	ed54 7a01 	vldr	s15, [r4, #-4]
 8003b0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003b10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003b18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b20:	db6e      	blt.n	8003c00 <arm_cmplx_mag_f32+0x1b4>
 8003b22:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003b2e:	f100 8087 	bmi.w	8003c40 <arm_cmplx_mag_f32+0x1f4>
 8003b32:	ed05 8a01 	vstr	s16, [r5, #-4]
 8003b36:	3e01      	subs	r6, #1
 8003b38:	f104 0420 	add.w	r4, r4, #32
 8003b3c:	f105 0510 	add.w	r5, r5, #16
 8003b40:	d192      	bne.n	8003a68 <arm_cmplx_mag_f32+0x1c>
 8003b42:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8003b46:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8003b4a:	f012 0203 	ands.w	r2, r2, #3
 8003b4e:	d052      	beq.n	8003bf6 <arm_cmplx_mag_f32+0x1aa>
 8003b50:	ed90 0a00 	vldr	s0, [r0]
 8003b54:	edd0 7a01 	vldr	s15, [r0, #4]
 8003b58:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003b5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b60:	2300      	movs	r3, #0
 8003b62:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003b66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	bfb8      	it	lt
 8003b70:	600b      	strlt	r3, [r1, #0]
 8003b72:	db08      	blt.n	8003b86 <arm_cmplx_mag_f32+0x13a>
 8003b74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003b80:	d479      	bmi.n	8003c76 <arm_cmplx_mag_f32+0x22a>
 8003b82:	ed81 8a00 	vstr	s16, [r1]
 8003b86:	3a01      	subs	r2, #1
 8003b88:	d035      	beq.n	8003bf6 <arm_cmplx_mag_f32+0x1aa>
 8003b8a:	ed90 0a02 	vldr	s0, [r0, #8]
 8003b8e:	edd0 7a03 	vldr	s15, [r0, #12]
 8003b92:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003b96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003ba0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba8:	bfb8      	it	lt
 8003baa:	604b      	strlt	r3, [r1, #4]
 8003bac:	db08      	blt.n	8003bc0 <arm_cmplx_mag_f32+0x174>
 8003bae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003bba:	d453      	bmi.n	8003c64 <arm_cmplx_mag_f32+0x218>
 8003bbc:	ed81 8a01 	vstr	s16, [r1, #4]
 8003bc0:	2a01      	cmp	r2, #1
 8003bc2:	d018      	beq.n	8003bf6 <arm_cmplx_mag_f32+0x1aa>
 8003bc4:	ed90 0a04 	vldr	s0, [r0, #16]
 8003bc8:	edd0 7a05 	vldr	s15, [r0, #20]
 8003bcc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003bd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003bda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	db19      	blt.n	8003c18 <arm_cmplx_mag_f32+0x1cc>
 8003be4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8003bf0:	d44a      	bmi.n	8003c88 <arm_cmplx_mag_f32+0x23c>
 8003bf2:	ed81 8a02 	vstr	s16, [r1, #8]
 8003bf6:	b004      	add	sp, #16
 8003bf8:	ecbd 8b02 	vpop	{d8}
 8003bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c00:	f845 8c04 	str.w	r8, [r5, #-4]
 8003c04:	e797      	b.n	8003b36 <arm_cmplx_mag_f32+0xea>
 8003c06:	f845 8c08 	str.w	r8, [r5, #-8]
 8003c0a:	e77b      	b.n	8003b04 <arm_cmplx_mag_f32+0xb8>
 8003c0c:	f845 8c0c 	str.w	r8, [r5, #-12]
 8003c10:	e75e      	b.n	8003ad0 <arm_cmplx_mag_f32+0x84>
 8003c12:	f845 8c10 	str.w	r8, [r5, #-16]
 8003c16:	e741      	b.n	8003a9c <arm_cmplx_mag_f32+0x50>
 8003c18:	608b      	str	r3, [r1, #8]
 8003c1a:	e7ec      	b.n	8003bf6 <arm_cmplx_mag_f32+0x1aa>
 8003c1c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003c20:	9001      	str	r0, [sp, #4]
 8003c22:	f000 fd29 	bl	8004678 <sqrtf>
 8003c26:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003c2a:	9801      	ldr	r0, [sp, #4]
 8003c2c:	e74e      	b.n	8003acc <arm_cmplx_mag_f32+0x80>
 8003c2e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003c32:	9001      	str	r0, [sp, #4]
 8003c34:	f000 fd20 	bl	8004678 <sqrtf>
 8003c38:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003c3c:	9801      	ldr	r0, [sp, #4]
 8003c3e:	e72b      	b.n	8003a98 <arm_cmplx_mag_f32+0x4c>
 8003c40:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003c44:	9001      	str	r0, [sp, #4]
 8003c46:	f000 fd17 	bl	8004678 <sqrtf>
 8003c4a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003c4e:	9801      	ldr	r0, [sp, #4]
 8003c50:	e76f      	b.n	8003b32 <arm_cmplx_mag_f32+0xe6>
 8003c52:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003c56:	9001      	str	r0, [sp, #4]
 8003c58:	f000 fd0e 	bl	8004678 <sqrtf>
 8003c5c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003c60:	9801      	ldr	r0, [sp, #4]
 8003c62:	e74d      	b.n	8003b00 <arm_cmplx_mag_f32+0xb4>
 8003c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c68:	9201      	str	r2, [sp, #4]
 8003c6a:	f000 fd05 	bl	8004678 <sqrtf>
 8003c6e:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8003c72:	9903      	ldr	r1, [sp, #12]
 8003c74:	e7a2      	b.n	8003bbc <arm_cmplx_mag_f32+0x170>
 8003c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c7a:	9201      	str	r2, [sp, #4]
 8003c7c:	f000 fcfc 	bl	8004678 <sqrtf>
 8003c80:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8003c84:	9903      	ldr	r1, [sp, #12]
 8003c86:	e77c      	b.n	8003b82 <arm_cmplx_mag_f32+0x136>
 8003c88:	9101      	str	r1, [sp, #4]
 8003c8a:	f000 fcf5 	bl	8004678 <sqrtf>
 8003c8e:	9901      	ldr	r1, [sp, #4]
 8003c90:	e7af      	b.n	8003bf2 <arm_cmplx_mag_f32+0x1a6>
 8003c92:	bf00      	nop

08003c94 <arm_radix8_butterfly_f32>:
 8003c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c98:	ed2d 8b10 	vpush	{d8-d15}
 8003c9c:	b093      	sub	sp, #76	; 0x4c
 8003c9e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	ed9f bac0 	vldr	s22, [pc, #768]	; 8003fa8 <arm_radix8_butterfly_f32+0x314>
 8003caa:	9010      	str	r0, [sp, #64]	; 0x40
 8003cac:	468b      	mov	fp, r1
 8003cae:	9311      	str	r3, [sp, #68]	; 0x44
 8003cb0:	4689      	mov	r9, r1
 8003cb2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003cb4:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8003cb8:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8003cbc:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8003cc0:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 8003cc4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8003cc8:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8003ccc:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8003cd0:	9100      	str	r1, [sp, #0]
 8003cd2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8003cd6:	f108 0004 	add.w	r0, r8, #4
 8003cda:	f10e 0104 	add.w	r1, lr, #4
 8003cde:	462e      	mov	r6, r5
 8003ce0:	4420      	add	r0, r4
 8003ce2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ce6:	4421      	add	r1, r4
 8003ce8:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8003cec:	960d      	str	r6, [sp, #52]	; 0x34
 8003cee:	9402      	str	r4, [sp, #8]
 8003cf0:	012c      	lsls	r4, r5, #4
 8003cf2:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8003cf6:	9403      	str	r4, [sp, #12]
 8003cf8:	00ec      	lsls	r4, r5, #3
 8003cfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003cfc:	9404      	str	r4, [sp, #16]
 8003cfe:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8003d02:	9405      	str	r4, [sp, #20]
 8003d04:	016c      	lsls	r4, r5, #5
 8003d06:	9401      	str	r4, [sp, #4]
 8003d08:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003d0a:	9c00      	ldr	r4, [sp, #0]
 8003d0c:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8003d10:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8003d14:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003d18:	f04f 0c00 	mov.w	ip, #0
 8003d1c:	edd6 6a00 	vldr	s13, [r6]
 8003d20:	edd7 1a00 	vldr	s3, [r7]
 8003d24:	ed15 aa01 	vldr	s20, [r5, #-4]
 8003d28:	edd2 5a00 	vldr	s11, [r2]
 8003d2c:	ed51 9a01 	vldr	s19, [r1, #-4]
 8003d30:	ed94 6a00 	vldr	s12, [r4]
 8003d34:	ed50 7a01 	vldr	s15, [r0, #-4]
 8003d38:	ed93 3a00 	vldr	s6, [r3]
 8003d3c:	ee39 0a86 	vadd.f32	s0, s19, s12
 8003d40:	ee33 2a21 	vadd.f32	s4, s6, s3
 8003d44:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8003d48:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8003d4c:	ee35 7a02 	vadd.f32	s14, s10, s4
 8003d50:	ee34 4a80 	vadd.f32	s8, s9, s0
 8003d54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d58:	ee74 6a07 	vadd.f32	s13, s8, s14
 8003d5c:	ee34 4a47 	vsub.f32	s8, s8, s14
 8003d60:	ed45 6a01 	vstr	s13, [r5, #-4]
 8003d64:	ed82 4a00 	vstr	s8, [r2]
 8003d68:	edd0 6a00 	vldr	s13, [r0]
 8003d6c:	ed96 9a01 	vldr	s18, [r6, #4]
 8003d70:	edd3 2a01 	vldr	s5, [r3, #4]
 8003d74:	edd7 8a01 	vldr	s17, [r7, #4]
 8003d78:	edd5 0a00 	vldr	s1, [r5]
 8003d7c:	edd2 3a01 	vldr	s7, [r2, #4]
 8003d80:	ed94 8a01 	vldr	s16, [r4, #4]
 8003d84:	ed91 7a00 	vldr	s14, [r1]
 8003d88:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003d8c:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8003d90:	ee72 aae8 	vsub.f32	s21, s5, s17
 8003d94:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8003d98:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8003d9c:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003da0:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8003da4:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8003da8:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8003dac:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8003db0:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8003db4:	ee77 0a08 	vadd.f32	s1, s14, s16
 8003db8:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8003dbc:	ee37 7a48 	vsub.f32	s14, s14, s16
 8003dc0:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8003dc4:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8003dc8:	ee76 6a89 	vadd.f32	s13, s13, s18
 8003dcc:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8003dd0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8003dd4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003dd8:	ee35 5a42 	vsub.f32	s10, s10, s4
 8003ddc:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8003de0:	ee33 2a20 	vadd.f32	s4, s6, s1
 8003de4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003de8:	ee33 3a60 	vsub.f32	s6, s6, s1
 8003dec:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8003df0:	ee77 0a01 	vadd.f32	s1, s14, s2
 8003df4:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8003df8:	ee37 7a41 	vsub.f32	s14, s14, s2
 8003dfc:	ee73 1a84 	vadd.f32	s3, s7, s8
 8003e00:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8003e04:	ee76 3a27 	vadd.f32	s7, s12, s15
 8003e08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e0c:	ee32 8a00 	vadd.f32	s16, s4, s0
 8003e10:	ee33 1a45 	vsub.f32	s2, s6, s10
 8003e14:	ee32 2a40 	vsub.f32	s4, s4, s0
 8003e18:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003e1c:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8003e20:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8003e24:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8003e28:	ee34 6a67 	vsub.f32	s12, s8, s15
 8003e2c:	ee75 4a87 	vadd.f32	s9, s11, s14
 8003e30:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8003e34:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8003e38:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003e3c:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8003e40:	44dc      	add	ip, fp
 8003e42:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003e46:	45e1      	cmp	r9, ip
 8003e48:	ed85 8a00 	vstr	s16, [r5]
 8003e4c:	ed82 2a01 	vstr	s4, [r2, #4]
 8003e50:	4455      	add	r5, sl
 8003e52:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003e56:	4452      	add	r2, sl
 8003e58:	edc4 6a00 	vstr	s13, [r4]
 8003e5c:	ed81 1a00 	vstr	s2, [r1]
 8003e60:	ed84 5a01 	vstr	s10, [r4, #4]
 8003e64:	4451      	add	r1, sl
 8003e66:	ed00 3a01 	vstr	s6, [r0, #-4]
 8003e6a:	4454      	add	r4, sl
 8003e6c:	edc7 2a00 	vstr	s5, [r7]
 8003e70:	edc6 4a00 	vstr	s9, [r6]
 8003e74:	ed83 7a00 	vstr	s14, [r3]
 8003e78:	edc0 5a00 	vstr	s11, [r0]
 8003e7c:	edc7 3a01 	vstr	s7, [r7, #4]
 8003e80:	4450      	add	r0, sl
 8003e82:	ed86 6a01 	vstr	s12, [r6, #4]
 8003e86:	4457      	add	r7, sl
 8003e88:	edc3 7a01 	vstr	s15, [r3, #4]
 8003e8c:	4456      	add	r6, sl
 8003e8e:	4453      	add	r3, sl
 8003e90:	f63f af44 	bhi.w	8003d1c <arm_radix8_butterfly_f32+0x88>
 8003e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e96:	2b07      	cmp	r3, #7
 8003e98:	f240 81c3 	bls.w	8004222 <arm_radix8_butterfly_f32+0x58e>
 8003e9c:	9805      	ldr	r0, [sp, #20]
 8003e9e:	9a01      	ldr	r2, [sp, #4]
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	9d04      	ldr	r5, [sp, #16]
 8003ea4:	9902      	ldr	r1, [sp, #8]
 8003ea6:	f100 0c08 	add.w	ip, r0, #8
 8003eaa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003eac:	3208      	adds	r2, #8
 8003eae:	1882      	adds	r2, r0, r2
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	920a      	str	r2, [sp, #40]	; 0x28
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	18d3      	adds	r3, r2, r3
 8003eb8:	3108      	adds	r1, #8
 8003eba:	3508      	adds	r5, #8
 8003ebc:	1851      	adds	r1, r2, r1
 8003ebe:	9307      	str	r3, [sp, #28]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	442a      	add	r2, r5
 8003ec4:	9206      	str	r2, [sp, #24]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4462      	add	r2, ip
 8003eca:	f10e 0e0c 	add.w	lr, lr, #12
 8003ece:	9205      	str	r2, [sp, #20]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4472      	add	r2, lr
 8003ed4:	f108 0808 	add.w	r8, r8, #8
 8003ed8:	330c      	adds	r3, #12
 8003eda:	4440      	add	r0, r8
 8003edc:	f04f 0e00 	mov.w	lr, #0
 8003ee0:	9203      	str	r2, [sp, #12]
 8003ee2:	9304      	str	r3, [sp, #16]
 8003ee4:	465a      	mov	r2, fp
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	46f3      	mov	fp, lr
 8003eea:	46d1      	mov	r9, sl
 8003eec:	9009      	str	r0, [sp, #36]	; 0x24
 8003eee:	9108      	str	r1, [sp, #32]
 8003ef0:	f04f 0801 	mov.w	r8, #1
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	4696      	mov	lr, r2
 8003ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003efa:	449b      	add	fp, r3
 8003efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003efe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f02:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8003f06:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8003f0a:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8003f0e:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 8003f12:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8003f16:	930c      	str	r3, [sp, #48]	; 0x30
 8003f18:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8003f1c:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8003f20:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f22:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 8003f26:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8003f2a:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 8003f2e:	9202      	str	r2, [sp, #8]
 8003f30:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	edd3 da01 	vldr	s27, [r3, #4]
 8003f3c:	9b01      	ldr	r3, [sp, #4]
 8003f3e:	edd0 7a00 	vldr	s15, [r0]
 8003f42:	ed93 da01 	vldr	s26, [r3, #4]
 8003f46:	9b02      	ldr	r3, [sp, #8]
 8003f48:	edcd 7a02 	vstr	s15, [sp, #8]
 8003f4c:	ed93 ca01 	vldr	s24, [r3, #4]
 8003f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f52:	eddc ca01 	vldr	s25, [ip, #4]
 8003f56:	edd3 7a00 	vldr	s15, [r3]
 8003f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f5c:	edcd 7a01 	vstr	s15, [sp, #4]
 8003f60:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8003f64:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 8003f68:	9200      	str	r2, [sp, #0]
 8003f6a:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 8003f6e:	edd3 7a00 	vldr	s15, [r3]
 8003f72:	ed92 fa01 	vldr	s30, [r2, #4]
 8003f76:	9a00      	ldr	r2, [sp, #0]
 8003f78:	edd1 ea01 	vldr	s29, [r1, #4]
 8003f7c:	ed92 ea01 	vldr	s28, [r2, #4]
 8003f80:	edd7 ba00 	vldr	s23, [r7]
 8003f84:	edd6 aa00 	vldr	s21, [r6]
 8003f88:	ed95 aa00 	vldr	s20, [r5]
 8003f8c:	edd4 9a00 	vldr	s19, [r4]
 8003f90:	edcd 7a00 	vstr	s15, [sp]
 8003f94:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8003f98:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8003f9c:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8003fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fa4:	46c4      	mov	ip, r8
 8003fa6:	e001      	b.n	8003fac <arm_radix8_butterfly_f32+0x318>
 8003fa8:	3f3504f3 	.word	0x3f3504f3
 8003fac:	ed91 6a00 	vldr	s12, [r1]
 8003fb0:	ed93 5a00 	vldr	s10, [r3]
 8003fb4:	edd0 fa00 	vldr	s31, [r0]
 8003fb8:	edd4 7a00 	vldr	s15, [r4]
 8003fbc:	ed95 7a00 	vldr	s14, [r5]
 8003fc0:	ed56 3a01 	vldr	s7, [r6, #-4]
 8003fc4:	ed17 3a01 	vldr	s6, [r7, #-4]
 8003fc8:	ed92 2a00 	vldr	s4, [r2]
 8003fcc:	ed96 0a00 	vldr	s0, [r6]
 8003fd0:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003fd4:	ee32 1a06 	vadd.f32	s2, s4, s12
 8003fd8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8003fdc:	ee77 4a87 	vadd.f32	s9, s15, s14
 8003fe0:	ee78 1a04 	vadd.f32	s3, s16, s8
 8003fe4:	ee71 6a24 	vadd.f32	s13, s2, s9
 8003fe8:	ee32 2a46 	vsub.f32	s4, s4, s12
 8003fec:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8003ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ff4:	ed06 6a01 	vstr	s12, [r6, #-4]
 8003ff8:	edd4 8a01 	vldr	s17, [r4, #4]
 8003ffc:	ed92 9a01 	vldr	s18, [r2, #4]
 8004000:	edd7 0a00 	vldr	s1, [r7]
 8004004:	edd1 2a01 	vldr	s5, [r1, #4]
 8004008:	ed95 7a01 	vldr	s14, [r5, #4]
 800400c:	ed93 6a01 	vldr	s12, [r3, #4]
 8004010:	edd0 5a01 	vldr	s11, [r0, #4]
 8004014:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004018:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800401c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004020:	ee78 fac7 	vsub.f32	s31, s17, s14
 8004024:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004028:	ee38 7a87 	vadd.f32	s14, s17, s14
 800402c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004030:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004034:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004038:	ee72 7a67 	vsub.f32	s15, s4, s15
 800403c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004040:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8004044:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004048:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800404c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8004050:	ee72 fa87 	vadd.f32	s31, s5, s14
 8004054:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004058:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800405c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004060:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004064:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004068:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800406c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8004070:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8004074:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004078:	ee30 6a46 	vsub.f32	s12, s0, s12
 800407c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8004080:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004084:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004088:	ee36 6a68 	vsub.f32	s12, s12, s17
 800408c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8004090:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004094:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004098:	ee33 9a49 	vsub.f32	s18, s6, s18
 800409c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80040a0:	ee35 3a85 	vadd.f32	s6, s11, s10
 80040a4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80040a8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80040ac:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80040b0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80040b4:	ee30 7a68 	vsub.f32	s14, s0, s17
 80040b8:	ee35 8a03 	vadd.f32	s16, s10, s6
 80040bc:	ee38 0a80 	vadd.f32	s0, s17, s0
 80040c0:	ee73 3a82 	vadd.f32	s7, s7, s4
 80040c4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80040c8:	ed9d 2a00 	vldr	s4, [sp]
 80040cc:	eddd 1a01 	vldr	s3, [sp, #4]
 80040d0:	ee35 5a43 	vsub.f32	s10, s10, s6
 80040d4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80040d8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80040dc:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80040e0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80040e4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80040e8:	ee76 5a49 	vsub.f32	s11, s12, s18
 80040ec:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80040f0:	ee39 6a06 	vadd.f32	s12, s18, s12
 80040f4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80040f8:	ee21 4a84 	vmul.f32	s8, s3, s8
 80040fc:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8004100:	ee22 7a07 	vmul.f32	s14, s4, s14
 8004104:	ee22 2a08 	vmul.f32	s4, s4, s16
 8004108:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800410c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8004110:	ee31 1a09 	vadd.f32	s2, s2, s18
 8004114:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8004118:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800411c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8004120:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004124:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8004128:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800412c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8004130:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8004134:	ee38 2a89 	vadd.f32	s4, s17, s18
 8004138:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800413c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8004140:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8004144:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8004148:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800414c:	eddd 5a02 	vldr	s11, [sp, #8]
 8004150:	edc6 fa00 	vstr	s31, [r6]
 8004154:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8004158:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800415c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8004160:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8004164:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8004168:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800416c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8004170:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8004174:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004178:	ee74 4a89 	vadd.f32	s9, s9, s18
 800417c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8004180:	ee78 8a85 	vadd.f32	s17, s17, s10
 8004184:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004188:	44f4      	add	ip, lr
 800418a:	45e2      	cmp	sl, ip
 800418c:	edc3 3a00 	vstr	s7, [r3]
 8004190:	edc3 6a01 	vstr	s13, [r3, #4]
 8004194:	444e      	add	r6, r9
 8004196:	ed07 1a01 	vstr	s2, [r7, #-4]
 800419a:	edc7 0a00 	vstr	s1, [r7]
 800419e:	444b      	add	r3, r9
 80041a0:	ed80 2a00 	vstr	s4, [r0]
 80041a4:	edc0 2a01 	vstr	s5, [r0, #4]
 80041a8:	444f      	add	r7, r9
 80041aa:	edc2 1a00 	vstr	s3, [r2]
 80041ae:	ed82 7a01 	vstr	s14, [r2, #4]
 80041b2:	4448      	add	r0, r9
 80041b4:	ed85 8a00 	vstr	s16, [r5]
 80041b8:	ed85 0a01 	vstr	s0, [r5, #4]
 80041bc:	444a      	add	r2, r9
 80041be:	edc1 4a00 	vstr	s9, [r1]
 80041c2:	444d      	add	r5, r9
 80041c4:	ed81 3a01 	vstr	s6, [r1, #4]
 80041c8:	edc4 8a00 	vstr	s17, [r4]
 80041cc:	ed84 6a01 	vstr	s12, [r4, #4]
 80041d0:	4449      	add	r1, r9
 80041d2:	444c      	add	r4, r9
 80041d4:	f63f aeea 	bhi.w	8003fac <arm_radix8_butterfly_f32+0x318>
 80041d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041da:	3308      	adds	r3, #8
 80041dc:	930a      	str	r3, [sp, #40]	; 0x28
 80041de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e0:	3308      	adds	r3, #8
 80041e2:	9309      	str	r3, [sp, #36]	; 0x24
 80041e4:	9b08      	ldr	r3, [sp, #32]
 80041e6:	3308      	adds	r3, #8
 80041e8:	9308      	str	r3, [sp, #32]
 80041ea:	9b07      	ldr	r3, [sp, #28]
 80041ec:	3308      	adds	r3, #8
 80041ee:	9307      	str	r3, [sp, #28]
 80041f0:	9b06      	ldr	r3, [sp, #24]
 80041f2:	3308      	adds	r3, #8
 80041f4:	9306      	str	r3, [sp, #24]
 80041f6:	9b05      	ldr	r3, [sp, #20]
 80041f8:	3308      	adds	r3, #8
 80041fa:	9305      	str	r3, [sp, #20]
 80041fc:	9b04      	ldr	r3, [sp, #16]
 80041fe:	3308      	adds	r3, #8
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	9b03      	ldr	r3, [sp, #12]
 8004204:	3308      	adds	r3, #8
 8004206:	9303      	str	r3, [sp, #12]
 8004208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800420a:	f108 0801 	add.w	r8, r8, #1
 800420e:	4543      	cmp	r3, r8
 8004210:	f47f ae72 	bne.w	8003ef8 <arm_radix8_butterfly_f32+0x264>
 8004214:	469b      	mov	fp, r3
 8004216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	b29b      	uxth	r3, r3
 800421c:	46d1      	mov	r9, sl
 800421e:	930e      	str	r3, [sp, #56]	; 0x38
 8004220:	e547      	b.n	8003cb2 <arm_radix8_butterfly_f32+0x1e>
 8004222:	b013      	add	sp, #76	; 0x4c
 8004224:	ecbd 8b10 	vpop	{d8-d15}
 8004228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800422c <__errno>:
 800422c:	4b01      	ldr	r3, [pc, #4]	; (8004234 <__errno+0x8>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000018 	.word	0x20000018

08004238 <__libc_init_array>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0d      	ldr	r6, [pc, #52]	; (8004270 <__libc_init_array+0x38>)
 800423c:	4c0d      	ldr	r4, [pc, #52]	; (8004274 <__libc_init_array+0x3c>)
 800423e:	1ba4      	subs	r4, r4, r6
 8004240:	10a4      	asrs	r4, r4, #2
 8004242:	2500      	movs	r5, #0
 8004244:	42a5      	cmp	r5, r4
 8004246:	d109      	bne.n	800425c <__libc_init_array+0x24>
 8004248:	4e0b      	ldr	r6, [pc, #44]	; (8004278 <__libc_init_array+0x40>)
 800424a:	4c0c      	ldr	r4, [pc, #48]	; (800427c <__libc_init_array+0x44>)
 800424c:	f001 fa2e 	bl	80056ac <_init>
 8004250:	1ba4      	subs	r4, r4, r6
 8004252:	10a4      	asrs	r4, r4, #2
 8004254:	2500      	movs	r5, #0
 8004256:	42a5      	cmp	r5, r4
 8004258:	d105      	bne.n	8004266 <__libc_init_array+0x2e>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004260:	4798      	blx	r3
 8004262:	3501      	adds	r5, #1
 8004264:	e7ee      	b.n	8004244 <__libc_init_array+0xc>
 8004266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800426a:	4798      	blx	r3
 800426c:	3501      	adds	r5, #1
 800426e:	e7f2      	b.n	8004256 <__libc_init_array+0x1e>
 8004270:	0801adf0 	.word	0x0801adf0
 8004274:	0801adf0 	.word	0x0801adf0
 8004278:	0801adf0 	.word	0x0801adf0
 800427c:	0801adf4 	.word	0x0801adf4

08004280 <memset>:
 8004280:	4402      	add	r2, r0
 8004282:	4603      	mov	r3, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	d100      	bne.n	800428a <memset+0xa>
 8004288:	4770      	bx	lr
 800428a:	f803 1b01 	strb.w	r1, [r3], #1
 800428e:	e7f9      	b.n	8004284 <memset+0x4>

08004290 <atan>:
 8004290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004294:	ec55 4b10 	vmov	r4, r5, d0
 8004298:	4bc3      	ldr	r3, [pc, #780]	; (80045a8 <atan+0x318>)
 800429a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800429e:	429e      	cmp	r6, r3
 80042a0:	46ab      	mov	fp, r5
 80042a2:	dd18      	ble.n	80042d6 <atan+0x46>
 80042a4:	4bc1      	ldr	r3, [pc, #772]	; (80045ac <atan+0x31c>)
 80042a6:	429e      	cmp	r6, r3
 80042a8:	dc01      	bgt.n	80042ae <atan+0x1e>
 80042aa:	d109      	bne.n	80042c0 <atan+0x30>
 80042ac:	b144      	cbz	r4, 80042c0 <atan+0x30>
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	4620      	mov	r0, r4
 80042b4:	4629      	mov	r1, r5
 80042b6:	f7fb ffad 	bl	8000214 <__adddf3>
 80042ba:	4604      	mov	r4, r0
 80042bc:	460d      	mov	r5, r1
 80042be:	e006      	b.n	80042ce <atan+0x3e>
 80042c0:	f1bb 0f00 	cmp.w	fp, #0
 80042c4:	f340 8131 	ble.w	800452a <atan+0x29a>
 80042c8:	a59b      	add	r5, pc, #620	; (adr r5, 8004538 <atan+0x2a8>)
 80042ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80042ce:	ec45 4b10 	vmov	d0, r4, r5
 80042d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d6:	4bb6      	ldr	r3, [pc, #728]	; (80045b0 <atan+0x320>)
 80042d8:	429e      	cmp	r6, r3
 80042da:	dc14      	bgt.n	8004306 <atan+0x76>
 80042dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80042e0:	429e      	cmp	r6, r3
 80042e2:	dc0d      	bgt.n	8004300 <atan+0x70>
 80042e4:	a396      	add	r3, pc, #600	; (adr r3, 8004540 <atan+0x2b0>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	ee10 0a10 	vmov	r0, s0
 80042ee:	4629      	mov	r1, r5
 80042f0:	f7fb ff90 	bl	8000214 <__adddf3>
 80042f4:	2200      	movs	r2, #0
 80042f6:	4baf      	ldr	r3, [pc, #700]	; (80045b4 <atan+0x324>)
 80042f8:	f7fc fbd2 	bl	8000aa0 <__aeabi_dcmpgt>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d1e6      	bne.n	80042ce <atan+0x3e>
 8004300:	f04f 3aff 	mov.w	sl, #4294967295
 8004304:	e02b      	b.n	800435e <atan+0xce>
 8004306:	f000 f963 	bl	80045d0 <fabs>
 800430a:	4bab      	ldr	r3, [pc, #684]	; (80045b8 <atan+0x328>)
 800430c:	429e      	cmp	r6, r3
 800430e:	ec55 4b10 	vmov	r4, r5, d0
 8004312:	f300 80bf 	bgt.w	8004494 <atan+0x204>
 8004316:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800431a:	429e      	cmp	r6, r3
 800431c:	f300 80a0 	bgt.w	8004460 <atan+0x1d0>
 8004320:	ee10 2a10 	vmov	r2, s0
 8004324:	ee10 0a10 	vmov	r0, s0
 8004328:	462b      	mov	r3, r5
 800432a:	4629      	mov	r1, r5
 800432c:	f7fb ff72 	bl	8000214 <__adddf3>
 8004330:	2200      	movs	r2, #0
 8004332:	4ba0      	ldr	r3, [pc, #640]	; (80045b4 <atan+0x324>)
 8004334:	f7fb ff6c 	bl	8000210 <__aeabi_dsub>
 8004338:	2200      	movs	r2, #0
 800433a:	4606      	mov	r6, r0
 800433c:	460f      	mov	r7, r1
 800433e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004342:	4620      	mov	r0, r4
 8004344:	4629      	mov	r1, r5
 8004346:	f7fb ff65 	bl	8000214 <__adddf3>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4630      	mov	r0, r6
 8004350:	4639      	mov	r1, r7
 8004352:	f7fc fa3f 	bl	80007d4 <__aeabi_ddiv>
 8004356:	f04f 0a00 	mov.w	sl, #0
 800435a:	4604      	mov	r4, r0
 800435c:	460d      	mov	r5, r1
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	4620      	mov	r0, r4
 8004364:	4629      	mov	r1, r5
 8004366:	f7fc f90b 	bl	8000580 <__aeabi_dmul>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4680      	mov	r8, r0
 8004370:	4689      	mov	r9, r1
 8004372:	f7fc f905 	bl	8000580 <__aeabi_dmul>
 8004376:	a374      	add	r3, pc, #464	; (adr r3, 8004548 <atan+0x2b8>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	4606      	mov	r6, r0
 800437e:	460f      	mov	r7, r1
 8004380:	f7fc f8fe 	bl	8000580 <__aeabi_dmul>
 8004384:	a372      	add	r3, pc, #456	; (adr r3, 8004550 <atan+0x2c0>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f7fb ff43 	bl	8000214 <__adddf3>
 800438e:	4632      	mov	r2, r6
 8004390:	463b      	mov	r3, r7
 8004392:	f7fc f8f5 	bl	8000580 <__aeabi_dmul>
 8004396:	a370      	add	r3, pc, #448	; (adr r3, 8004558 <atan+0x2c8>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fb ff3a 	bl	8000214 <__adddf3>
 80043a0:	4632      	mov	r2, r6
 80043a2:	463b      	mov	r3, r7
 80043a4:	f7fc f8ec 	bl	8000580 <__aeabi_dmul>
 80043a8:	a36d      	add	r3, pc, #436	; (adr r3, 8004560 <atan+0x2d0>)
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f7fb ff31 	bl	8000214 <__adddf3>
 80043b2:	4632      	mov	r2, r6
 80043b4:	463b      	mov	r3, r7
 80043b6:	f7fc f8e3 	bl	8000580 <__aeabi_dmul>
 80043ba:	a36b      	add	r3, pc, #428	; (adr r3, 8004568 <atan+0x2d8>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fb ff28 	bl	8000214 <__adddf3>
 80043c4:	4632      	mov	r2, r6
 80043c6:	463b      	mov	r3, r7
 80043c8:	f7fc f8da 	bl	8000580 <__aeabi_dmul>
 80043cc:	a368      	add	r3, pc, #416	; (adr r3, 8004570 <atan+0x2e0>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fb ff1f 	bl	8000214 <__adddf3>
 80043d6:	4642      	mov	r2, r8
 80043d8:	464b      	mov	r3, r9
 80043da:	f7fc f8d1 	bl	8000580 <__aeabi_dmul>
 80043de:	a366      	add	r3, pc, #408	; (adr r3, 8004578 <atan+0x2e8>)
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	4680      	mov	r8, r0
 80043e6:	4689      	mov	r9, r1
 80043e8:	4630      	mov	r0, r6
 80043ea:	4639      	mov	r1, r7
 80043ec:	f7fc f8c8 	bl	8000580 <__aeabi_dmul>
 80043f0:	a363      	add	r3, pc, #396	; (adr r3, 8004580 <atan+0x2f0>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fb ff0b 	bl	8000210 <__aeabi_dsub>
 80043fa:	4632      	mov	r2, r6
 80043fc:	463b      	mov	r3, r7
 80043fe:	f7fc f8bf 	bl	8000580 <__aeabi_dmul>
 8004402:	a361      	add	r3, pc, #388	; (adr r3, 8004588 <atan+0x2f8>)
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f7fb ff02 	bl	8000210 <__aeabi_dsub>
 800440c:	4632      	mov	r2, r6
 800440e:	463b      	mov	r3, r7
 8004410:	f7fc f8b6 	bl	8000580 <__aeabi_dmul>
 8004414:	a35e      	add	r3, pc, #376	; (adr r3, 8004590 <atan+0x300>)
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f7fb fef9 	bl	8000210 <__aeabi_dsub>
 800441e:	4632      	mov	r2, r6
 8004420:	463b      	mov	r3, r7
 8004422:	f7fc f8ad 	bl	8000580 <__aeabi_dmul>
 8004426:	a35c      	add	r3, pc, #368	; (adr r3, 8004598 <atan+0x308>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f7fb fef0 	bl	8000210 <__aeabi_dsub>
 8004430:	4632      	mov	r2, r6
 8004432:	463b      	mov	r3, r7
 8004434:	f7fc f8a4 	bl	8000580 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4640      	mov	r0, r8
 800443e:	4649      	mov	r1, r9
 8004440:	f7fb fee8 	bl	8000214 <__adddf3>
 8004444:	4622      	mov	r2, r4
 8004446:	462b      	mov	r3, r5
 8004448:	f7fc f89a 	bl	8000580 <__aeabi_dmul>
 800444c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	d14b      	bne.n	80044ee <atan+0x25e>
 8004456:	4620      	mov	r0, r4
 8004458:	4629      	mov	r1, r5
 800445a:	f7fb fed9 	bl	8000210 <__aeabi_dsub>
 800445e:	e72c      	b.n	80042ba <atan+0x2a>
 8004460:	ee10 0a10 	vmov	r0, s0
 8004464:	2200      	movs	r2, #0
 8004466:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <atan+0x324>)
 8004468:	4629      	mov	r1, r5
 800446a:	f7fb fed1 	bl	8000210 <__aeabi_dsub>
 800446e:	2200      	movs	r2, #0
 8004470:	4606      	mov	r6, r0
 8004472:	460f      	mov	r7, r1
 8004474:	4b4f      	ldr	r3, [pc, #316]	; (80045b4 <atan+0x324>)
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f7fb fecb 	bl	8000214 <__adddf3>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4630      	mov	r0, r6
 8004484:	4639      	mov	r1, r7
 8004486:	f7fc f9a5 	bl	80007d4 <__aeabi_ddiv>
 800448a:	f04f 0a01 	mov.w	sl, #1
 800448e:	4604      	mov	r4, r0
 8004490:	460d      	mov	r5, r1
 8004492:	e764      	b.n	800435e <atan+0xce>
 8004494:	4b49      	ldr	r3, [pc, #292]	; (80045bc <atan+0x32c>)
 8004496:	429e      	cmp	r6, r3
 8004498:	dc1d      	bgt.n	80044d6 <atan+0x246>
 800449a:	ee10 0a10 	vmov	r0, s0
 800449e:	2200      	movs	r2, #0
 80044a0:	4b47      	ldr	r3, [pc, #284]	; (80045c0 <atan+0x330>)
 80044a2:	4629      	mov	r1, r5
 80044a4:	f7fb feb4 	bl	8000210 <__aeabi_dsub>
 80044a8:	2200      	movs	r2, #0
 80044aa:	4606      	mov	r6, r0
 80044ac:	460f      	mov	r7, r1
 80044ae:	4b44      	ldr	r3, [pc, #272]	; (80045c0 <atan+0x330>)
 80044b0:	4620      	mov	r0, r4
 80044b2:	4629      	mov	r1, r5
 80044b4:	f7fc f864 	bl	8000580 <__aeabi_dmul>
 80044b8:	2200      	movs	r2, #0
 80044ba:	4b3e      	ldr	r3, [pc, #248]	; (80045b4 <atan+0x324>)
 80044bc:	f7fb feaa 	bl	8000214 <__adddf3>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4630      	mov	r0, r6
 80044c6:	4639      	mov	r1, r7
 80044c8:	f7fc f984 	bl	80007d4 <__aeabi_ddiv>
 80044cc:	f04f 0a02 	mov.w	sl, #2
 80044d0:	4604      	mov	r4, r0
 80044d2:	460d      	mov	r5, r1
 80044d4:	e743      	b.n	800435e <atan+0xce>
 80044d6:	462b      	mov	r3, r5
 80044d8:	ee10 2a10 	vmov	r2, s0
 80044dc:	2000      	movs	r0, #0
 80044de:	4939      	ldr	r1, [pc, #228]	; (80045c4 <atan+0x334>)
 80044e0:	f7fc f978 	bl	80007d4 <__aeabi_ddiv>
 80044e4:	f04f 0a03 	mov.w	sl, #3
 80044e8:	4604      	mov	r4, r0
 80044ea:	460d      	mov	r5, r1
 80044ec:	e737      	b.n	800435e <atan+0xce>
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <atan+0x338>)
 80044f0:	4e36      	ldr	r6, [pc, #216]	; (80045cc <atan+0x33c>)
 80044f2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80044f6:	4456      	add	r6, sl
 80044f8:	449a      	add	sl, r3
 80044fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80044fe:	f7fb fe87 	bl	8000210 <__aeabi_dsub>
 8004502:	4622      	mov	r2, r4
 8004504:	462b      	mov	r3, r5
 8004506:	f7fb fe83 	bl	8000210 <__aeabi_dsub>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004512:	f7fb fe7d 	bl	8000210 <__aeabi_dsub>
 8004516:	f1bb 0f00 	cmp.w	fp, #0
 800451a:	4604      	mov	r4, r0
 800451c:	460d      	mov	r5, r1
 800451e:	f6bf aed6 	bge.w	80042ce <atan+0x3e>
 8004522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004526:	461d      	mov	r5, r3
 8004528:	e6d1      	b.n	80042ce <atan+0x3e>
 800452a:	a51d      	add	r5, pc, #116	; (adr r5, 80045a0 <atan+0x310>)
 800452c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004530:	e6cd      	b.n	80042ce <atan+0x3e>
 8004532:	bf00      	nop
 8004534:	f3af 8000 	nop.w
 8004538:	54442d18 	.word	0x54442d18
 800453c:	3ff921fb 	.word	0x3ff921fb
 8004540:	8800759c 	.word	0x8800759c
 8004544:	7e37e43c 	.word	0x7e37e43c
 8004548:	e322da11 	.word	0xe322da11
 800454c:	3f90ad3a 	.word	0x3f90ad3a
 8004550:	24760deb 	.word	0x24760deb
 8004554:	3fa97b4b 	.word	0x3fa97b4b
 8004558:	a0d03d51 	.word	0xa0d03d51
 800455c:	3fb10d66 	.word	0x3fb10d66
 8004560:	c54c206e 	.word	0xc54c206e
 8004564:	3fb745cd 	.word	0x3fb745cd
 8004568:	920083ff 	.word	0x920083ff
 800456c:	3fc24924 	.word	0x3fc24924
 8004570:	5555550d 	.word	0x5555550d
 8004574:	3fd55555 	.word	0x3fd55555
 8004578:	2c6a6c2f 	.word	0x2c6a6c2f
 800457c:	bfa2b444 	.word	0xbfa2b444
 8004580:	52defd9a 	.word	0x52defd9a
 8004584:	3fadde2d 	.word	0x3fadde2d
 8004588:	af749a6d 	.word	0xaf749a6d
 800458c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004590:	fe231671 	.word	0xfe231671
 8004594:	3fbc71c6 	.word	0x3fbc71c6
 8004598:	9998ebc4 	.word	0x9998ebc4
 800459c:	3fc99999 	.word	0x3fc99999
 80045a0:	54442d18 	.word	0x54442d18
 80045a4:	bff921fb 	.word	0xbff921fb
 80045a8:	440fffff 	.word	0x440fffff
 80045ac:	7ff00000 	.word	0x7ff00000
 80045b0:	3fdbffff 	.word	0x3fdbffff
 80045b4:	3ff00000 	.word	0x3ff00000
 80045b8:	3ff2ffff 	.word	0x3ff2ffff
 80045bc:	40037fff 	.word	0x40037fff
 80045c0:	3ff80000 	.word	0x3ff80000
 80045c4:	bff00000 	.word	0xbff00000
 80045c8:	0801abe8 	.word	0x0801abe8
 80045cc:	0801abc8 	.word	0x0801abc8

080045d0 <fabs>:
 80045d0:	ec51 0b10 	vmov	r0, r1, d0
 80045d4:	ee10 2a10 	vmov	r2, s0
 80045d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045dc:	ec43 2b10 	vmov	d0, r2, r3
 80045e0:	4770      	bx	lr
 80045e2:	0000      	movs	r0, r0
 80045e4:	0000      	movs	r0, r0
	...

080045e8 <sin>:
 80045e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045ea:	ec51 0b10 	vmov	r0, r1, d0
 80045ee:	4a20      	ldr	r2, [pc, #128]	; (8004670 <sin+0x88>)
 80045f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045f4:	4293      	cmp	r3, r2
 80045f6:	dc07      	bgt.n	8004608 <sin+0x20>
 80045f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004668 <sin+0x80>
 80045fc:	2000      	movs	r0, #0
 80045fe:	f000 fe8b 	bl	8005318 <__kernel_sin>
 8004602:	ec51 0b10 	vmov	r0, r1, d0
 8004606:	e007      	b.n	8004618 <sin+0x30>
 8004608:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <sin+0x8c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	dd09      	ble.n	8004622 <sin+0x3a>
 800460e:	ee10 2a10 	vmov	r2, s0
 8004612:	460b      	mov	r3, r1
 8004614:	f7fb fdfc 	bl	8000210 <__aeabi_dsub>
 8004618:	ec41 0b10 	vmov	d0, r0, r1
 800461c:	b005      	add	sp, #20
 800461e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004622:	4668      	mov	r0, sp
 8004624:	f000 f878 	bl	8004718 <__ieee754_rem_pio2>
 8004628:	f000 0003 	and.w	r0, r0, #3
 800462c:	2801      	cmp	r0, #1
 800462e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004632:	ed9d 0b00 	vldr	d0, [sp]
 8004636:	d004      	beq.n	8004642 <sin+0x5a>
 8004638:	2802      	cmp	r0, #2
 800463a:	d005      	beq.n	8004648 <sin+0x60>
 800463c:	b970      	cbnz	r0, 800465c <sin+0x74>
 800463e:	2001      	movs	r0, #1
 8004640:	e7dd      	b.n	80045fe <sin+0x16>
 8004642:	f000 fa61 	bl	8004b08 <__kernel_cos>
 8004646:	e7dc      	b.n	8004602 <sin+0x1a>
 8004648:	2001      	movs	r0, #1
 800464a:	f000 fe65 	bl	8005318 <__kernel_sin>
 800464e:	ec53 2b10 	vmov	r2, r3, d0
 8004652:	ee10 0a10 	vmov	r0, s0
 8004656:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800465a:	e7dd      	b.n	8004618 <sin+0x30>
 800465c:	f000 fa54 	bl	8004b08 <__kernel_cos>
 8004660:	e7f5      	b.n	800464e <sin+0x66>
 8004662:	bf00      	nop
 8004664:	f3af 8000 	nop.w
	...
 8004670:	3fe921fb 	.word	0x3fe921fb
 8004674:	7fefffff 	.word	0x7fefffff

08004678 <sqrtf>:
 8004678:	b510      	push	{r4, lr}
 800467a:	ed2d 8b02 	vpush	{d8}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	eeb0 8a40 	vmov.f32	s16, s0
 8004684:	f000 fa3a 	bl	8004afc <__ieee754_sqrtf>
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <sqrtf+0x98>)
 800468a:	f993 4000 	ldrsb.w	r4, [r3]
 800468e:	1c63      	adds	r3, r4, #1
 8004690:	d02c      	beq.n	80046ec <sqrtf+0x74>
 8004692:	eeb4 8a48 	vcmp.f32	s16, s16
 8004696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469a:	d627      	bvs.n	80046ec <sqrtf+0x74>
 800469c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80046a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a4:	d522      	bpl.n	80046ec <sqrtf+0x74>
 80046a6:	2301      	movs	r3, #1
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <sqrtf+0x9c>)
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	ee18 0a10 	vmov	r0, s16
 80046b2:	2300      	movs	r3, #0
 80046b4:	9308      	str	r3, [sp, #32]
 80046b6:	f7fb ff0b 	bl	80004d0 <__aeabi_f2d>
 80046ba:	2200      	movs	r2, #0
 80046bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046c4:	2300      	movs	r3, #0
 80046c6:	b9ac      	cbnz	r4, 80046f4 <sqrtf+0x7c>
 80046c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046cc:	4668      	mov	r0, sp
 80046ce:	f000 ff63 	bl	8005598 <matherr>
 80046d2:	b1b8      	cbz	r0, 8004704 <sqrtf+0x8c>
 80046d4:	9b08      	ldr	r3, [sp, #32]
 80046d6:	b11b      	cbz	r3, 80046e0 <sqrtf+0x68>
 80046d8:	f7ff fda8 	bl	800422c <__errno>
 80046dc:	9b08      	ldr	r3, [sp, #32]
 80046de:	6003      	str	r3, [r0, #0]
 80046e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046e4:	f7fc fa2e 	bl	8000b44 <__aeabi_d2f>
 80046e8:	ee00 0a10 	vmov	s0, r0
 80046ec:	b00a      	add	sp, #40	; 0x28
 80046ee:	ecbd 8b02 	vpop	{d8}
 80046f2:	bd10      	pop	{r4, pc}
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	f7fc f86c 	bl	80007d4 <__aeabi_ddiv>
 80046fc:	2c02      	cmp	r4, #2
 80046fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004702:	d1e3      	bne.n	80046cc <sqrtf+0x54>
 8004704:	f7ff fd92 	bl	800422c <__errno>
 8004708:	2321      	movs	r3, #33	; 0x21
 800470a:	6003      	str	r3, [r0, #0]
 800470c:	e7e2      	b.n	80046d4 <sqrtf+0x5c>
 800470e:	bf00      	nop
 8004710:	2000007c 	.word	0x2000007c
 8004714:	0801ac08 	.word	0x0801ac08

08004718 <__ieee754_rem_pio2>:
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	ec57 6b10 	vmov	r6, r7, d0
 8004720:	4bc3      	ldr	r3, [pc, #780]	; (8004a30 <__ieee754_rem_pio2+0x318>)
 8004722:	b08d      	sub	sp, #52	; 0x34
 8004724:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004728:	4598      	cmp	r8, r3
 800472a:	4604      	mov	r4, r0
 800472c:	9704      	str	r7, [sp, #16]
 800472e:	dc07      	bgt.n	8004740 <__ieee754_rem_pio2+0x28>
 8004730:	2200      	movs	r2, #0
 8004732:	2300      	movs	r3, #0
 8004734:	ed84 0b00 	vstr	d0, [r4]
 8004738:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800473c:	2500      	movs	r5, #0
 800473e:	e027      	b.n	8004790 <__ieee754_rem_pio2+0x78>
 8004740:	4bbc      	ldr	r3, [pc, #752]	; (8004a34 <__ieee754_rem_pio2+0x31c>)
 8004742:	4598      	cmp	r8, r3
 8004744:	dc75      	bgt.n	8004832 <__ieee754_rem_pio2+0x11a>
 8004746:	9b04      	ldr	r3, [sp, #16]
 8004748:	4dbb      	ldr	r5, [pc, #748]	; (8004a38 <__ieee754_rem_pio2+0x320>)
 800474a:	2b00      	cmp	r3, #0
 800474c:	ee10 0a10 	vmov	r0, s0
 8004750:	a3a9      	add	r3, pc, #676	; (adr r3, 80049f8 <__ieee754_rem_pio2+0x2e0>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	4639      	mov	r1, r7
 8004758:	dd36      	ble.n	80047c8 <__ieee754_rem_pio2+0xb0>
 800475a:	f7fb fd59 	bl	8000210 <__aeabi_dsub>
 800475e:	45a8      	cmp	r8, r5
 8004760:	4606      	mov	r6, r0
 8004762:	460f      	mov	r7, r1
 8004764:	d018      	beq.n	8004798 <__ieee754_rem_pio2+0x80>
 8004766:	a3a6      	add	r3, pc, #664	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x2e8>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fb fd50 	bl	8000210 <__aeabi_dsub>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	e9c4 2300 	strd	r2, r3, [r4]
 8004778:	4630      	mov	r0, r6
 800477a:	4639      	mov	r1, r7
 800477c:	f7fb fd48 	bl	8000210 <__aeabi_dsub>
 8004780:	a39f      	add	r3, pc, #636	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x2e8>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f7fb fd43 	bl	8000210 <__aeabi_dsub>
 800478a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800478e:	2501      	movs	r5, #1
 8004790:	4628      	mov	r0, r5
 8004792:	b00d      	add	sp, #52	; 0x34
 8004794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004798:	a39b      	add	r3, pc, #620	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x2f0>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb fd37 	bl	8000210 <__aeabi_dsub>
 80047a2:	a39b      	add	r3, pc, #620	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x2f8>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	4606      	mov	r6, r0
 80047aa:	460f      	mov	r7, r1
 80047ac:	f7fb fd30 	bl	8000210 <__aeabi_dsub>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	e9c4 2300 	strd	r2, r3, [r4]
 80047b8:	4630      	mov	r0, r6
 80047ba:	4639      	mov	r1, r7
 80047bc:	f7fb fd28 	bl	8000210 <__aeabi_dsub>
 80047c0:	a393      	add	r3, pc, #588	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x2f8>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	e7de      	b.n	8004786 <__ieee754_rem_pio2+0x6e>
 80047c8:	f7fb fd24 	bl	8000214 <__adddf3>
 80047cc:	45a8      	cmp	r8, r5
 80047ce:	4606      	mov	r6, r0
 80047d0:	460f      	mov	r7, r1
 80047d2:	d016      	beq.n	8004802 <__ieee754_rem_pio2+0xea>
 80047d4:	a38a      	add	r3, pc, #552	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x2e8>)
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f7fb fd1b 	bl	8000214 <__adddf3>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	e9c4 2300 	strd	r2, r3, [r4]
 80047e6:	4630      	mov	r0, r6
 80047e8:	4639      	mov	r1, r7
 80047ea:	f7fb fd11 	bl	8000210 <__aeabi_dsub>
 80047ee:	a384      	add	r3, pc, #528	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x2e8>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f7fb fd0e 	bl	8000214 <__adddf3>
 80047f8:	f04f 35ff 	mov.w	r5, #4294967295
 80047fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004800:	e7c6      	b.n	8004790 <__ieee754_rem_pio2+0x78>
 8004802:	a381      	add	r3, pc, #516	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x2f0>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f7fb fd04 	bl	8000214 <__adddf3>
 800480c:	a380      	add	r3, pc, #512	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x2f8>)
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	4606      	mov	r6, r0
 8004814:	460f      	mov	r7, r1
 8004816:	f7fb fcfd 	bl	8000214 <__adddf3>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	e9c4 2300 	strd	r2, r3, [r4]
 8004822:	4630      	mov	r0, r6
 8004824:	4639      	mov	r1, r7
 8004826:	f7fb fcf3 	bl	8000210 <__aeabi_dsub>
 800482a:	a379      	add	r3, pc, #484	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x2f8>)
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	e7e0      	b.n	80047f4 <__ieee754_rem_pio2+0xdc>
 8004832:	4b82      	ldr	r3, [pc, #520]	; (8004a3c <__ieee754_rem_pio2+0x324>)
 8004834:	4598      	cmp	r8, r3
 8004836:	f300 80d0 	bgt.w	80049da <__ieee754_rem_pio2+0x2c2>
 800483a:	f7ff fec9 	bl	80045d0 <fabs>
 800483e:	ec57 6b10 	vmov	r6, r7, d0
 8004842:	ee10 0a10 	vmov	r0, s0
 8004846:	a374      	add	r3, pc, #464	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x300>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	4639      	mov	r1, r7
 800484e:	f7fb fe97 	bl	8000580 <__aeabi_dmul>
 8004852:	2200      	movs	r2, #0
 8004854:	4b7a      	ldr	r3, [pc, #488]	; (8004a40 <__ieee754_rem_pio2+0x328>)
 8004856:	f7fb fcdd 	bl	8000214 <__adddf3>
 800485a:	f7fc f92b 	bl	8000ab4 <__aeabi_d2iz>
 800485e:	4605      	mov	r5, r0
 8004860:	f7fb fe24 	bl	80004ac <__aeabi_i2d>
 8004864:	a364      	add	r3, pc, #400	; (adr r3, 80049f8 <__ieee754_rem_pio2+0x2e0>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800486e:	f7fb fe87 	bl	8000580 <__aeabi_dmul>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4630      	mov	r0, r6
 8004878:	4639      	mov	r1, r7
 800487a:	f7fb fcc9 	bl	8000210 <__aeabi_dsub>
 800487e:	a360      	add	r3, pc, #384	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x2e8>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	4682      	mov	sl, r0
 8004886:	468b      	mov	fp, r1
 8004888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800488c:	f7fb fe78 	bl	8000580 <__aeabi_dmul>
 8004890:	2d1f      	cmp	r5, #31
 8004892:	4606      	mov	r6, r0
 8004894:	460f      	mov	r7, r1
 8004896:	dc0c      	bgt.n	80048b2 <__ieee754_rem_pio2+0x19a>
 8004898:	1e6a      	subs	r2, r5, #1
 800489a:	4b6a      	ldr	r3, [pc, #424]	; (8004a44 <__ieee754_rem_pio2+0x32c>)
 800489c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a0:	4543      	cmp	r3, r8
 80048a2:	d006      	beq.n	80048b2 <__ieee754_rem_pio2+0x19a>
 80048a4:	4632      	mov	r2, r6
 80048a6:	463b      	mov	r3, r7
 80048a8:	4650      	mov	r0, sl
 80048aa:	4659      	mov	r1, fp
 80048ac:	f7fb fcb0 	bl	8000210 <__aeabi_dsub>
 80048b0:	e00e      	b.n	80048d0 <__ieee754_rem_pio2+0x1b8>
 80048b2:	4632      	mov	r2, r6
 80048b4:	463b      	mov	r3, r7
 80048b6:	4650      	mov	r0, sl
 80048b8:	4659      	mov	r1, fp
 80048ba:	f7fb fca9 	bl	8000210 <__aeabi_dsub>
 80048be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80048c2:	9305      	str	r3, [sp, #20]
 80048c4:	9a05      	ldr	r2, [sp, #20]
 80048c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	dc02      	bgt.n	80048d6 <__ieee754_rem_pio2+0x1be>
 80048d0:	e9c4 0100 	strd	r0, r1, [r4]
 80048d4:	e039      	b.n	800494a <__ieee754_rem_pio2+0x232>
 80048d6:	a34c      	add	r3, pc, #304	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x2f0>)
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e0:	f7fb fe4e 	bl	8000580 <__aeabi_dmul>
 80048e4:	4606      	mov	r6, r0
 80048e6:	460f      	mov	r7, r1
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4650      	mov	r0, sl
 80048ee:	4659      	mov	r1, fp
 80048f0:	f7fb fc8e 	bl	8000210 <__aeabi_dsub>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4680      	mov	r8, r0
 80048fa:	4689      	mov	r9, r1
 80048fc:	4650      	mov	r0, sl
 80048fe:	4659      	mov	r1, fp
 8004900:	f7fb fc86 	bl	8000210 <__aeabi_dsub>
 8004904:	4632      	mov	r2, r6
 8004906:	463b      	mov	r3, r7
 8004908:	f7fb fc82 	bl	8000210 <__aeabi_dsub>
 800490c:	a340      	add	r3, pc, #256	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x2f8>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	4606      	mov	r6, r0
 8004914:	460f      	mov	r7, r1
 8004916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800491a:	f7fb fe31 	bl	8000580 <__aeabi_dmul>
 800491e:	4632      	mov	r2, r6
 8004920:	463b      	mov	r3, r7
 8004922:	f7fb fc75 	bl	8000210 <__aeabi_dsub>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4606      	mov	r6, r0
 800492c:	460f      	mov	r7, r1
 800492e:	4640      	mov	r0, r8
 8004930:	4649      	mov	r1, r9
 8004932:	f7fb fc6d 	bl	8000210 <__aeabi_dsub>
 8004936:	9a05      	ldr	r2, [sp, #20]
 8004938:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b31      	cmp	r3, #49	; 0x31
 8004940:	dc20      	bgt.n	8004984 <__ieee754_rem_pio2+0x26c>
 8004942:	e9c4 0100 	strd	r0, r1, [r4]
 8004946:	46c2      	mov	sl, r8
 8004948:	46cb      	mov	fp, r9
 800494a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800494e:	4650      	mov	r0, sl
 8004950:	4642      	mov	r2, r8
 8004952:	464b      	mov	r3, r9
 8004954:	4659      	mov	r1, fp
 8004956:	f7fb fc5b 	bl	8000210 <__aeabi_dsub>
 800495a:	463b      	mov	r3, r7
 800495c:	4632      	mov	r2, r6
 800495e:	f7fb fc57 	bl	8000210 <__aeabi_dsub>
 8004962:	9b04      	ldr	r3, [sp, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800496a:	f6bf af11 	bge.w	8004790 <__ieee754_rem_pio2+0x78>
 800496e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004972:	6063      	str	r3, [r4, #4]
 8004974:	f8c4 8000 	str.w	r8, [r4]
 8004978:	60a0      	str	r0, [r4, #8]
 800497a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800497e:	60e3      	str	r3, [r4, #12]
 8004980:	426d      	negs	r5, r5
 8004982:	e705      	b.n	8004790 <__ieee754_rem_pio2+0x78>
 8004984:	a326      	add	r3, pc, #152	; (adr r3, 8004a20 <__ieee754_rem_pio2+0x308>)
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800498e:	f7fb fdf7 	bl	8000580 <__aeabi_dmul>
 8004992:	4606      	mov	r6, r0
 8004994:	460f      	mov	r7, r1
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4640      	mov	r0, r8
 800499c:	4649      	mov	r1, r9
 800499e:	f7fb fc37 	bl	8000210 <__aeabi_dsub>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4682      	mov	sl, r0
 80049a8:	468b      	mov	fp, r1
 80049aa:	4640      	mov	r0, r8
 80049ac:	4649      	mov	r1, r9
 80049ae:	f7fb fc2f 	bl	8000210 <__aeabi_dsub>
 80049b2:	4632      	mov	r2, r6
 80049b4:	463b      	mov	r3, r7
 80049b6:	f7fb fc2b 	bl	8000210 <__aeabi_dsub>
 80049ba:	a31b      	add	r3, pc, #108	; (adr r3, 8004a28 <__ieee754_rem_pio2+0x310>)
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	4606      	mov	r6, r0
 80049c2:	460f      	mov	r7, r1
 80049c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049c8:	f7fb fdda 	bl	8000580 <__aeabi_dmul>
 80049cc:	4632      	mov	r2, r6
 80049ce:	463b      	mov	r3, r7
 80049d0:	f7fb fc1e 	bl	8000210 <__aeabi_dsub>
 80049d4:	4606      	mov	r6, r0
 80049d6:	460f      	mov	r7, r1
 80049d8:	e764      	b.n	80048a4 <__ieee754_rem_pio2+0x18c>
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <__ieee754_rem_pio2+0x330>)
 80049dc:	4598      	cmp	r8, r3
 80049de:	dd35      	ble.n	8004a4c <__ieee754_rem_pio2+0x334>
 80049e0:	ee10 2a10 	vmov	r2, s0
 80049e4:	463b      	mov	r3, r7
 80049e6:	4630      	mov	r0, r6
 80049e8:	4639      	mov	r1, r7
 80049ea:	f7fb fc11 	bl	8000210 <__aeabi_dsub>
 80049ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049f2:	e9c4 0100 	strd	r0, r1, [r4]
 80049f6:	e6a1      	b.n	800473c <__ieee754_rem_pio2+0x24>
 80049f8:	54400000 	.word	0x54400000
 80049fc:	3ff921fb 	.word	0x3ff921fb
 8004a00:	1a626331 	.word	0x1a626331
 8004a04:	3dd0b461 	.word	0x3dd0b461
 8004a08:	1a600000 	.word	0x1a600000
 8004a0c:	3dd0b461 	.word	0x3dd0b461
 8004a10:	2e037073 	.word	0x2e037073
 8004a14:	3ba3198a 	.word	0x3ba3198a
 8004a18:	6dc9c883 	.word	0x6dc9c883
 8004a1c:	3fe45f30 	.word	0x3fe45f30
 8004a20:	2e000000 	.word	0x2e000000
 8004a24:	3ba3198a 	.word	0x3ba3198a
 8004a28:	252049c1 	.word	0x252049c1
 8004a2c:	397b839a 	.word	0x397b839a
 8004a30:	3fe921fb 	.word	0x3fe921fb
 8004a34:	4002d97b 	.word	0x4002d97b
 8004a38:	3ff921fb 	.word	0x3ff921fb
 8004a3c:	413921fb 	.word	0x413921fb
 8004a40:	3fe00000 	.word	0x3fe00000
 8004a44:	0801ac10 	.word	0x0801ac10
 8004a48:	7fefffff 	.word	0x7fefffff
 8004a4c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004a50:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004a54:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004a58:	4630      	mov	r0, r6
 8004a5a:	460f      	mov	r7, r1
 8004a5c:	f7fc f82a 	bl	8000ab4 <__aeabi_d2iz>
 8004a60:	f7fb fd24 	bl	80004ac <__aeabi_i2d>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4630      	mov	r0, r6
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a70:	f7fb fbce 	bl	8000210 <__aeabi_dsub>
 8004a74:	2200      	movs	r2, #0
 8004a76:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <__ieee754_rem_pio2+0x3dc>)
 8004a78:	f7fb fd82 	bl	8000580 <__aeabi_dmul>
 8004a7c:	460f      	mov	r7, r1
 8004a7e:	4606      	mov	r6, r0
 8004a80:	f7fc f818 	bl	8000ab4 <__aeabi_d2iz>
 8004a84:	f7fb fd12 	bl	80004ac <__aeabi_i2d>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	4639      	mov	r1, r7
 8004a90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a94:	f7fb fbbc 	bl	8000210 <__aeabi_dsub>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <__ieee754_rem_pio2+0x3dc>)
 8004a9c:	f7fb fd70 	bl	8000580 <__aeabi_dmul>
 8004aa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004aa4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004aa8:	f04f 0803 	mov.w	r8, #3
 8004aac:	2600      	movs	r6, #0
 8004aae:	2700      	movs	r7, #0
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004ab8:	f108 3aff 	add.w	sl, r8, #4294967295
 8004abc:	f7fb ffc8 	bl	8000a50 <__aeabi_dcmpeq>
 8004ac0:	b9b0      	cbnz	r0, 8004af0 <__ieee754_rem_pio2+0x3d8>
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <__ieee754_rem_pio2+0x3e0>)
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	462a      	mov	r2, r5
 8004acc:	4643      	mov	r3, r8
 8004ace:	4621      	mov	r1, r4
 8004ad0:	a806      	add	r0, sp, #24
 8004ad2:	f000 f8e1 	bl	8004c98 <__kernel_rem_pio2>
 8004ad6:	9b04      	ldr	r3, [sp, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	4605      	mov	r5, r0
 8004adc:	f6bf ae58 	bge.w	8004790 <__ieee754_rem_pio2+0x78>
 8004ae0:	6863      	ldr	r3, [r4, #4]
 8004ae2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	68e3      	ldr	r3, [r4, #12]
 8004aea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004aee:	e746      	b.n	800497e <__ieee754_rem_pio2+0x266>
 8004af0:	46d0      	mov	r8, sl
 8004af2:	e7dd      	b.n	8004ab0 <__ieee754_rem_pio2+0x398>
 8004af4:	41700000 	.word	0x41700000
 8004af8:	0801ac90 	.word	0x0801ac90

08004afc <__ieee754_sqrtf>:
 8004afc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004b00:	4770      	bx	lr
 8004b02:	0000      	movs	r0, r0
 8004b04:	0000      	movs	r0, r0
	...

08004b08 <__kernel_cos>:
 8004b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	ec59 8b10 	vmov	r8, r9, d0
 8004b10:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004b14:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004b18:	ed2d 8b02 	vpush	{d8}
 8004b1c:	eeb0 8a41 	vmov.f32	s16, s2
 8004b20:	eef0 8a61 	vmov.f32	s17, s3
 8004b24:	da07      	bge.n	8004b36 <__kernel_cos+0x2e>
 8004b26:	ee10 0a10 	vmov	r0, s0
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	f7fb ffc2 	bl	8000ab4 <__aeabi_d2iz>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	f000 8089 	beq.w	8004c48 <__kernel_cos+0x140>
 8004b36:	4642      	mov	r2, r8
 8004b38:	464b      	mov	r3, r9
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	f7fb fd1f 	bl	8000580 <__aeabi_dmul>
 8004b42:	2200      	movs	r2, #0
 8004b44:	4b4e      	ldr	r3, [pc, #312]	; (8004c80 <__kernel_cos+0x178>)
 8004b46:	4604      	mov	r4, r0
 8004b48:	460d      	mov	r5, r1
 8004b4a:	f7fb fd19 	bl	8000580 <__aeabi_dmul>
 8004b4e:	a340      	add	r3, pc, #256	; (adr r3, 8004c50 <__kernel_cos+0x148>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	4682      	mov	sl, r0
 8004b56:	468b      	mov	fp, r1
 8004b58:	4620      	mov	r0, r4
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	f7fb fd10 	bl	8000580 <__aeabi_dmul>
 8004b60:	a33d      	add	r3, pc, #244	; (adr r3, 8004c58 <__kernel_cos+0x150>)
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f7fb fb55 	bl	8000214 <__adddf3>
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	462b      	mov	r3, r5
 8004b6e:	f7fb fd07 	bl	8000580 <__aeabi_dmul>
 8004b72:	a33b      	add	r3, pc, #236	; (adr r3, 8004c60 <__kernel_cos+0x158>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fb4a 	bl	8000210 <__aeabi_dsub>
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	462b      	mov	r3, r5
 8004b80:	f7fb fcfe 	bl	8000580 <__aeabi_dmul>
 8004b84:	a338      	add	r3, pc, #224	; (adr r3, 8004c68 <__kernel_cos+0x160>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fb43 	bl	8000214 <__adddf3>
 8004b8e:	4622      	mov	r2, r4
 8004b90:	462b      	mov	r3, r5
 8004b92:	f7fb fcf5 	bl	8000580 <__aeabi_dmul>
 8004b96:	a336      	add	r3, pc, #216	; (adr r3, 8004c70 <__kernel_cos+0x168>)
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	f7fb fb38 	bl	8000210 <__aeabi_dsub>
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	f7fb fcec 	bl	8000580 <__aeabi_dmul>
 8004ba8:	a333      	add	r3, pc, #204	; (adr r3, 8004c78 <__kernel_cos+0x170>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fb31 	bl	8000214 <__adddf3>
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	f7fb fce3 	bl	8000580 <__aeabi_dmul>
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f7fb fcdf 	bl	8000580 <__aeabi_dmul>
 8004bc2:	ec53 2b18 	vmov	r2, r3, d8
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	460d      	mov	r5, r1
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f7fb fcd7 	bl	8000580 <__aeabi_dmul>
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7fb fb19 	bl	8000210 <__aeabi_dsub>
 8004bde:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <__kernel_cos+0x17c>)
 8004be0:	429e      	cmp	r6, r3
 8004be2:	4680      	mov	r8, r0
 8004be4:	4689      	mov	r9, r1
 8004be6:	dc11      	bgt.n	8004c0c <__kernel_cos+0x104>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4650      	mov	r0, sl
 8004bee:	4659      	mov	r1, fp
 8004bf0:	f7fb fb0e 	bl	8000210 <__aeabi_dsub>
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4924      	ldr	r1, [pc, #144]	; (8004c88 <__kernel_cos+0x180>)
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f7fb fb08 	bl	8000210 <__aeabi_dsub>
 8004c00:	ecbd 8b02 	vpop	{d8}
 8004c04:	ec41 0b10 	vmov	d0, r0, r1
 8004c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <__kernel_cos+0x184>)
 8004c0e:	491e      	ldr	r1, [pc, #120]	; (8004c88 <__kernel_cos+0x180>)
 8004c10:	429e      	cmp	r6, r3
 8004c12:	bfcc      	ite	gt
 8004c14:	4d1e      	ldrgt	r5, [pc, #120]	; (8004c90 <__kernel_cos+0x188>)
 8004c16:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004c1a:	2400      	movs	r4, #0
 8004c1c:	4622      	mov	r2, r4
 8004c1e:	462b      	mov	r3, r5
 8004c20:	2000      	movs	r0, #0
 8004c22:	f7fb faf5 	bl	8000210 <__aeabi_dsub>
 8004c26:	4622      	mov	r2, r4
 8004c28:	4606      	mov	r6, r0
 8004c2a:	460f      	mov	r7, r1
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	4650      	mov	r0, sl
 8004c30:	4659      	mov	r1, fp
 8004c32:	f7fb faed 	bl	8000210 <__aeabi_dsub>
 8004c36:	4642      	mov	r2, r8
 8004c38:	464b      	mov	r3, r9
 8004c3a:	f7fb fae9 	bl	8000210 <__aeabi_dsub>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4630      	mov	r0, r6
 8004c44:	4639      	mov	r1, r7
 8004c46:	e7d9      	b.n	8004bfc <__kernel_cos+0xf4>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	490f      	ldr	r1, [pc, #60]	; (8004c88 <__kernel_cos+0x180>)
 8004c4c:	e7d8      	b.n	8004c00 <__kernel_cos+0xf8>
 8004c4e:	bf00      	nop
 8004c50:	be8838d4 	.word	0xbe8838d4
 8004c54:	bda8fae9 	.word	0xbda8fae9
 8004c58:	bdb4b1c4 	.word	0xbdb4b1c4
 8004c5c:	3e21ee9e 	.word	0x3e21ee9e
 8004c60:	809c52ad 	.word	0x809c52ad
 8004c64:	3e927e4f 	.word	0x3e927e4f
 8004c68:	19cb1590 	.word	0x19cb1590
 8004c6c:	3efa01a0 	.word	0x3efa01a0
 8004c70:	16c15177 	.word	0x16c15177
 8004c74:	3f56c16c 	.word	0x3f56c16c
 8004c78:	5555554c 	.word	0x5555554c
 8004c7c:	3fa55555 	.word	0x3fa55555
 8004c80:	3fe00000 	.word	0x3fe00000
 8004c84:	3fd33332 	.word	0x3fd33332
 8004c88:	3ff00000 	.word	0x3ff00000
 8004c8c:	3fe90000 	.word	0x3fe90000
 8004c90:	3fd20000 	.word	0x3fd20000
 8004c94:	00000000 	.word	0x00000000

08004c98 <__kernel_rem_pio2>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	ed2d 8b02 	vpush	{d8}
 8004ca0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004ca4:	1ed4      	subs	r4, r2, #3
 8004ca6:	9308      	str	r3, [sp, #32]
 8004ca8:	9101      	str	r1, [sp, #4]
 8004caa:	4bc5      	ldr	r3, [pc, #788]	; (8004fc0 <__kernel_rem_pio2+0x328>)
 8004cac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004cae:	9009      	str	r0, [sp, #36]	; 0x24
 8004cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	9b08      	ldr	r3, [sp, #32]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	9307      	str	r3, [sp, #28]
 8004cbc:	2318      	movs	r3, #24
 8004cbe:	fb94 f4f3 	sdiv	r4, r4, r3
 8004cc2:	f06f 0317 	mvn.w	r3, #23
 8004cc6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004cca:	fb04 3303 	mla	r3, r4, r3, r3
 8004cce:	eb03 0a02 	add.w	sl, r3, r2
 8004cd2:	9b04      	ldr	r3, [sp, #16]
 8004cd4:	9a07      	ldr	r2, [sp, #28]
 8004cd6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004fb0 <__kernel_rem_pio2+0x318>
 8004cda:	eb03 0802 	add.w	r8, r3, r2
 8004cde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004ce0:	1aa7      	subs	r7, r4, r2
 8004ce2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004ce6:	ae22      	add	r6, sp, #136	; 0x88
 8004ce8:	2500      	movs	r5, #0
 8004cea:	4545      	cmp	r5, r8
 8004cec:	dd13      	ble.n	8004d16 <__kernel_rem_pio2+0x7e>
 8004cee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004fb0 <__kernel_rem_pio2+0x318>
 8004cf2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	9b04      	ldr	r3, [sp, #16]
 8004cfa:	429e      	cmp	r6, r3
 8004cfc:	dc32      	bgt.n	8004d64 <__kernel_rem_pio2+0xcc>
 8004cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d00:	9302      	str	r3, [sp, #8]
 8004d02:	9b08      	ldr	r3, [sp, #32]
 8004d04:	199d      	adds	r5, r3, r6
 8004d06:	ab22      	add	r3, sp, #136	; 0x88
 8004d08:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004d0c:	9306      	str	r3, [sp, #24]
 8004d0e:	ec59 8b18 	vmov	r8, r9, d8
 8004d12:	2700      	movs	r7, #0
 8004d14:	e01f      	b.n	8004d56 <__kernel_rem_pio2+0xbe>
 8004d16:	42ef      	cmn	r7, r5
 8004d18:	d407      	bmi.n	8004d2a <__kernel_rem_pio2+0x92>
 8004d1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004d1e:	f7fb fbc5 	bl	80004ac <__aeabi_i2d>
 8004d22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004d26:	3501      	adds	r5, #1
 8004d28:	e7df      	b.n	8004cea <__kernel_rem_pio2+0x52>
 8004d2a:	ec51 0b18 	vmov	r0, r1, d8
 8004d2e:	e7f8      	b.n	8004d22 <__kernel_rem_pio2+0x8a>
 8004d30:	9906      	ldr	r1, [sp, #24]
 8004d32:	9d02      	ldr	r5, [sp, #8]
 8004d34:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004d38:	9106      	str	r1, [sp, #24]
 8004d3a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004d3e:	9502      	str	r5, [sp, #8]
 8004d40:	f7fb fc1e 	bl	8000580 <__aeabi_dmul>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4640      	mov	r0, r8
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	f7fb fa62 	bl	8000214 <__adddf3>
 8004d50:	3701      	adds	r7, #1
 8004d52:	4680      	mov	r8, r0
 8004d54:	4689      	mov	r9, r1
 8004d56:	9b07      	ldr	r3, [sp, #28]
 8004d58:	429f      	cmp	r7, r3
 8004d5a:	dde9      	ble.n	8004d30 <__kernel_rem_pio2+0x98>
 8004d5c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004d60:	3601      	adds	r6, #1
 8004d62:	e7c9      	b.n	8004cf8 <__kernel_rem_pio2+0x60>
 8004d64:	9b04      	ldr	r3, [sp, #16]
 8004d66:	aa0e      	add	r2, sp, #56	; 0x38
 8004d68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8004d6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004d70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004d74:	9c04      	ldr	r4, [sp, #16]
 8004d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d78:	ab9a      	add	r3, sp, #616	; 0x268
 8004d7a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004d7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d86:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004d8a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004d8e:	ab9a      	add	r3, sp, #616	; 0x268
 8004d90:	445b      	add	r3, fp
 8004d92:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8004d96:	2500      	movs	r5, #0
 8004d98:	1b63      	subs	r3, r4, r5
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dc78      	bgt.n	8004e90 <__kernel_rem_pio2+0x1f8>
 8004d9e:	4650      	mov	r0, sl
 8004da0:	ec49 8b10 	vmov	d0, r8, r9
 8004da4:	f000 fbfc 	bl	80055a0 <scalbn>
 8004da8:	ec57 6b10 	vmov	r6, r7, d0
 8004dac:	2200      	movs	r2, #0
 8004dae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004db2:	ee10 0a10 	vmov	r0, s0
 8004db6:	4639      	mov	r1, r7
 8004db8:	f7fb fbe2 	bl	8000580 <__aeabi_dmul>
 8004dbc:	ec41 0b10 	vmov	d0, r0, r1
 8004dc0:	f000 fb66 	bl	8005490 <floor>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	ec51 0b10 	vmov	r0, r1, d0
 8004dca:	4b7e      	ldr	r3, [pc, #504]	; (8004fc4 <__kernel_rem_pio2+0x32c>)
 8004dcc:	f7fb fbd8 	bl	8000580 <__aeabi_dmul>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	f7fb fa1a 	bl	8000210 <__aeabi_dsub>
 8004ddc:	460f      	mov	r7, r1
 8004dde:	4606      	mov	r6, r0
 8004de0:	f7fb fe68 	bl	8000ab4 <__aeabi_d2iz>
 8004de4:	9006      	str	r0, [sp, #24]
 8004de6:	f7fb fb61 	bl	80004ac <__aeabi_i2d>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4630      	mov	r0, r6
 8004df0:	4639      	mov	r1, r7
 8004df2:	f7fb fa0d 	bl	8000210 <__aeabi_dsub>
 8004df6:	f1ba 0f00 	cmp.w	sl, #0
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	460f      	mov	r7, r1
 8004dfe:	dd6c      	ble.n	8004eda <__kernel_rem_pio2+0x242>
 8004e00:	1e62      	subs	r2, r4, #1
 8004e02:	ab0e      	add	r3, sp, #56	; 0x38
 8004e04:	f1ca 0118 	rsb	r1, sl, #24
 8004e08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004e0c:	9d06      	ldr	r5, [sp, #24]
 8004e0e:	fa40 f301 	asr.w	r3, r0, r1
 8004e12:	441d      	add	r5, r3
 8004e14:	408b      	lsls	r3, r1
 8004e16:	1ac0      	subs	r0, r0, r3
 8004e18:	ab0e      	add	r3, sp, #56	; 0x38
 8004e1a:	9506      	str	r5, [sp, #24]
 8004e1c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004e20:	f1ca 0317 	rsb	r3, sl, #23
 8004e24:	fa40 f303 	asr.w	r3, r0, r3
 8004e28:	9302      	str	r3, [sp, #8]
 8004e2a:	9b02      	ldr	r3, [sp, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dd62      	ble.n	8004ef6 <__kernel_rem_pio2+0x25e>
 8004e30:	9b06      	ldr	r3, [sp, #24]
 8004e32:	2200      	movs	r2, #0
 8004e34:	3301      	adds	r3, #1
 8004e36:	9306      	str	r3, [sp, #24]
 8004e38:	4615      	mov	r5, r2
 8004e3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004e3e:	4294      	cmp	r4, r2
 8004e40:	f300 8095 	bgt.w	8004f6e <__kernel_rem_pio2+0x2d6>
 8004e44:	f1ba 0f00 	cmp.w	sl, #0
 8004e48:	dd07      	ble.n	8004e5a <__kernel_rem_pio2+0x1c2>
 8004e4a:	f1ba 0f01 	cmp.w	sl, #1
 8004e4e:	f000 80a2 	beq.w	8004f96 <__kernel_rem_pio2+0x2fe>
 8004e52:	f1ba 0f02 	cmp.w	sl, #2
 8004e56:	f000 80c1 	beq.w	8004fdc <__kernel_rem_pio2+0x344>
 8004e5a:	9b02      	ldr	r3, [sp, #8]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d14a      	bne.n	8004ef6 <__kernel_rem_pio2+0x25e>
 8004e60:	4632      	mov	r2, r6
 8004e62:	463b      	mov	r3, r7
 8004e64:	2000      	movs	r0, #0
 8004e66:	4958      	ldr	r1, [pc, #352]	; (8004fc8 <__kernel_rem_pio2+0x330>)
 8004e68:	f7fb f9d2 	bl	8000210 <__aeabi_dsub>
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	460f      	mov	r7, r1
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	d040      	beq.n	8004ef6 <__kernel_rem_pio2+0x25e>
 8004e74:	4650      	mov	r0, sl
 8004e76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004fb8 <__kernel_rem_pio2+0x320>
 8004e7a:	f000 fb91 	bl	80055a0 <scalbn>
 8004e7e:	4630      	mov	r0, r6
 8004e80:	4639      	mov	r1, r7
 8004e82:	ec53 2b10 	vmov	r2, r3, d0
 8004e86:	f7fb f9c3 	bl	8000210 <__aeabi_dsub>
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460f      	mov	r7, r1
 8004e8e:	e032      	b.n	8004ef6 <__kernel_rem_pio2+0x25e>
 8004e90:	2200      	movs	r2, #0
 8004e92:	4b4e      	ldr	r3, [pc, #312]	; (8004fcc <__kernel_rem_pio2+0x334>)
 8004e94:	4640      	mov	r0, r8
 8004e96:	4649      	mov	r1, r9
 8004e98:	f7fb fb72 	bl	8000580 <__aeabi_dmul>
 8004e9c:	f7fb fe0a 	bl	8000ab4 <__aeabi_d2iz>
 8004ea0:	f7fb fb04 	bl	80004ac <__aeabi_i2d>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <__kernel_rem_pio2+0x338>)
 8004ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eac:	f7fb fb68 	bl	8000580 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	f7fb f9aa 	bl	8000210 <__aeabi_dsub>
 8004ebc:	f7fb fdfa 	bl	8000ab4 <__aeabi_d2iz>
 8004ec0:	ab0e      	add	r3, sp, #56	; 0x38
 8004ec2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8004ec6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ece:	f7fb f9a1 	bl	8000214 <__adddf3>
 8004ed2:	3501      	adds	r5, #1
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4689      	mov	r9, r1
 8004ed8:	e75e      	b.n	8004d98 <__kernel_rem_pio2+0x100>
 8004eda:	d105      	bne.n	8004ee8 <__kernel_rem_pio2+0x250>
 8004edc:	1e63      	subs	r3, r4, #1
 8004ede:	aa0e      	add	r2, sp, #56	; 0x38
 8004ee0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ee4:	15c3      	asrs	r3, r0, #23
 8004ee6:	e79f      	b.n	8004e28 <__kernel_rem_pio2+0x190>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	4b3a      	ldr	r3, [pc, #232]	; (8004fd4 <__kernel_rem_pio2+0x33c>)
 8004eec:	f7fb fdce 	bl	8000a8c <__aeabi_dcmpge>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d139      	bne.n	8004f68 <__kernel_rem_pio2+0x2d0>
 8004ef4:	9002      	str	r0, [sp, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4630      	mov	r0, r6
 8004efc:	4639      	mov	r1, r7
 8004efe:	f7fb fda7 	bl	8000a50 <__aeabi_dcmpeq>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	f000 80c7 	beq.w	8005096 <__kernel_rem_pio2+0x3fe>
 8004f08:	1e65      	subs	r5, r4, #1
 8004f0a:	462b      	mov	r3, r5
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	9904      	ldr	r1, [sp, #16]
 8004f10:	428b      	cmp	r3, r1
 8004f12:	da6a      	bge.n	8004fea <__kernel_rem_pio2+0x352>
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	f000 8088 	beq.w	800502a <__kernel_rem_pio2+0x392>
 8004f1a:	ab0e      	add	r3, sp, #56	; 0x38
 8004f1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004f20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80b4 	beq.w	8005092 <__kernel_rem_pio2+0x3fa>
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004fb8 <__kernel_rem_pio2+0x320>
 8004f30:	f000 fb36 	bl	80055a0 <scalbn>
 8004f34:	00ec      	lsls	r4, r5, #3
 8004f36:	ab72      	add	r3, sp, #456	; 0x1c8
 8004f38:	191e      	adds	r6, r3, r4
 8004f3a:	ec59 8b10 	vmov	r8, r9, d0
 8004f3e:	f106 0a08 	add.w	sl, r6, #8
 8004f42:	462f      	mov	r7, r5
 8004f44:	2f00      	cmp	r7, #0
 8004f46:	f280 80df 	bge.w	8005108 <__kernel_rem_pio2+0x470>
 8004f4a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004fb0 <__kernel_rem_pio2+0x318>
 8004f4e:	f04f 0a00 	mov.w	sl, #0
 8004f52:	eba5 030a 	sub.w	r3, r5, sl
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f2c0 810a 	blt.w	8005170 <__kernel_rem_pio2+0x4d8>
 8004f5c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8004fd8 <__kernel_rem_pio2+0x340>
 8004f60:	ec59 8b18 	vmov	r8, r9, d8
 8004f64:	2700      	movs	r7, #0
 8004f66:	e0f5      	b.n	8005154 <__kernel_rem_pio2+0x4bc>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	9302      	str	r3, [sp, #8]
 8004f6c:	e760      	b.n	8004e30 <__kernel_rem_pio2+0x198>
 8004f6e:	ab0e      	add	r3, sp, #56	; 0x38
 8004f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f74:	b94d      	cbnz	r5, 8004f8a <__kernel_rem_pio2+0x2f2>
 8004f76:	b12b      	cbz	r3, 8004f84 <__kernel_rem_pio2+0x2ec>
 8004f78:	a80e      	add	r0, sp, #56	; 0x38
 8004f7a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004f7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004f82:	2301      	movs	r3, #1
 8004f84:	3201      	adds	r2, #1
 8004f86:	461d      	mov	r5, r3
 8004f88:	e759      	b.n	8004e3e <__kernel_rem_pio2+0x1a6>
 8004f8a:	a80e      	add	r0, sp, #56	; 0x38
 8004f8c:	1acb      	subs	r3, r1, r3
 8004f8e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004f92:	462b      	mov	r3, r5
 8004f94:	e7f6      	b.n	8004f84 <__kernel_rem_pio2+0x2ec>
 8004f96:	1e62      	subs	r2, r4, #1
 8004f98:	ab0e      	add	r3, sp, #56	; 0x38
 8004f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004fa2:	a90e      	add	r1, sp, #56	; 0x38
 8004fa4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004fa8:	e757      	b.n	8004e5a <__kernel_rem_pio2+0x1c2>
 8004faa:	bf00      	nop
 8004fac:	f3af 8000 	nop.w
	...
 8004fbc:	3ff00000 	.word	0x3ff00000
 8004fc0:	0801add8 	.word	0x0801add8
 8004fc4:	40200000 	.word	0x40200000
 8004fc8:	3ff00000 	.word	0x3ff00000
 8004fcc:	3e700000 	.word	0x3e700000
 8004fd0:	41700000 	.word	0x41700000
 8004fd4:	3fe00000 	.word	0x3fe00000
 8004fd8:	0801ad98 	.word	0x0801ad98
 8004fdc:	1e62      	subs	r2, r4, #1
 8004fde:	ab0e      	add	r3, sp, #56	; 0x38
 8004fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004fe8:	e7db      	b.n	8004fa2 <__kernel_rem_pio2+0x30a>
 8004fea:	a90e      	add	r1, sp, #56	; 0x38
 8004fec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	e78b      	b.n	8004f0e <__kernel_rem_pio2+0x276>
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d0fa      	beq.n	8004ff6 <__kernel_rem_pio2+0x35e>
 8005000:	9a08      	ldr	r2, [sp, #32]
 8005002:	4422      	add	r2, r4
 8005004:	00d2      	lsls	r2, r2, #3
 8005006:	a922      	add	r1, sp, #136	; 0x88
 8005008:	18e3      	adds	r3, r4, r3
 800500a:	9206      	str	r2, [sp, #24]
 800500c:	440a      	add	r2, r1
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	f10b 0108 	add.w	r1, fp, #8
 8005014:	f102 0308 	add.w	r3, r2, #8
 8005018:	1c66      	adds	r6, r4, #1
 800501a:	910a      	str	r1, [sp, #40]	; 0x28
 800501c:	2500      	movs	r5, #0
 800501e:	930d      	str	r3, [sp, #52]	; 0x34
 8005020:	9b02      	ldr	r3, [sp, #8]
 8005022:	42b3      	cmp	r3, r6
 8005024:	da04      	bge.n	8005030 <__kernel_rem_pio2+0x398>
 8005026:	461c      	mov	r4, r3
 8005028:	e6a6      	b.n	8004d78 <__kernel_rem_pio2+0xe0>
 800502a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800502c:	2301      	movs	r3, #1
 800502e:	e7e3      	b.n	8004ff8 <__kernel_rem_pio2+0x360>
 8005030:	9b06      	ldr	r3, [sp, #24]
 8005032:	18ef      	adds	r7, r5, r3
 8005034:	ab22      	add	r3, sp, #136	; 0x88
 8005036:	441f      	add	r7, r3
 8005038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800503a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800503e:	f7fb fa35 	bl	80004ac <__aeabi_i2d>
 8005042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005044:	461c      	mov	r4, r3
 8005046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005048:	e9c7 0100 	strd	r0, r1, [r7]
 800504c:	eb03 0b05 	add.w	fp, r3, r5
 8005050:	2700      	movs	r7, #0
 8005052:	f04f 0800 	mov.w	r8, #0
 8005056:	f04f 0900 	mov.w	r9, #0
 800505a:	9b07      	ldr	r3, [sp, #28]
 800505c:	429f      	cmp	r7, r3
 800505e:	dd08      	ble.n	8005072 <__kernel_rem_pio2+0x3da>
 8005060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005062:	aa72      	add	r2, sp, #456	; 0x1c8
 8005064:	18eb      	adds	r3, r5, r3
 8005066:	4413      	add	r3, r2
 8005068:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800506c:	3601      	adds	r6, #1
 800506e:	3508      	adds	r5, #8
 8005070:	e7d6      	b.n	8005020 <__kernel_rem_pio2+0x388>
 8005072:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005076:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800507a:	f7fb fa81 	bl	8000580 <__aeabi_dmul>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4640      	mov	r0, r8
 8005084:	4649      	mov	r1, r9
 8005086:	f7fb f8c5 	bl	8000214 <__adddf3>
 800508a:	3701      	adds	r7, #1
 800508c:	4680      	mov	r8, r0
 800508e:	4689      	mov	r9, r1
 8005090:	e7e3      	b.n	800505a <__kernel_rem_pio2+0x3c2>
 8005092:	3d01      	subs	r5, #1
 8005094:	e741      	b.n	8004f1a <__kernel_rem_pio2+0x282>
 8005096:	f1ca 0000 	rsb	r0, sl, #0
 800509a:	ec47 6b10 	vmov	d0, r6, r7
 800509e:	f000 fa7f 	bl	80055a0 <scalbn>
 80050a2:	ec57 6b10 	vmov	r6, r7, d0
 80050a6:	2200      	movs	r2, #0
 80050a8:	4b99      	ldr	r3, [pc, #612]	; (8005310 <__kernel_rem_pio2+0x678>)
 80050aa:	ee10 0a10 	vmov	r0, s0
 80050ae:	4639      	mov	r1, r7
 80050b0:	f7fb fcec 	bl	8000a8c <__aeabi_dcmpge>
 80050b4:	b1f8      	cbz	r0, 80050f6 <__kernel_rem_pio2+0x45e>
 80050b6:	2200      	movs	r2, #0
 80050b8:	4b96      	ldr	r3, [pc, #600]	; (8005314 <__kernel_rem_pio2+0x67c>)
 80050ba:	4630      	mov	r0, r6
 80050bc:	4639      	mov	r1, r7
 80050be:	f7fb fa5f 	bl	8000580 <__aeabi_dmul>
 80050c2:	f7fb fcf7 	bl	8000ab4 <__aeabi_d2iz>
 80050c6:	4680      	mov	r8, r0
 80050c8:	f7fb f9f0 	bl	80004ac <__aeabi_i2d>
 80050cc:	2200      	movs	r2, #0
 80050ce:	4b90      	ldr	r3, [pc, #576]	; (8005310 <__kernel_rem_pio2+0x678>)
 80050d0:	f7fb fa56 	bl	8000580 <__aeabi_dmul>
 80050d4:	460b      	mov	r3, r1
 80050d6:	4602      	mov	r2, r0
 80050d8:	4639      	mov	r1, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	f7fb f898 	bl	8000210 <__aeabi_dsub>
 80050e0:	f7fb fce8 	bl	8000ab4 <__aeabi_d2iz>
 80050e4:	1c65      	adds	r5, r4, #1
 80050e6:	ab0e      	add	r3, sp, #56	; 0x38
 80050e8:	f10a 0a18 	add.w	sl, sl, #24
 80050ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80050f0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80050f4:	e719      	b.n	8004f2a <__kernel_rem_pio2+0x292>
 80050f6:	4630      	mov	r0, r6
 80050f8:	4639      	mov	r1, r7
 80050fa:	f7fb fcdb 	bl	8000ab4 <__aeabi_d2iz>
 80050fe:	ab0e      	add	r3, sp, #56	; 0x38
 8005100:	4625      	mov	r5, r4
 8005102:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005106:	e710      	b.n	8004f2a <__kernel_rem_pio2+0x292>
 8005108:	ab0e      	add	r3, sp, #56	; 0x38
 800510a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800510e:	f7fb f9cd 	bl	80004ac <__aeabi_i2d>
 8005112:	4642      	mov	r2, r8
 8005114:	464b      	mov	r3, r9
 8005116:	f7fb fa33 	bl	8000580 <__aeabi_dmul>
 800511a:	2200      	movs	r2, #0
 800511c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005120:	4b7c      	ldr	r3, [pc, #496]	; (8005314 <__kernel_rem_pio2+0x67c>)
 8005122:	4640      	mov	r0, r8
 8005124:	4649      	mov	r1, r9
 8005126:	f7fb fa2b 	bl	8000580 <__aeabi_dmul>
 800512a:	3f01      	subs	r7, #1
 800512c:	4680      	mov	r8, r0
 800512e:	4689      	mov	r9, r1
 8005130:	e708      	b.n	8004f44 <__kernel_rem_pio2+0x2ac>
 8005132:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800513e:	f7fb fa1f 	bl	8000580 <__aeabi_dmul>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4640      	mov	r0, r8
 8005148:	4649      	mov	r1, r9
 800514a:	f7fb f863 	bl	8000214 <__adddf3>
 800514e:	3701      	adds	r7, #1
 8005150:	4680      	mov	r8, r0
 8005152:	4689      	mov	r9, r1
 8005154:	9b04      	ldr	r3, [sp, #16]
 8005156:	429f      	cmp	r7, r3
 8005158:	dc01      	bgt.n	800515e <__kernel_rem_pio2+0x4c6>
 800515a:	45ba      	cmp	sl, r7
 800515c:	dae9      	bge.n	8005132 <__kernel_rem_pio2+0x49a>
 800515e:	ab4a      	add	r3, sp, #296	; 0x128
 8005160:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005164:	e9c3 8900 	strd	r8, r9, [r3]
 8005168:	f10a 0a01 	add.w	sl, sl, #1
 800516c:	3e08      	subs	r6, #8
 800516e:	e6f0      	b.n	8004f52 <__kernel_rem_pio2+0x2ba>
 8005170:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005172:	2b03      	cmp	r3, #3
 8005174:	d85b      	bhi.n	800522e <__kernel_rem_pio2+0x596>
 8005176:	e8df f003 	tbb	[pc, r3]
 800517a:	264a      	.short	0x264a
 800517c:	0226      	.short	0x0226
 800517e:	ab9a      	add	r3, sp, #616	; 0x268
 8005180:	441c      	add	r4, r3
 8005182:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005186:	46a2      	mov	sl, r4
 8005188:	46ab      	mov	fp, r5
 800518a:	f1bb 0f00 	cmp.w	fp, #0
 800518e:	dc6c      	bgt.n	800526a <__kernel_rem_pio2+0x5d2>
 8005190:	46a2      	mov	sl, r4
 8005192:	46ab      	mov	fp, r5
 8005194:	f1bb 0f01 	cmp.w	fp, #1
 8005198:	f300 8086 	bgt.w	80052a8 <__kernel_rem_pio2+0x610>
 800519c:	2000      	movs	r0, #0
 800519e:	2100      	movs	r1, #0
 80051a0:	2d01      	cmp	r5, #1
 80051a2:	f300 80a0 	bgt.w	80052e6 <__kernel_rem_pio2+0x64e>
 80051a6:	9b02      	ldr	r3, [sp, #8]
 80051a8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80051ac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f040 809e 	bne.w	80052f2 <__kernel_rem_pio2+0x65a>
 80051b6:	9b01      	ldr	r3, [sp, #4]
 80051b8:	e9c3 7800 	strd	r7, r8, [r3]
 80051bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80051c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80051c4:	e033      	b.n	800522e <__kernel_rem_pio2+0x596>
 80051c6:	3408      	adds	r4, #8
 80051c8:	ab4a      	add	r3, sp, #296	; 0x128
 80051ca:	441c      	add	r4, r3
 80051cc:	462e      	mov	r6, r5
 80051ce:	2000      	movs	r0, #0
 80051d0:	2100      	movs	r1, #0
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	da3a      	bge.n	800524c <__kernel_rem_pio2+0x5b4>
 80051d6:	9b02      	ldr	r3, [sp, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d03d      	beq.n	8005258 <__kernel_rem_pio2+0x5c0>
 80051dc:	4602      	mov	r2, r0
 80051de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051e2:	9c01      	ldr	r4, [sp, #4]
 80051e4:	e9c4 2300 	strd	r2, r3, [r4]
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80051f0:	f7fb f80e 	bl	8000210 <__aeabi_dsub>
 80051f4:	ae4c      	add	r6, sp, #304	; 0x130
 80051f6:	2401      	movs	r4, #1
 80051f8:	42a5      	cmp	r5, r4
 80051fa:	da30      	bge.n	800525e <__kernel_rem_pio2+0x5c6>
 80051fc:	9b02      	ldr	r3, [sp, #8]
 80051fe:	b113      	cbz	r3, 8005206 <__kernel_rem_pio2+0x56e>
 8005200:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005204:	4619      	mov	r1, r3
 8005206:	9b01      	ldr	r3, [sp, #4]
 8005208:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800520c:	e00f      	b.n	800522e <__kernel_rem_pio2+0x596>
 800520e:	ab9a      	add	r3, sp, #616	; 0x268
 8005210:	441c      	add	r4, r3
 8005212:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005216:	2000      	movs	r0, #0
 8005218:	2100      	movs	r1, #0
 800521a:	2d00      	cmp	r5, #0
 800521c:	da10      	bge.n	8005240 <__kernel_rem_pio2+0x5a8>
 800521e:	9b02      	ldr	r3, [sp, #8]
 8005220:	b113      	cbz	r3, 8005228 <__kernel_rem_pio2+0x590>
 8005222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005226:	4619      	mov	r1, r3
 8005228:	9b01      	ldr	r3, [sp, #4]
 800522a:	e9c3 0100 	strd	r0, r1, [r3]
 800522e:	9b06      	ldr	r3, [sp, #24]
 8005230:	f003 0007 	and.w	r0, r3, #7
 8005234:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005238:	ecbd 8b02 	vpop	{d8}
 800523c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005240:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005244:	f7fa ffe6 	bl	8000214 <__adddf3>
 8005248:	3d01      	subs	r5, #1
 800524a:	e7e6      	b.n	800521a <__kernel_rem_pio2+0x582>
 800524c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005250:	f7fa ffe0 	bl	8000214 <__adddf3>
 8005254:	3e01      	subs	r6, #1
 8005256:	e7bc      	b.n	80051d2 <__kernel_rem_pio2+0x53a>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	e7c1      	b.n	80051e2 <__kernel_rem_pio2+0x54a>
 800525e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005262:	f7fa ffd7 	bl	8000214 <__adddf3>
 8005266:	3401      	adds	r4, #1
 8005268:	e7c6      	b.n	80051f8 <__kernel_rem_pio2+0x560>
 800526a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800526e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005272:	4640      	mov	r0, r8
 8005274:	ec53 2b17 	vmov	r2, r3, d7
 8005278:	4649      	mov	r1, r9
 800527a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800527e:	f7fa ffc9 	bl	8000214 <__adddf3>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4606      	mov	r6, r0
 8005288:	460f      	mov	r7, r1
 800528a:	4640      	mov	r0, r8
 800528c:	4649      	mov	r1, r9
 800528e:	f7fa ffbf 	bl	8000210 <__aeabi_dsub>
 8005292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005296:	f7fa ffbd 	bl	8000214 <__adddf3>
 800529a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800529e:	e9ca 0100 	strd	r0, r1, [sl]
 80052a2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80052a6:	e770      	b.n	800518a <__kernel_rem_pio2+0x4f2>
 80052a8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80052ac:	ed3a 7b02 	vldmdb	sl!, {d7}
 80052b0:	4630      	mov	r0, r6
 80052b2:	ec53 2b17 	vmov	r2, r3, d7
 80052b6:	4639      	mov	r1, r7
 80052b8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80052bc:	f7fa ffaa 	bl	8000214 <__adddf3>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4680      	mov	r8, r0
 80052c6:	4689      	mov	r9, r1
 80052c8:	4630      	mov	r0, r6
 80052ca:	4639      	mov	r1, r7
 80052cc:	f7fa ffa0 	bl	8000210 <__aeabi_dsub>
 80052d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052d4:	f7fa ff9e 	bl	8000214 <__adddf3>
 80052d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052dc:	e9ca 0100 	strd	r0, r1, [sl]
 80052e0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80052e4:	e756      	b.n	8005194 <__kernel_rem_pio2+0x4fc>
 80052e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80052ea:	f7fa ff93 	bl	8000214 <__adddf3>
 80052ee:	3d01      	subs	r5, #1
 80052f0:	e756      	b.n	80051a0 <__kernel_rem_pio2+0x508>
 80052f2:	9b01      	ldr	r3, [sp, #4]
 80052f4:	9a01      	ldr	r2, [sp, #4]
 80052f6:	601f      	str	r7, [r3, #0]
 80052f8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80052fc:	605c      	str	r4, [r3, #4]
 80052fe:	609d      	str	r5, [r3, #8]
 8005300:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005304:	60d3      	str	r3, [r2, #12]
 8005306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800530a:	6110      	str	r0, [r2, #16]
 800530c:	6153      	str	r3, [r2, #20]
 800530e:	e78e      	b.n	800522e <__kernel_rem_pio2+0x596>
 8005310:	41700000 	.word	0x41700000
 8005314:	3e700000 	.word	0x3e700000

08005318 <__kernel_sin>:
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	ec55 4b10 	vmov	r4, r5, d0
 8005320:	b085      	sub	sp, #20
 8005322:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005326:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800532a:	ed8d 1b00 	vstr	d1, [sp]
 800532e:	9002      	str	r0, [sp, #8]
 8005330:	da06      	bge.n	8005340 <__kernel_sin+0x28>
 8005332:	ee10 0a10 	vmov	r0, s0
 8005336:	4629      	mov	r1, r5
 8005338:	f7fb fbbc 	bl	8000ab4 <__aeabi_d2iz>
 800533c:	2800      	cmp	r0, #0
 800533e:	d051      	beq.n	80053e4 <__kernel_sin+0xcc>
 8005340:	4622      	mov	r2, r4
 8005342:	462b      	mov	r3, r5
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fb f91a 	bl	8000580 <__aeabi_dmul>
 800534c:	4682      	mov	sl, r0
 800534e:	468b      	mov	fp, r1
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4620      	mov	r0, r4
 8005356:	4629      	mov	r1, r5
 8005358:	f7fb f912 	bl	8000580 <__aeabi_dmul>
 800535c:	a341      	add	r3, pc, #260	; (adr r3, 8005464 <__kernel_sin+0x14c>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	4680      	mov	r8, r0
 8005364:	4689      	mov	r9, r1
 8005366:	4650      	mov	r0, sl
 8005368:	4659      	mov	r1, fp
 800536a:	f7fb f909 	bl	8000580 <__aeabi_dmul>
 800536e:	a33f      	add	r3, pc, #252	; (adr r3, 800546c <__kernel_sin+0x154>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fa ff4c 	bl	8000210 <__aeabi_dsub>
 8005378:	4652      	mov	r2, sl
 800537a:	465b      	mov	r3, fp
 800537c:	f7fb f900 	bl	8000580 <__aeabi_dmul>
 8005380:	a33c      	add	r3, pc, #240	; (adr r3, 8005474 <__kernel_sin+0x15c>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fa ff45 	bl	8000214 <__adddf3>
 800538a:	4652      	mov	r2, sl
 800538c:	465b      	mov	r3, fp
 800538e:	f7fb f8f7 	bl	8000580 <__aeabi_dmul>
 8005392:	a33a      	add	r3, pc, #232	; (adr r3, 800547c <__kernel_sin+0x164>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fa ff3a 	bl	8000210 <__aeabi_dsub>
 800539c:	4652      	mov	r2, sl
 800539e:	465b      	mov	r3, fp
 80053a0:	f7fb f8ee 	bl	8000580 <__aeabi_dmul>
 80053a4:	a337      	add	r3, pc, #220	; (adr r3, 8005484 <__kernel_sin+0x16c>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fa ff33 	bl	8000214 <__adddf3>
 80053ae:	9b02      	ldr	r3, [sp, #8]
 80053b0:	4606      	mov	r6, r0
 80053b2:	460f      	mov	r7, r1
 80053b4:	b9db      	cbnz	r3, 80053ee <__kernel_sin+0xd6>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4650      	mov	r0, sl
 80053bc:	4659      	mov	r1, fp
 80053be:	f7fb f8df 	bl	8000580 <__aeabi_dmul>
 80053c2:	a325      	add	r3, pc, #148	; (adr r3, 8005458 <__kernel_sin+0x140>)
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f7fa ff22 	bl	8000210 <__aeabi_dsub>
 80053cc:	4642      	mov	r2, r8
 80053ce:	464b      	mov	r3, r9
 80053d0:	f7fb f8d6 	bl	8000580 <__aeabi_dmul>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4620      	mov	r0, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	f7fa ff1a 	bl	8000214 <__adddf3>
 80053e0:	4604      	mov	r4, r0
 80053e2:	460d      	mov	r5, r1
 80053e4:	ec45 4b10 	vmov	d0, r4, r5
 80053e8:	b005      	add	sp, #20
 80053ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ee:	2200      	movs	r2, #0
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <__kernel_sin+0x148>)
 80053f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053f6:	f7fb f8c3 	bl	8000580 <__aeabi_dmul>
 80053fa:	4632      	mov	r2, r6
 80053fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005400:	463b      	mov	r3, r7
 8005402:	4640      	mov	r0, r8
 8005404:	4649      	mov	r1, r9
 8005406:	f7fb f8bb 	bl	8000580 <__aeabi_dmul>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005412:	f7fa fefd 	bl	8000210 <__aeabi_dsub>
 8005416:	4652      	mov	r2, sl
 8005418:	465b      	mov	r3, fp
 800541a:	f7fb f8b1 	bl	8000580 <__aeabi_dmul>
 800541e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005422:	f7fa fef5 	bl	8000210 <__aeabi_dsub>
 8005426:	a30c      	add	r3, pc, #48	; (adr r3, 8005458 <__kernel_sin+0x140>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	4606      	mov	r6, r0
 800542e:	460f      	mov	r7, r1
 8005430:	4640      	mov	r0, r8
 8005432:	4649      	mov	r1, r9
 8005434:	f7fb f8a4 	bl	8000580 <__aeabi_dmul>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4630      	mov	r0, r6
 800543e:	4639      	mov	r1, r7
 8005440:	f7fa fee8 	bl	8000214 <__adddf3>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4620      	mov	r0, r4
 800544a:	4629      	mov	r1, r5
 800544c:	f7fa fee0 	bl	8000210 <__aeabi_dsub>
 8005450:	e7c6      	b.n	80053e0 <__kernel_sin+0xc8>
 8005452:	bf00      	nop
 8005454:	f3af 8000 	nop.w
 8005458:	55555549 	.word	0x55555549
 800545c:	3fc55555 	.word	0x3fc55555
 8005460:	3fe00000 	.word	0x3fe00000
 8005464:	5acfd57c 	.word	0x5acfd57c
 8005468:	3de5d93a 	.word	0x3de5d93a
 800546c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005470:	3e5ae5e6 	.word	0x3e5ae5e6
 8005474:	57b1fe7d 	.word	0x57b1fe7d
 8005478:	3ec71de3 	.word	0x3ec71de3
 800547c:	19c161d5 	.word	0x19c161d5
 8005480:	3f2a01a0 	.word	0x3f2a01a0
 8005484:	1110f8a6 	.word	0x1110f8a6
 8005488:	3f811111 	.word	0x3f811111
 800548c:	00000000 	.word	0x00000000

08005490 <floor>:
 8005490:	ec51 0b10 	vmov	r0, r1, d0
 8005494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005498:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800549c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80054a0:	2e13      	cmp	r6, #19
 80054a2:	460c      	mov	r4, r1
 80054a4:	ee10 5a10 	vmov	r5, s0
 80054a8:	4680      	mov	r8, r0
 80054aa:	dc34      	bgt.n	8005516 <floor+0x86>
 80054ac:	2e00      	cmp	r6, #0
 80054ae:	da16      	bge.n	80054de <floor+0x4e>
 80054b0:	a335      	add	r3, pc, #212	; (adr r3, 8005588 <floor+0xf8>)
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	f7fa fead 	bl	8000214 <__adddf3>
 80054ba:	2200      	movs	r2, #0
 80054bc:	2300      	movs	r3, #0
 80054be:	f7fb faef 	bl	8000aa0 <__aeabi_dcmpgt>
 80054c2:	b148      	cbz	r0, 80054d8 <floor+0x48>
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	da59      	bge.n	800557c <floor+0xec>
 80054c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80054cc:	4a30      	ldr	r2, [pc, #192]	; (8005590 <floor+0x100>)
 80054ce:	432b      	orrs	r3, r5
 80054d0:	2500      	movs	r5, #0
 80054d2:	42ab      	cmp	r3, r5
 80054d4:	bf18      	it	ne
 80054d6:	4614      	movne	r4, r2
 80054d8:	4621      	mov	r1, r4
 80054da:	4628      	mov	r0, r5
 80054dc:	e025      	b.n	800552a <floor+0x9a>
 80054de:	4f2d      	ldr	r7, [pc, #180]	; (8005594 <floor+0x104>)
 80054e0:	4137      	asrs	r7, r6
 80054e2:	ea01 0307 	and.w	r3, r1, r7
 80054e6:	4303      	orrs	r3, r0
 80054e8:	d01f      	beq.n	800552a <floor+0x9a>
 80054ea:	a327      	add	r3, pc, #156	; (adr r3, 8005588 <floor+0xf8>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f7fa fe90 	bl	8000214 <__adddf3>
 80054f4:	2200      	movs	r2, #0
 80054f6:	2300      	movs	r3, #0
 80054f8:	f7fb fad2 	bl	8000aa0 <__aeabi_dcmpgt>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d0eb      	beq.n	80054d8 <floor+0x48>
 8005500:	2c00      	cmp	r4, #0
 8005502:	bfbe      	ittt	lt
 8005504:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005508:	fa43 f606 	asrlt.w	r6, r3, r6
 800550c:	19a4      	addlt	r4, r4, r6
 800550e:	ea24 0407 	bic.w	r4, r4, r7
 8005512:	2500      	movs	r5, #0
 8005514:	e7e0      	b.n	80054d8 <floor+0x48>
 8005516:	2e33      	cmp	r6, #51	; 0x33
 8005518:	dd0b      	ble.n	8005532 <floor+0xa2>
 800551a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800551e:	d104      	bne.n	800552a <floor+0x9a>
 8005520:	ee10 2a10 	vmov	r2, s0
 8005524:	460b      	mov	r3, r1
 8005526:	f7fa fe75 	bl	8000214 <__adddf3>
 800552a:	ec41 0b10 	vmov	d0, r0, r1
 800552e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005532:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005536:	f04f 33ff 	mov.w	r3, #4294967295
 800553a:	fa23 f707 	lsr.w	r7, r3, r7
 800553e:	4207      	tst	r7, r0
 8005540:	d0f3      	beq.n	800552a <floor+0x9a>
 8005542:	a311      	add	r3, pc, #68	; (adr r3, 8005588 <floor+0xf8>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fa fe64 	bl	8000214 <__adddf3>
 800554c:	2200      	movs	r2, #0
 800554e:	2300      	movs	r3, #0
 8005550:	f7fb faa6 	bl	8000aa0 <__aeabi_dcmpgt>
 8005554:	2800      	cmp	r0, #0
 8005556:	d0bf      	beq.n	80054d8 <floor+0x48>
 8005558:	2c00      	cmp	r4, #0
 800555a:	da02      	bge.n	8005562 <floor+0xd2>
 800555c:	2e14      	cmp	r6, #20
 800555e:	d103      	bne.n	8005568 <floor+0xd8>
 8005560:	3401      	adds	r4, #1
 8005562:	ea25 0507 	bic.w	r5, r5, r7
 8005566:	e7b7      	b.n	80054d8 <floor+0x48>
 8005568:	2301      	movs	r3, #1
 800556a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800556e:	fa03 f606 	lsl.w	r6, r3, r6
 8005572:	4435      	add	r5, r6
 8005574:	4545      	cmp	r5, r8
 8005576:	bf38      	it	cc
 8005578:	18e4      	addcc	r4, r4, r3
 800557a:	e7f2      	b.n	8005562 <floor+0xd2>
 800557c:	2500      	movs	r5, #0
 800557e:	462c      	mov	r4, r5
 8005580:	e7aa      	b.n	80054d8 <floor+0x48>
 8005582:	bf00      	nop
 8005584:	f3af 8000 	nop.w
 8005588:	8800759c 	.word	0x8800759c
 800558c:	7e37e43c 	.word	0x7e37e43c
 8005590:	bff00000 	.word	0xbff00000
 8005594:	000fffff 	.word	0x000fffff

08005598 <matherr>:
 8005598:	2000      	movs	r0, #0
 800559a:	4770      	bx	lr
 800559c:	0000      	movs	r0, r0
	...

080055a0 <scalbn>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	ec55 4b10 	vmov	r4, r5, d0
 80055a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80055aa:	4606      	mov	r6, r0
 80055ac:	462b      	mov	r3, r5
 80055ae:	b9aa      	cbnz	r2, 80055dc <scalbn+0x3c>
 80055b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80055b4:	4323      	orrs	r3, r4
 80055b6:	d03b      	beq.n	8005630 <scalbn+0x90>
 80055b8:	4b31      	ldr	r3, [pc, #196]	; (8005680 <scalbn+0xe0>)
 80055ba:	4629      	mov	r1, r5
 80055bc:	2200      	movs	r2, #0
 80055be:	ee10 0a10 	vmov	r0, s0
 80055c2:	f7fa ffdd 	bl	8000580 <__aeabi_dmul>
 80055c6:	4b2f      	ldr	r3, [pc, #188]	; (8005684 <scalbn+0xe4>)
 80055c8:	429e      	cmp	r6, r3
 80055ca:	4604      	mov	r4, r0
 80055cc:	460d      	mov	r5, r1
 80055ce:	da12      	bge.n	80055f6 <scalbn+0x56>
 80055d0:	a327      	add	r3, pc, #156	; (adr r3, 8005670 <scalbn+0xd0>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa ffd3 	bl	8000580 <__aeabi_dmul>
 80055da:	e009      	b.n	80055f0 <scalbn+0x50>
 80055dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80055e0:	428a      	cmp	r2, r1
 80055e2:	d10c      	bne.n	80055fe <scalbn+0x5e>
 80055e4:	ee10 2a10 	vmov	r2, s0
 80055e8:	4620      	mov	r0, r4
 80055ea:	4629      	mov	r1, r5
 80055ec:	f7fa fe12 	bl	8000214 <__adddf3>
 80055f0:	4604      	mov	r4, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	e01c      	b.n	8005630 <scalbn+0x90>
 80055f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80055fa:	460b      	mov	r3, r1
 80055fc:	3a36      	subs	r2, #54	; 0x36
 80055fe:	4432      	add	r2, r6
 8005600:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005604:	428a      	cmp	r2, r1
 8005606:	dd0b      	ble.n	8005620 <scalbn+0x80>
 8005608:	ec45 4b11 	vmov	d1, r4, r5
 800560c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005678 <scalbn+0xd8>
 8005610:	f000 f83c 	bl	800568c <copysign>
 8005614:	a318      	add	r3, pc, #96	; (adr r3, 8005678 <scalbn+0xd8>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	ec51 0b10 	vmov	r0, r1, d0
 800561e:	e7da      	b.n	80055d6 <scalbn+0x36>
 8005620:	2a00      	cmp	r2, #0
 8005622:	dd08      	ble.n	8005636 <scalbn+0x96>
 8005624:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005628:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800562c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005630:	ec45 4b10 	vmov	d0, r4, r5
 8005634:	bd70      	pop	{r4, r5, r6, pc}
 8005636:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800563a:	da0d      	bge.n	8005658 <scalbn+0xb8>
 800563c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005640:	429e      	cmp	r6, r3
 8005642:	ec45 4b11 	vmov	d1, r4, r5
 8005646:	dce1      	bgt.n	800560c <scalbn+0x6c>
 8005648:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005670 <scalbn+0xd0>
 800564c:	f000 f81e 	bl	800568c <copysign>
 8005650:	a307      	add	r3, pc, #28	; (adr r3, 8005670 <scalbn+0xd0>)
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	e7e0      	b.n	800561a <scalbn+0x7a>
 8005658:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800565c:	3236      	adds	r2, #54	; 0x36
 800565e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005662:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005666:	4620      	mov	r0, r4
 8005668:	4629      	mov	r1, r5
 800566a:	2200      	movs	r2, #0
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <scalbn+0xe8>)
 800566e:	e7b2      	b.n	80055d6 <scalbn+0x36>
 8005670:	c2f8f359 	.word	0xc2f8f359
 8005674:	01a56e1f 	.word	0x01a56e1f
 8005678:	8800759c 	.word	0x8800759c
 800567c:	7e37e43c 	.word	0x7e37e43c
 8005680:	43500000 	.word	0x43500000
 8005684:	ffff3cb0 	.word	0xffff3cb0
 8005688:	3c900000 	.word	0x3c900000

0800568c <copysign>:
 800568c:	ec51 0b10 	vmov	r0, r1, d0
 8005690:	ee11 0a90 	vmov	r0, s3
 8005694:	ee10 2a10 	vmov	r2, s0
 8005698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800569c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80056a0:	ea41 0300 	orr.w	r3, r1, r0
 80056a4:	ec43 2b10 	vmov	d0, r2, r3
 80056a8:	4770      	bx	lr
	...

080056ac <_init>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	bf00      	nop
 80056b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b2:	bc08      	pop	{r3}
 80056b4:	469e      	mov	lr, r3
 80056b6:	4770      	bx	lr

080056b8 <_fini>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	bf00      	nop
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr
